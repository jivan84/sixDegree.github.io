<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SixDegree</title>
  
  <subtitle>host by chenjin</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://sixdegree.github.io/"/>
  <updated>2020-03-30T13:46:22.000Z</updated>
  <id>http://sixdegree.github.io/</id>
  
  <author>
    <name>Chen Jin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Swagger</title>
    <link href="http://sixdegree.github.io/2019/11/25/Swagger.html"/>
    <id>http://sixdegree.github.io/2019/11/25/Swagger.html</id>
    <published>2019-11-24T16:00:00.000Z</published>
    <updated>2020-03-30T13:46:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="header-1">Annotation</h2><p>Refer to <a href="https://blog.csdn.net/jiangyu1013/article/details/83107255" target="_blank" rel="noopener">swagger2 注解说明</a></p><ul><li><p>请求类上:</p><ul><li><code>@Api(tags=&quot;说明该类的作用&quot;)</code></li></ul></li><li><p>请求方法上 </p><ul><li><code>@ApiOperation(value=&quot;&quot;,notes=&quot;&quot;)</code> 说明方法的用途、作用</li><li><code>@ApiImplicitParams({@ApiImplicitParam(xxxx),...})</code>，<code>@ApiImplicitParam</code> 参数说明<ul><li><code>name</code>：参数名</li><li><code>value</code>：参数的汉字说明、解释</li><li><code>required</code>：参数是否必须传</li><li><code>paramType</code>：参数放在哪个地方<ul><li>header : 请求参数 <code>@RequestHeader</code>获取</li><li>query : 请求参数 <code>@RequestParam</code> 获取</li><li>path: 请求参数<code>@PathVariable</code>获取</li><li>body（不常用）</li><li>form（不常用）    </li></ul></li><li><code>dataType</code>：参数类型，默认String       </li><li><code>defaultValue</code>：参数的默认值</li></ul></li><li><code>@ApiResponses({@ApiResponse(xxx),...})</code> 表示一组响应(一般用于表达错误的响应信息)<ul><li><code>code</code>：数字，例如400</li><li><code>message</code>：信息，例如”请求参数没填好”</li><li><code>response</code>：抛出异常的类</li></ul></li></ul></li><li><p>请求响应entity上(若无特殊说明，不加注解也可，会使用默认的，即直接使用类名&amp;字段名&amp;类型): </p><ul><li><code>@ApiModel</code>（一般用在post/put创建或修改时，使用@RequestBody的场景，请求参数无法使用<code>@ApiImplicitParam</code>注解进行描述）<pre><code>  的时候）</code></pre></li><li><code>@ApiModelProperty</code>：用在entity的属性上</li></ul></li></ul><p><strong>Sample:</strong></p><pre><code class="lang-java">@ApiOperation(&quot;删除某评论&quot;)@ApiImplicitParams({        @ApiImplicitParam(name = &quot;id&quot;, value = &quot;id&quot;, dataType = &quot;Integer&quot;, paramType = &quot;path&quot;),        @ApiImplicitParam(name = &quot;type&quot;, value = &quot;type&quot;, dataType = &quot;String&quot;, paramType = &quot;path&quot;,                allowableValues=&quot;home,school&quot;)})@ApiResponses({    @ApiResponse(code=400,message=&quot;请求参数没填好&quot;),    @ApiResponse(code=404,message=&quot;请求路径没有或页面跳转路径不对&quot;)})@PutMapping(&quot;/comments/{id}/{type}&quot;)public Object updateComment(@PathVariable(&quot;id&quot;) Integer id,        @PathVariable(&quot;type&quot;)String type,        @RequestBody Comment comment){   // ...}</code></pre><h2 id="header-2">Sample</h2><ol><li><p>dependencies</p><pre><code class="lang-xml"> &lt;dependency&gt;     &lt;groupId&gt;io.springfox&lt;/groupId&gt;     &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;     &lt;version&gt;2.9.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;io.springfox&lt;/groupId&gt;     &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;     &lt;version&gt;2.9.2&lt;/version&gt; &lt;/dependency&gt;</code></pre></li><li><p>configuration</p><pre><code class="lang-java"> @Configuration @EnableSwagger2 public class SwaggerConfig {     // @Value(&quot;${swagger.enable:false}&quot;)     // private boolean enable=false;     @Bean     public Docket docket(Environment env) {         Profiles profiles = Profiles.of(&quot;dev&quot;);         boolean flag = env.acceptsProfiles(profiles);         return new Docket(DocumentationType.SWAGGER_2)                 .apiInfo(apiInfo())                 .enable(flag) // .enable(enable)                 .select()                 .apis(RequestHandlerSelectors.basePackage(&quot;com.cj.mybatis.controller&quot;))                 //.apis(RequestHandlerSelectors.withClassAnnotation(RestController.class))                 //.paths(PathSelectors.any())                 .build();     }     private ApiInfo apiInfo() {         return new ApiInfoBuilder()                 .title(&quot;Swagger Demo&quot;)                 .description(&quot;This for swagger demo&quot;)                 //.termsOfServiceUrl(&quot;http://blog.csdn.net/saytime&quot;)                 .version(&quot;1.0&quot;)                 .build();     } }</code></pre></li><li><p>Controller</p><pre><code class="lang-java"> @Api(tags=&quot;Employee Part&quot;) @RestController public class EmployeeController {     @Autowired     private EmployeeService employeeService;     // ============================ CRUD ===========================     @ApiOperation(value=&quot;List Emlpoyees&quot;)     @ApiImplicitParams({             @ApiImplicitParam(name=&quot;page&quot;,value=&quot;页码&quot;,dataType=&quot;Integer&quot;,paramType=&quot;query&quot;,required=false),             @ApiImplicitParam(name=&quot;size&quot;,value=&quot;每页数量&quot;,dataType=&quot;Integer&quot;,paramType=&quot;query&quot;,required=false)     })     @GetMapping(&quot;/employees&quot;)     public Object listEmployees(@RequestParam(name=&quot;page&quot;,required=false) Integer page             ,@RequestParam(name=&quot;size&quot;,required=false) Integer size) {         if(page!=null &amp;&amp; size!=null) {             return ResponseUtil.ok(employeeService.listByPage(page, size));         }else {             // return new ResponseEntity&lt;&gt;(employeeService.listAll(),HttpStatus.OK);             return ResponseUtil.ok(employeeService.listAll());         }     }     @ApiOperation(&quot;Get Employee By Id&quot;)     @ApiImplicitParam(name=&quot;id&quot;,value=&quot;Employee唯一标识&quot;,dataType=&quot;Integer&quot;,paramType=&quot;path&quot;,required=true)     @GetMapping(&quot;/employees/{id}&quot;)     public Object getEmployee(@PathVariable Integer id) {         return ResponseUtil.ok(employeeService.getEmployee(id));     }     @ApiOperation(&quot;Update Employee By Id&quot;)     @ApiImplicitParam(name=&quot;id&quot;,value=&quot;Employee唯一标识&quot;,dataType=&quot;Integer&quot;,paramType=&quot;path&quot;,required=true)     @PutMapping(&quot;/employees/{id}&quot;)     public Object updateEmployee(@PathVariable(&quot;id&quot;) Integer id,@RequestBody Employee emp) {         emp.setId(id);         Integer result=this.employeeService.updateEmployee(emp);         return ResponseUtil.result(result==1, result);     }     @ApiOperation(&quot;Add Employee&quot;)     @PostMapping(&quot;/employees&quot;)     public Object insertEmployee(@RequestBody Employee emp) {         emp.setId(null);         Integer result = this.employeeService.insertEmployee(emp);         return ResponseUtil.result(result!=null, result);     }     @ApiOperation(&quot;Delete Employee By Id&quot;)     @ApiImplicitParam(name=&quot;id&quot;,value=&quot;Employee唯一标识&quot;,dataType=&quot;Integer&quot;,paramType=&quot;path&quot;,required=true)     @DeleteMapping(&quot;/employees/{id}&quot;)     public Object deleteEmployee(@PathVariable Integer id) {         Integer result = this.employeeService.deleteEmployee(id);         return ResponseUtil.result(result==1, result);     } }</code></pre></li><li><p>entity</p><pre><code class="lang-java"> @ApiModel(&quot;Employee Model&quot;) @Data public class Employee {     @ApiModelProperty(&quot;唯一标识&quot;)     private Integer id;     @ApiModelProperty(&quot;名称&quot;)     private String name;     @ApiModelProperty(&quot;备注&quot;)     private String remark;     @ApiModelProperty(name=&quot;部门Id&quot;,notes=&quot;Department table primary key&quot;)     private Integer departmentId; }</code></pre></li><li><p>run then visit: <a href="http://localhost:8080/demo/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/demo/swagger-ui.html</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;header-1&quot;&gt;Annotation&lt;/h2&gt;
&lt;p&gt;Refer to &lt;a href=&quot;https://blog.csdn.net/jiangyu1013/article/details/83107255&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
    
      <category term="Java" scheme="http://sixdegree.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis</title>
    <link href="http://sixdegree.github.io/2019/11/23/MyBatis.html"/>
    <id>http://sixdegree.github.io/2019/11/23/MyBatis.html</id>
    <published>2019-11-22T16:00:00.000Z</published>
    <updated>2020-03-30T13:46:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="header-1">Starter</h2><p><a href="https://github.com/mybatis/mybatis-3" target="_blank" rel="noopener">Github</a> | <a href="https://mybatis.org/mybatis-3/getting-started.html" target="_blank" rel="noopener">Doc</a></p><h3 id="header-2">DB Data</h3><ol><li>pe_department<pre><code class="lang-sql"> CREATE TABLE `pe_department` (     `id` INT(11) NOT NULL AUTO_INCREMENT,     `name` VARCHAR(50) NOT NULL,     `remark` VARCHAR(100) NULL DEFAULT NULL,     PRIMARY KEY (`id`) ) COLLATE=&#39;latin1_swedish_ci&#39; ENGINE=InnoDB AUTO_INCREMENT=4 ;</code></pre></li><li>pe_employee<pre><code class="lang-sql"> CREATE TABLE `pe_employee` (     `id` INT(11) NOT NULL AUTO_INCREMENT,     `department_id` INT(11) NOT NULL,     `name` VARCHAR(50) NOT NULL DEFAULT &#39;0&#39;,     `remark` VARCHAR(100) NULL DEFAULT NULL,     PRIMARY KEY (`id`),     INDEX `FK__pe_department` (`department_id`),     CONSTRAINT `FK__pe_department` FOREIGN KEY (`department_id`) REFERENCES `pe_department` (`id`) ) COLLATE=&#39;latin1_swedish_ci&#39; ENGINE=InnoDB AUTO_INCREMENT=10 ;</code></pre></li><li><p>test data</p><pre><code class="lang-sql"> -- pe_department INSERT INTO pe_department(name,remark) VALUES(&#39;Dep-A&#39;,&#39;This is Department A&#39;); INSERT INTO pe_department(name,remark) VALUES(&#39;Dep-B&#39;,&#39;This is Department B&#39;); INSERT INTO pe_department(name,remark) VALUES(&#39;Dep-C&#39;,&#39;This is Department C&#39;); -- pe_employee INSERT INTO pe_employee(name,department_id,remark) VALUES (&#39;Test1&#39;,1,&#39;This is Test1&#39;); INSERT INTO pe_employee(name,department_id,remark) VALUES (&#39;Test2&#39;,1,&#39;This is Test2&#39;); INSERT INTO pe_employee(name,department_id,remark) VALUES (&#39;Test3&#39;,1,&#39;This is Test3&#39;); INSERT INTO pe_employee(name,department_id,remark) VALUES (&#39;Test4&#39;,2,&#39;This is Test4&#39;); INSERT INTO pe_employee(name,department_id,remark) VALUES (&#39;Test5&#39;,2,&#39;This is Test5&#39;); INSERT INTO pe_employee(name,department_id,remark) VALUES (&#39;Test6&#39;,2,&#39;This is Test6&#39;); INSERT INTO pe_employee(name,department_id,remark) VALUES (&#39;Test7&#39;,3,&#39;This is Test7&#39;); INSERT INTO pe_employee(name,department_id,remark) VALUES (&#39;Test8&#39;,3,&#39;This is Test8&#39;); INSERT INTO pe_employee(name,department_id,remark) VALUES (&#39;Test9&#39;,3,&#39;This is Test9&#39;);</code></pre></li></ol><h3 id="header-3">HelloWorld</h3><ol><li>dependency (pom.xml)<pre><code class="lang-xml"> &lt;dependency&gt;     &lt;groupId&gt;org.mybatis&lt;/groupId&gt;     &lt;artifactId&gt;mybatis&lt;/artifactId&gt;     &lt;version&gt;3.5.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;mysql&lt;/groupId&gt;     &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;     &lt;version&gt;8.0.18&lt;/version&gt; &lt;/dependency&gt;</code></pre></li><li><p>global config (mybatis-config.xml)</p><pre><code class="lang-xml"> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE configuration   PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;   &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt;   &lt;environments default=&quot;development&quot;&gt;     &lt;environment id=&quot;development&quot;&gt;       &lt;transactionManager type=&quot;JDBC&quot;/&gt;       &lt;dataSource type=&quot;POOLED&quot;&gt;         &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;         &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/demo?characterEncoding=utf8&amp;amp;useSSL=false&amp;amp;serverTimezone=UTC&quot;/&gt;         &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;         &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;       &lt;/dataSource&gt;     &lt;/environment&gt;   &lt;/environments&gt;   &lt;mappers&gt;     &lt;mapper resource=&quot;mapper/EmployeeMapper.xml&quot;/&gt;   &lt;/mappers&gt; &lt;/configuration&gt;</code></pre></li><li><p>sql config (mapper/EmployeeMapper.xml)</p><pre><code class="lang-xml"> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE mapper   PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;   &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.cj.mybatis.mapper.EmployeeMapper&quot;&gt;   &lt;!-- id: 标识; resultType: 返回值类型; #{id}: 从传递过来的参数中取出id值 --&gt;   &lt;select id=&quot;getEmployee&quot; resultType=&quot;com.cj.mybatis.entity.Employee&quot;&gt;     select id,name,remark,department_id as departmentId from pe_employee where id = #{id}   &lt;/select&gt; &lt;/mapper&gt;</code></pre></li><li><p>entity (com.cj.mybatis.entity.Employee.java)</p><pre><code class="lang-java"> public class Employee {     private Integer id;     private String name;     private String remark;     private Integer departmentId;     // getXxx,setXxx,toString     // ... }</code></pre></li><li><p>Usage1</p><pre><code class="lang-java"> @Test public void test1() throws IOException {     // 1. 根据全局配置文件创建一个SqlSessionFactory对象     String resource = &quot;mybatis-config.xml&quot;;     InputStream inputStream = Resources.getResourceAsStream(resource);     SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder()             .build(inputStream);     // 2. 获取SqlSession对象来执行映射的sql(一个SqlSession代表和数据库的一次会话，用完关闭)     SqlSession session = sqlSessionFactory.openSession();     try {         // selectOne(namespace.id,parameter)         Employee emp = session.selectOne(&quot;com.cj.mybatis.mapper.EmployeeMapper.getEmployee&quot;, 1);         System.out.println(emp);     }finally {         session.close();     } }</code></pre></li><li><p>Usage2</p><ul><li><p>dao interface (com.cj.mybatis.mapper.EmployeeMapper.java)</p><pre><code class="lang-java">  package com.cj.mybatis.mapper;  import com.cj.mybatis.entity.Employee;  public interface EmployeeMapper {       Employee getEmployee(Integer id);  }</code></pre></li><li><p>Test</p><pre><code class="lang-java">  @Test  public void test2() throws IOException {      // 1. 根据全局配置文件创建一个SqlSessionFactory对象      String resource = &quot;mybatis-config.xml&quot;;      InputStream inputStream = Resources.getResourceAsStream(resource);      SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder()              .build(inputStream);      // 2. 获取SqlSession对象，执行映射的sql      try (SqlSession session = sqlSessionFactory.openSession()) {          // Method1: no EmployeeMapper.java          // Employee emp = session.selectOne(&quot;com.cj.mybatis.mapper.EmployeeMapper.getEmployee&quot;, 1);          // Method2: use EmployeeMapper.java          // 注： interface EmployeeMapper 无实现类，mybatis会将此接口和sql配置进行绑定，生成一个代理对象执行          EmployeeMapper employeeMapper = session.getMapper(EmployeeMapper.class);          Employee emp = employeeMapper.getEmployee(1);          System.out.println(emp);      }</code></pre></li></ul></li></ol><h2 id="header-4">Global Config</h2><ul><li>properties</li><li>settings</li><li>typeAliases</li><li>typeHandlers</li><li>objectFactory</li><li>plugins</li><li>evironments (evironment: transactionManager &amp; dataSource)</li><li>databaseIdProvider</li><li>mappers</li></ul><h3 id="header-5">properties</h3><p><strong>Sample:</strong></p><ol><li><p>mybatis-config.xml</p><pre><code class="lang-xml"> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE configuration   PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;   &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt;   &lt;!-- resource: 引入类路径下资源； url: 引入网络或磁盘路径下资源 --&gt;   &lt;properties resource=&quot;db.properties&quot;&gt;       &lt;!-- &lt;property name=&quot;&quot; value=&quot;&quot;/&gt; --&gt;   &lt;/properties&gt;   &lt;environments default=&quot;development&quot;&gt;     &lt;environment id=&quot;development&quot;&gt;       &lt;transactionManager type=&quot;JDBC&quot;/&gt;       &lt;dataSource type=&quot;POOLED&quot;&gt;           &lt;property name=&quot;driver&quot; value=&quot;${jdbc.driver}&quot;/&gt;           &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot;/&gt;           &lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot;/&gt;           &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;/&gt;         &lt;/dataSource&gt;     &lt;/environment&gt;   &lt;/environments&gt;   &lt;mappers&gt;     &lt;mapper resource=&quot;mapper/EmployeeMapper.xml&quot;/&gt;     &lt;mapper resource=&quot;mapper/DepartmentMapper.xml&quot;/&gt;   &lt;/mappers&gt; &lt;/configuration&gt;</code></pre></li><li>db.properties<pre><code class="lang-properties"> jdbc.driver=com.mysql.cj.jdbc.Driver jdbc.url=jdbc:mysql://localhost:3306/demo?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC jdbc.username=root jdbc.password=123456</code></pre></li></ol><h3 id="header-6">settings</h3><ul><li>cacheEnable (default: true)</li><li>lazyLoadingEnabled (default: false)</li><li>useColumnLabel (default: true)</li><li>defaultStatementTimeout (default: null)</li><li>mapUnderscoreToCamelCase (default: false 默认不开启驼峰命名规则映射：a_column-&gt;aColumn)</li><li>jdbcTypeForNull (default:OTHER)</li><li>autoMappingBehavior (default: PARTIAL 开启自动映射，列名与javaBean属性名必须一致)</li><li>…</li></ul><p><strong>Sample:</strong></p><ol><li>mybatis-config.xml<pre><code class="lang-xml"> &lt;settings&gt;     &lt;!-- 打开驼峰命名规则映射--&gt;     &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt; &lt;/settings&gt;</code></pre></li><li>mapper/EmployeeMapper.xml<pre><code class="lang-xml"> &lt;mapper namespace=&quot;com.cj.mybatis.mapper.EmployeeMapper&quot;&gt;   &lt;select id=&quot;getEmployee&quot; resultType=&quot;com.cj.mybatis.entity.Employee&quot;&gt;     &lt;!-- select id,name,remark,department_id as departmentId from pe_employee where id = #{id} --&gt;     select * from pe_employee where id = #{id}     &lt;!-- =&gt; setting mapUnderscoreToCamelCase:true后，可以匹配department_id到departmentId--&gt;   &lt;/select&gt; &lt;/mapper&gt;</code></pre></li></ol><h3 id="header-7">typeAliases</h3><ul><li>别名处理器，给java类型起别名（别名不区分大小写）</li><li>There are many built-in type aliases for common Java types,eg:<ul><li>byte _byte</li><li>int _int</li><li>String string</li><li>Integer int/integer</li><li>Date date</li><li>Map map</li><li>…</li></ul></li></ul><p><strong>Sample:</strong></p><ol><li><p>单个配置别名（使用默认别名）</p><pre><code class="lang-xml"> &lt;!-- mybatis-config.xml --&gt; &lt;typeAliases&gt;   &lt;typeAlias type=&quot;com.cj.mybatis.entity.Employee&quot;/&gt; &lt;!-- 默认别名=类名 --&gt; &lt;/typeAliases&gt; &lt;!-- mapper/EmployeeMapper.xml --&gt; &lt;mapper namespace=&quot;com.cj.mybatis.mapper.EmployeeMapper&quot;&gt;   &lt;select id=&quot;getEmployee&quot; resultType=&quot;employee&quot;&gt;  &lt;!-- employee/Employee/com.cj.mybatis.entity.Employee 都可--&gt;     select * from pe_employee where id = #{id}   &lt;/select&gt; &lt;/mapper&gt;</code></pre></li><li><p>单个配置别名（指定别名）</p><pre><code class="lang-xml"> &lt;!-- mybatis-config.xml --&gt; &lt;typeAliases&gt;   &lt;typeAlias type=&quot;com.cj.mybatis.entity.Employee&quot; alias=&quot;emp&quot;/&gt; &lt;!-- 指定别名 --&gt; &lt;/typeAliases&gt; &lt;!-- mapper/EmployeeMapper.xml --&gt; &lt;mapper namespace=&quot;com.cj.mybatis.mapper.EmployeeMapper&quot;&gt;   &lt;select id=&quot;getEmployee&quot; resultType=&quot;emp&quot;&gt;  &lt;!-- emp/Emp/com.cj.mybatis.entity.Employee 都可--&gt;     select * from pe_employee where id = #{id}   &lt;/select&gt; &lt;/mapper&gt;</code></pre></li><li><p>批量配置别名</p><pre><code class="lang-xml"> &lt;!-- mybatis-config.xml --&gt; &lt;typeAliases&gt;     &lt;!-- &lt;typeAlias type=&quot;com.cj.mybatis.entity.Department&quot;/&gt;     &lt;typeAlias type=&quot;com.cj.mybatis.entity.Employee&quot; alias=&quot;emp&quot;/&gt; --&gt;     &lt;!-- 批量起别名（使用默认别名，即类名）         在此基础上，可在类上加@Alias注解为某个类指定新的别名，eg：         @Alias(&quot;emp&quot;)         public Employee{             //...         }      --&gt;     &lt;package name=&quot;com.cj.mybatis.entity&quot;/&gt;  &lt;/typeAliases&gt;</code></pre></li></ol><h3 id="header-8">typeHandlers</h3><p>类型处理器(XxxTypeHandler): value =&gt; javaType</p><pre><code class="lang-xml">&lt;typeHandlers&gt;    &lt;!-- method1: 配置具体的TypeHandler,eg:    &lt;typeHandler handler=&quot;org.apache.ibatis.type.EnumOrdinalTypeHandler&quot;         javaType=&quot;com.cj.mybatis.entity.UserTypeEnum&quot;/&gt;    --&gt;    &lt;!-- method2: 或者在XxxMapper.xml中具体处理某个字段时设置,eg:        #{status,typeHandler=xxx}         &lt;resultMap&gt;            &lt;result column=&quot;&quot; property=&quot;&quot; typeHandler=&quot;xxx&quot; /&gt;        &lt;/resultMap&gt;            注：若在位置参数中配置typeHandler，应保证insert/select用的TypeHandler是一样的    --&gt;&lt;/typeHandlers&gt;</code></pre><h3 id="header-9">plugins</h3><p><strong>Sample:</strong></p><pre><code class="lang-xml">&lt;plugins&gt;    &lt;plugin interceptor=&quot;com.cj.mybatis.extend.MyFirstPlugin&quot;&gt;        &lt;property name=&quot;testname&quot; value=&quot;first-plugin&quot;/&gt;    &lt;/plugin&gt;&lt;/plugins&gt;</code></pre><h3 id="header-10">environments</h3><p><strong>Sample:</strong></p><pre><code class="lang-xml">&lt;environments default=&quot;development&quot;&gt; &lt;!-- switch: development/product--&gt;    &lt;environment id=&quot;development&quot;&gt;      &lt;transactionManager type=&quot;JDBC&quot;/&gt;      &lt;dataSource type=&quot;POOLED&quot;&gt;          &lt;property name=&quot;driver&quot; value=&quot;${dev.jdbc.driver}&quot;/&gt;          &lt;property name=&quot;url&quot; value=&quot;${dev.jdbc.url}&quot;/&gt;          &lt;property name=&quot;username&quot; value=&quot;${dev.jdbc.username}&quot;/&gt;          &lt;property name=&quot;password&quot; value=&quot;${dev.jdbc.password}&quot;/&gt;        &lt;/dataSource&gt;    &lt;/environment&gt;    &lt;environment id=&quot;product&quot;&gt;      &lt;transactionManager type=&quot;JDBC&quot;/&gt;      &lt;dataSource type=&quot;POOLED&quot;&gt;          &lt;property name=&quot;driver&quot; value=&quot;${pro.jdbc.driver}&quot;/&gt;          &lt;property name=&quot;url&quot; value=&quot;${pro.jdbc.url}&quot;/&gt;          &lt;property name=&quot;username&quot; value=&quot;${pro.jdbc.username}&quot;/&gt;          &lt;property name=&quot;password&quot; value=&quot;${pro.jdbc.password}&quot;/&gt;        &lt;/dataSource&gt;    &lt;/environment&gt;  &lt;/environments&gt;</code></pre><h3 id="header-11">databaseIdProvider</h3><p>支持多数据库厂商(execute different statements depending on database vendor)</p><pre><code class="lang-xml">&lt;!-- mybatis-config.xml --&gt;&lt;!-- type=&quot;DB_VENDOR&quot;: VendorDatabaseIdProvider 得到数据库厂商的不同标识（驱动 Connection.getMetaData().getDatabaseProductName()） --&gt;&lt;databaseIdProvider type=&quot;DB_VENDOR&quot;&gt;    &lt;!-- 为不同数据库厂商标识起个别名 --&gt;    &lt;property name=&quot;MySQL&quot; value=&quot;mysql&quot;/&gt;    &lt;property name=&quot;Oracle&quot; value=&quot;oracle&quot;/&gt;    &lt;property name=&quot;SQL Server&quot; value=&quot;sqlserver&quot;/&gt;&lt;/databaseIdProvider&gt;&lt;!-- mapper/EmployeeMapper.xml --&gt;&lt;mapper namespace=&quot;com.cj.mybatis.mapper.EmployeeMapper&quot;&gt;  &lt;!-- 1. default --&gt;  &lt;select id=&quot;getEmployee&quot; resultType=&quot;com.cj.mybatis.entity.Employee&quot;&gt;     select * from pe_employee where id = #{id}  &lt;/select&gt;  &lt;!-- 2. for mysql --&gt;  &lt;select id=&quot;getEmployee&quot; resultType=&quot;com.cj.mybatis.entity.Employee&quot; databaseId=&quot;mysql&quot;&gt;     select * from pe_employee where id = #{id}  &lt;/select&gt;  &lt;!-- 3. for oracle --&gt;  &lt;select id=&quot;getEmployee&quot; resultType=&quot;com.cj.mybatis.entity.Employee&quot; databaseId=&quot;oracle&quot;&gt;     select * from pe_employee where id = #{id}  &lt;/select&gt;&lt;/mapper&gt;&lt;!--     =&gt; if current use MySQL datasource =&gt; load 1 &amp; 2 =&gt; use 2    =&gt; if current use Oracle datasource =&gt; load 1 &amp; 3 =&gt; use 3    =&gt; if current use any Other datasource =&gt; load 1 =&gt; use 1--&gt;</code></pre><h3 id="header-12">mappers</h3><p>注册sql映射到global config中</p><ul><li><code>&lt;mapper&gt;</code> 单个注册:<ul><li>url: 磁盘或网络文件（file:///var/mappers/AuthorMapper.xml）</li><li>resource: 类路径下文件  （mapper/EmployeeMapper.xml）</li><li>class: 接口<ul><li>方式一：接口和mapper文件同名同路径下</li><li>方式二：接口上使用注解写sql（无需mapper文件）</li></ul></li></ul></li><li><code>&lt;package&gt;</code> 批量注册<ul><li>name: 接口包名（接口使用注解写sql）</li></ul></li></ul><p><strong>Sample：三种方式</strong></p><p>mybatis-config.xml</p><ol><li>配置使用url/resource &amp; mapper文件<pre><code class="lang-xml"> &lt;mappers&gt;     &lt;mapper resource=&quot;mapper/EmployeeMapper.xml&quot;/&gt; &lt;/mappers&gt;</code></pre><pre><code class="lang-java"> package com.cj.mybatis.mapper; import com.cj.mybatis.entity.Employee; public interface EmployeeMapper {     Employee getEmployee(Integer id); }</code></pre></li><li>配置使用class &amp; 接口上使用注解写sql（无需mapper文件）<pre><code class="lang-xml"> &lt;mappers&gt;     &lt;mapper class=&quot;com.cj.mybatis.mapper.EmployeeWithAnnotationMapper&quot;/&gt; &lt;/mappers&gt;</code></pre><pre><code class="lang-java"> package com.cj.mybatis.mapper; import org.apache.ibatis.annotations.Select; import com.cj.mybatis.entity.Employee; public interface EmployeeWithAnnotationMapper {     @Select(&quot;select * from pe_employee where id=#{id}&quot;)     public Employee getEmployee(Integer id); }</code></pre></li><li>批量注册（规则同class方式）<pre><code class="lang-xml"> &lt;mappers&gt;     &lt;package name=&quot;com.cj.mybatis.mapper&quot;/&gt; &lt;/mappers&gt;</code></pre></li></ol><h2 id="header-13">Sql Mapper Config: CRUD</h2><ul><li><code>&lt;select&gt;</code></li><li><code>&lt;insert&gt;</code></li><li><code>&lt;update&gt;</code></li><li><code>&lt;delete&gt;</code></li></ul><h3 id="header-14">select</h3><p><code>&lt;select&gt;</code>用来定义查询操作,属性：</p><ul><li>唯一标识: id</li><li>参数<ul><li>parameterType 参数类型（optional,mybatis会根据TypeHandler自动推断）</li></ul></li><li>结果集<ul><li>resultType 返回值类型，别名或全类名（集合类则指定集合中的元素类型），注：不能和resultMap同时使用</li><li>resultMap</li><li>resultSets,resultSetType</li><li>resultOrdered</li></ul></li><li>缓存相关<ul><li>flushCache</li><li>useCache</li></ul></li><li>statementType: PREPARED,STATEMENT,CALLABLE</li><li>timeout</li><li>fetchSize</li><li>databaseId</li></ul><ol><li><p>DepartmentMapper.xml</p><pre><code class="lang-xml"> &lt;!-- public Department getDepartment(Integer id); --&gt; &lt;select id=&quot;getDepartment&quot; resultType=&quot;com.cj.mybatis.entity.Department&quot;&gt;     select * from pe_department where id = #{id} &lt;/select&gt; &lt;!-- public List&lt;Department&gt; listDepartment(); --&gt; &lt;select id=&quot;listDepartment&quot; resultType=&quot;com.cj.mybatis.entity.Department&quot;&gt;     select * from pe_department &lt;/select&gt;</code></pre></li><li><p>test</p><pre><code class="lang-java"> private SqlSessionFactory getSqlSessionFactory() throws IOException {     String resource = &quot;mybatis-config2.xml&quot;;     InputStream inputStream = Resources.getResourceAsStream(resource);     return new SqlSessionFactoryBuilder().build(inputStream); } @Test public void testQueryDepartment() throws IOException {     SqlSessionFactory factory = getSqlSessionFactory();     try(SqlSession session=factory.openSession()){         DepartmentMapper departmentMapper = session.getMapper(DepartmentMapper.class);         System.out.println(&quot;------------listDepartment------------&quot;);         List&lt;Department&gt; list = departmentMapper.listDepartment();         System.out.println(list);         System.out.println(&quot;------------getDepartment------------&quot;);         Department dept = departmentMapper.getDepartment(1);         System.out.println(dept);     } }</code></pre></li></ol><h3 id="header-15">insert</h3><ol><li><p>DepartmentMapper.xml</p><pre><code class="lang-xml"> &lt;!-- public Integer insertDepartment(Department department); --&gt; &lt;insert id=&quot;insertDepartment&quot;&gt;     insert into pe_department(name,remark) values (#{name},#{remark}) &lt;/insert&gt; &lt;!-- public Integer insertDepartmentAndReturnId(Department department); --&gt; &lt;!--      useGeneratedKeys=false/true 是否使用产生的主键；      keyProperty: 配置获取到的主键注入javaBean的哪个属性中  --&gt; &lt;insert id=&quot;insertDepartmentAndReturnId&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;     insert into pe_department(name,remark) values (#{name},#{remark}) &lt;/insert&gt; &lt;!-- public Integer insertDepartmentByNextSeq(Department department); --&gt; &lt;insert id=&quot;insertDepartmentByNextSeq&quot;&gt;     &lt;!-- order=&quot;BEFORE&quot;/&quot;AFTER&quot; 在sql执行前/后执行 --&gt;     &lt;!-- &lt;selectKey keyProperty=&quot;id&quot; order=&quot;BEFORE&quot; resultType=&quot;Integer&quot;&gt;         select max(id)+1 from pe_department     &lt;/selectKey&gt; --&gt;     &lt;selectKey keyProperty=&quot;id&quot; order=&quot;BEFORE&quot; resultType=&quot;Integer&quot;&gt;         &lt;!-- 注意加allowMultiQueries=true这里才可执行多条（ jdbc:mysql://localhost:3306/demo?allowMultiQueries=true） --&gt;         update pe_generator set next=next+1 where segment_name=&#39;dept_seq&#39;;         select next from pe_generator where segment_name=&#39;dept_seq&#39;     &lt;/selectKey&gt;     insert into pe_department(id,name,remark) values (#{id},#{name},#{remark}) &lt;/insert&gt;</code></pre></li><li><p>test</p><pre><code class="lang-java"> /* Note:     CUD 可返回类型：Integer/Long/Boolean 受影响的行数/是否成功     CUD 需提交数据： factory.openSession(true) 自动commit / factory.openSession() + session.commit() 手动commit */ @Test public void testInsertDepartment() throws IOException {     SqlSessionFactory factory = getSqlSessionFactory();     try(SqlSession session=factory.openSession()){         DepartmentMapper departmentMapper = session.getMapper(DepartmentMapper.class);         System.out.println(&quot;------------insertDepartment------------&quot;);         Department dept = new Department(&quot;Dep-test01&quot;,&quot;This is department test01&quot;);         Integer result = departmentMapper.insertDepartment(dept);         System.out.println(result);         System.out.println(dept);           // =&gt; dept.getId() is null         session.commit();                   // note: commit     } } @Test public void testInsertDepartmentAndReturnId() throws IOException {     SqlSessionFactory factory = getSqlSessionFactory();     try(SqlSession session=factory.openSession()){         DepartmentMapper departmentMapper = session.getMapper(DepartmentMapper.class);         System.out.println(&quot;------------insertDepartmentAndReturnId------------&quot;);         Department dept = new Department(&quot;Dep-test01&quot;,&quot;This is department test01&quot;);         Integer result = departmentMapper.insertDepartmentAndReturnId(dept);         System.out.println(result);         System.out.println(dept);           // =&gt; dept.getId() is not null         session.commit();                   // note: commit     } } @Test public void testInsertDepartmentByNextSeq() throws IOException {     SqlSessionFactory factory = getSqlSessionFactory();     try(SqlSession session=factory.openSession()){         DepartmentMapper departmentMapper = session.getMapper(DepartmentMapper.class);         System.out.println(&quot;------------insertDepartmentAndReturnId------------&quot;);         Department dept = new Department(&quot;Dep-test01&quot;,&quot;This is department test01&quot;);         Integer result = departmentMapper.insertDepartmentByNextSeq(dept);         System.out.println(result);         System.out.println(dept);           // =&gt; dept.getId() is not null         session.commit();                   // note: commit     } }</code></pre></li></ol><h3 id="header-16">update</h3><ol><li><p>DepartmentMapper.xml</p><pre><code class="lang-xml"> &lt;!-- public Integer updateDepartment(Department department); --&gt; &lt;update id=&quot;updateDepartment&quot;&gt;     update pe_department set name=#{name},remark=#{remark} where id=#{id} &lt;/update&gt;</code></pre></li><li><p>test</p><pre><code class="lang-java"> @Test public void testUpdateDepartment() throws IOException {     SqlSessionFactory factory = getSqlSessionFactory();     try(SqlSession session=factory.openSession()){         DepartmentMapper departmentMapper = session.getMapper(DepartmentMapper.class);         System.out.println(&quot;------------updateDepartment------------&quot;);         Integer result = departmentMapper.updateDepartment(new Department(5,&quot;Dep-test02&quot;,&quot;This is department test02&quot;));         System.out.println(result);         session.commit();                   // note: commits     } }</code></pre></li></ol><h3 id="header-17">delete</h3><ol><li><p>DepartmentMapper.xml</p><pre><code class="lang-xml"> &lt;!-- public Integer deleteDepartment(Integer id); --&gt; &lt;delete id=&quot;deleteDepartment&quot;&gt;     delete from pe_department where id=#{id} &lt;/delete&gt;</code></pre></li><li><p>test</p><pre><code class="lang-java"> @Test public void testDeleteDepartment() throws IOException {     SqlSessionFactory factory = getSqlSessionFactory();     try(SqlSession session=factory.openSession()){         DepartmentMapper departmentMapper = session.getMapper(DepartmentMapper.class);         System.out.println(&quot;------------deleteDepartment------------&quot;);         Integer result = departmentMapper.deleteDepartment(5);         System.out.println(result);         session.commit();                   // note: commits     } }</code></pre></li></ol><h2 id="header-18">ParameterHandler</h2><h3 id="header-19">Parameters</h3><ul><li><p>单个参数(mybatis一般不做特殊处理)</p><pre><code class="lang-xml">  &lt;!-- 传入基础类型Integer: public Department getDepartment(Integer id);  --&gt;  &lt;select id=&quot;getDepartment&quot; resultType=&quot;com.cj.mybatis.entity.Department&quot;&gt;      select * from pe_department where id = #{id}  &lt;/select&gt;  &lt;!-- 传入POJO : public List&lt;Department&gt; listByExample(Department department); --&gt;  &lt;select id=&quot;listByExample&quot; resultType=&quot;com.cj.mybatis.entity.Department&quot;&gt;      select * from pe_department where name like #{name} or remark like #{remark}  &lt;/select&gt;  &lt;!-- 传入Map : public List&lt;Department&gt; listByMap(Map params);  --&gt;  &lt;select id=&quot;listByMap&quot; resultType=&quot;com.cj.mybatis.entity.Department&quot;&gt;      select * from pe_department where name like #{name} or remark like #{remark}  &lt;/select&gt;  &lt;!--       传入Collection/List/Set/List/Array : 会做特殊处理（封装到Map中）          Collection  =&gt; Map&lt;collection,Object&gt;          List        =&gt; Map&lt;list,Object&gt;          Set         =&gt; Map&lt;set,Object&gt;          Array       =&gt; Map&lt;array,Object&gt;      public List&lt;Department&gt; listByIds(List&lt;Integer&gt; ids);  --&gt;  &lt;select id=&quot;listByIds&quot; resultType=&quot;com.cj.mybatis.entity.Department&quot;&gt;      select * from pe_department where id in (#{list[0]})  &lt;/select&gt;</code></pre></li><li><p>多个参数(mybatis会做特殊处理) =&gt; 会被封装成一个<code>Map&lt;String,Object&gt;</code> (key: param1,..,paramN),<code>#{}</code>即从map中取值</p><pre><code class="lang-xml">  &lt;!--      public List&lt;Department&gt; listByParams1(String name,String remark);      =&gt; available parameters are [arg0,arg1,param1,param2]  --&gt;  &lt;select id=&quot;listByParams1&quot; resultType=&quot;com.cj.mybatis.entity.Department&quot;&gt;      &lt;!-- select * from pe_department where name like #{arg0} or remark like #{arg1} --&gt;      select * from pe_department where name like #{param1} or remark like #{param2}  &lt;/select&gt;  &lt;!--        使用@Param注解命名参数     public List&lt;Department&gt; listByParams2(@Param(&quot;name&quot;)String name,@Param(&quot;remark&quot;)String remark);      =&gt; available parameters are [name,remark,param1,param2]  --&gt;  &lt;select id=&quot;listByParams2&quot; resultType=&quot;com.cj.mybatis.entity.Department&quot;&gt;      &lt;!-- select * from pe_department where name like #{param1} or remark like #{param2} --&gt;      select * from pe_department where name like #{name} or remark like #{remark}  &lt;/select&gt;</code></pre></li></ul><h3 id="header-20"><code>#{}</code>,<code>${}</code></h3><ul><li><p><code>#{}</code> vs <code>${}</code></p><pre><code class="lang-xml">  &lt;!--       ${} : 直接拼接到sql语句中      =&gt; select * from pe_department where id = 2   --&gt;  &lt;select id=&quot;getDepartment&quot; resultType=&quot;com.cj.mybatis.entity.Department&quot;&gt;      select * from pe_department where id = ${id}      &lt;!-- 更多应用场景（在sql中不支持占位符的地方使用）：           select * from ${year}_salary          select * from pe_employee order by ${orderColumn}      --&gt;  &lt;/select&gt;  &lt;!--       #{} : 预编译模式注入参数（PreparedStatement 占位符)，防止sql注入      =&gt; select * from pe_department where id = ?   --&gt;  &lt;select id=&quot;getDepartment&quot; resultType=&quot;com.cj.mybatis.entity.Department&quot;&gt;      select * from pe_department where id = #{id}  &lt;/select&gt;</code></pre></li><li><p><code>#{}</code>中可设置参数规则</p><ul><li><code>javaType</code> 指定参数类型（通常可根据参数对象自动确定）</li><li><code>jdbcType</code> (eg: <code>#{remark,jdbcType=NULL}</code>)</li><li><code>mode</code></li><li><code>numericScale</code></li><li><code>resultMap</code></li><li><code>typeHandler</code></li><li><code>jdbcTypeName</code></li><li><code>expression</code></li></ul></li></ul><h2 id="header-21">ResultSetHandler</h2><h3 id="header-22">resultType</h3><p><strong>Sample: DepartmentMapper.xml</strong></p><ol><li><p>get single result</p><pre><code class="lang-xml"> &lt;!--      public Department getDepartment(Integer id);      resultType: Department --&gt; &lt;select id=&quot;getDepartment&quot; resultType=&quot;com.cj.mybatis.entity.Department&quot;&gt;     select * from pe_department where id = #{id} &lt;/select&gt; &lt;!--      public Map&lt;String,Object&gt; getDepartmentMap(Integer id);      =&gt; resultType: map --&gt; &lt;select id=&quot;getDepartmentMap&quot; resultType=&quot;map&quot;&gt;     select * from pe_department where id = #{id} &lt;/select&gt;</code></pre><pre><code class="lang-java"> @Test public void testReturnSingle() throws IOException {     SqlSessionFactory factory = getSqlSessionFactory();     try(SqlSession session=factory.openSession()){         DepartmentMapper departmentMapper = session.getMapper(DepartmentMapper.class);         // return POJO (set resultType=&quot;com.cj.mybatis.entity.Department&quot;)         System.out.println(&quot;------------getDepartment------------&quot;);         Department dept = departmentMapper.getDepartment(1);         System.out.println(dept);         // return Map (set resultType=&quot;map&quot;)         System.out.println(&quot;------------getDepartmentMap------------&quot;);         Map&lt;String,Object&gt; deptMap = departmentMapper.getDepartmentMap(1);         System.out.println(deptMap);     } }</code></pre></li><li><p>get multiple results</p><pre><code class="lang-xml"> &lt;!--      public List&lt;Department&gt; listDepartment();     =&gt; resultType : Department (集合类则指定集合中的元素类型)  --&gt; &lt;select id=&quot;listDepartment&quot; resultType=&quot;com.cj.mybatis.entity.Department&quot;&gt;     select * from pe_department &lt;/select&gt; &lt;!--     @MapKey(&quot;id&quot;)  // 将结果集封装成Map    public Map&lt;Integer,Department&gt; listAndReturnMap();     =&gt; resultType : Department (集合类则指定集合中的元素类型)  --&gt; &lt;select id=&quot;listDepartmentMap&quot; resultType=&quot;com.cj.mybatis.entity.Department&quot;&gt;     select * from pe_department; &lt;/select&gt;</code></pre><pre><code class="lang-java"> @Test public void testReturnMultiple() throws IOException {     SqlSessionFactory factory = getSqlSessionFactory();     try(SqlSession session=factory.openSession()){         DepartmentMapper departmentMapper = session.getMapper(DepartmentMapper.class);         // return List&lt;Department&gt; (set resultType=&quot;com.cj.mybatis.entity.Department&quot;)         System.out.println(&quot;------------listDepartment------------&quot;);         List&lt;Department&gt; list = departmentMapper.listDepartment();         System.out.println(list);         // return Map&lt;Integer,Department&gt; (set resultType=&quot;com.cj.mybatis.entity.Department&quot;)         // + @MapKey(&quot;&quot;) 注解 =&gt; 将结果集封装成Map         System.out.println(&quot;------------listDepartmentMap------------&quot;);         Map&lt;Integer,Department&gt; map = departmentMapper.listDepartmentMap();         System.out.println(map);     } }</code></pre></li></ol><h3 id="header-23">resultMap</h3><p>自定义resultMap,实现高级结果集映射</p><p><code>&lt;resultMap&gt;</code></p><ul><li>properties: <ul><li><code>id</code>: 唯一标识</li><li><code>type</code>: javaBean</li></ul></li><li>children:<ul><li><code>&lt;id column=&quot;&quot; property=&quot;&quot;/&gt;</code> 定义主键列映射规则，有利底层优化 (<code>column</code>:列名，<code>property</code>:javaBean属性名)</li><li><code>&lt;result column=&quot;&quot; property=&quot;&quot;/&gt;</code> 定义其他普通列映射规则</li><li><code>&lt;association&gt;</code> 定义关联单个对象的映射规则<ul><li><code>&lt;association property=&quot;&quot; javaType=&quot;&quot; autoMapping=&quot;&quot; columnPrefix=&quot;&quot; /&gt;</code> </li><li><code>&lt;association property=&quot;&quot; select=&quot;&quot; column=&quot;&quot; fetchType=&quot;&quot; autoMapping=&quot;&quot; columnPrefix=&quot;&quot; /&gt;</code> 分段查询</li></ul></li><li><code>&lt;collection&gt;</code> 定义关联多个对象的映射规则<ul><li><code>&lt;collection property=&quot;&quot; ofType=&quot;&quot; autoMapping=&quot;&quot; columnPrefix=&quot;&quot; /&gt;</code> (<code>ofType</code> 指定集合里面的元素类型)</li><li><code>&lt;collection property=&quot;&quot; select=&quot;&quot; column=&quot;&quot; fetchType=&quot;&quot; autoMapping=&quot;&quot; columnPrefix=&quot;&quot; /&gt;</code> 分段查询</li></ul></li><li>注分段查询中： <ul><li><code>select</code> 指定当前属性通过调用哪个方法获取</li><li><code>column</code> 指定将那几个列值传递给这个方法作为参数（单列：<code>column=&quot;xxx&quot;</code>; 多列: <code>column={key=column1,key=column2}</code>）</li><li><code>fetchType</code>: eager/lazy</li><li>即使用<code>select</code>指定的方法（传入<code>column</code>指定的列参数值）查出结果，封装给<code>property</code>指定的javaBean属性</li></ul></li></ul></li></ul><h3 id="header-24">resultMap:association</h3><p>OneToOne</p><p><strong>Sample:EmployeeWithDepartmentMapper.xml</strong></p><ol><li>Pojo: EmployeeWithDepartment<pre><code class="lang-java"> @Data public class EmployeeWithDepartment {     private Integer id;     private String name;     private String remark;     private Department department; }</code></pre></li><li><p>mapper: EmployeeWithDepartmentMapper.xml</p><pre><code class="lang-xml"> &lt;mapper namespace=&quot;com.cj.mybatis.mapper.EmployeeWithDepartmentMapper&quot;&gt;    &lt;!-- &lt;resultMap type=&quot;com.cj.mybatis.entity.EmployeeWithDepartment&quot; id=&quot;EmpWithDeptMap&quot;&gt;     &lt;id column=&quot;id&quot; property=&quot;id&quot;/&gt;     &lt;result column=&quot;name&quot; property=&quot;name&quot;/&gt;     &lt;result column=&quot;remark&quot; property=&quot;remark&quot;/&gt;     &lt;association property=&quot;department&quot; javaType=&quot;com.cj.mybatis.entity.Department&quot; &gt;         &lt;id column=&quot;dept_id&quot; property=&quot;id&quot;/&gt;         &lt;result column=&quot;dept_name&quot; property=&quot;name&quot;/&gt;         &lt;result column=&quot;dept_remark&quot; property=&quot;remark&quot; /&gt;     &lt;/association&gt;   &lt;/resultMap&gt; --&gt;   &lt;resultMap id=&quot;EmpWithDeptMap&quot; type=&quot;com.cj.mybatis.entity.EmployeeWithDepartment&quot; autoMapping=&quot;true&quot;&gt;     &lt;association property=&quot;department&quot;          javaType=&quot;com.cj.mybatis.entity.Department&quot;          columnPrefix=&quot;dept_&quot;          autoMapping=&quot;true&quot; /&gt;   &lt;/resultMap&gt;   &lt;select id=&quot;getEmployee&quot; resultMap=&quot;EmpWithDeptMap&quot;&gt;     select          a.id id,a.name name,a.remark remark,         b.id dept_id,b.name dept_name,b.remark dept_remark     from pe_employee a left join pe_department b on a.department_id=b.id where a.id = #{id}   &lt;/select&gt;   &lt;resultMap type=&quot;com.cj.mybatis.entity.EmployeeWithDepartment&quot; id=&quot;EmpWithDeptLazyMap&quot;&gt;     &lt;id column=&quot;id&quot; property=&quot;id&quot;/&gt;     &lt;result column=&quot;name&quot; property=&quot;name&quot;/&gt;     &lt;result column=&quot;remark&quot; property=&quot;remark&quot;/&gt;     &lt;association property=&quot;department&quot;          select=&quot;com.cj.mybatis.mapper.DepartmentMapper.getDepartment&quot;          column=&quot;department_id&quot;         fetchType=&quot;lazy&quot;&gt;     &lt;/association&gt;   &lt;/resultMap&gt;   &lt;select id=&quot;getEmployeeLazy&quot; resultMap=&quot;EmpWithDeptLazyMap&quot;&gt;     select * from pe_employee where id = #{id}   &lt;/select&gt; &lt;/mapper&gt;</code></pre></li><li><p>test</p><pre><code class="lang-java"> @Test public void testEmployeeWithDepartment() throws IOException {     SqlSessionFactory factory = getSqlSessionFactory();     try(SqlSession session=factory.openSession()){         EmployeeWithDepartmentMapper edMapper = session.getMapper(EmployeeWithDepartmentMapper.class);         System.out.println(&quot;------------getEmployee------------&quot;);         EmployeeWithDepartment emp = edMapper.getEmployee(1);         System.out.println(emp);         System.out.println(&quot;------------getEmployeeLazy------------&quot;);         emp = edMapper.getEmployeeLazy(1);         System.out.println(emp.getName());         System.out.println(emp.getDepartment());         System.out.println(emp);     } }</code></pre></li><li>result<pre><code class="lang-sql"> ------------getEmployee------------ [QC] DEBUG BaseJdbcLogger.debug | ==&gt;  Preparing: select a.id id,a.name name,a.remark remark, b.id dept_id,b.name dept_name,b.remark dept_remark from pe_employee a left join pe_department b on a.department_id=b.id where a.id = ?  [QC] DEBUG BaseJdbcLogger.debug | ==&gt; Parameters: 1(Integer) [QC] DEBUG BaseJdbcLogger.debug | &lt;==      Total: 1 EmployeeWithDepartment [id=1, name=Test1, remark=This is Test1, department=Department [id=1, name=Dep-A, remark=This is Department A]] ------------getEmployeeLazy------------ [QC] DEBUG BaseJdbcLogger.debug | ==&gt;  Preparing: select * from pe_employee where id = ?  [QC] DEBUG BaseJdbcLogger.debug | ==&gt; Parameters: 1(Integer) [QC] DEBUG BaseJdbcLogger.debug | &lt;==      Total: 1 Test1 [QC] DEBUG BaseJdbcLogger.debug | ==&gt;  Preparing: select * from pe_department where id = ?  [QC] DEBUG BaseJdbcLogger.debug | ==&gt; Parameters: 1(Integer) [QC] DEBUG BaseJdbcLogger.debug | &lt;==      Total: 1 Department [id=1, name=Dep-A, remark=This is Department A] EmployeeWithDepartment [id=1, name=Test1, remark=This is Test1, department=Department [id=1, name=Dep-A, remark=This is Department A]]</code></pre></li></ol><h3 id="header-25">resultMap: collection</h3><p>OneToMany</p><p><strong>Sample:DepartmentWithEmployeeMapper.xml</strong></p><ol><li>Pojo: DepartmentWithEmployees<pre><code class="lang-java"> @Data public class DepartmentWithEmployees {     private Integer id;     private String name;     private String remark;      private List&lt;Employee&gt; employees; }</code></pre></li><li><p>mapper: DepartmentWithEmployees.xml</p><pre><code class="lang-xml"> &lt;mapper namespace=&quot;com.cj.mybatis.mapper.DepartmentWithEmployeesMapper&quot;&gt;    &lt;!-- &lt;resultMap type=&quot;com.cj.mybatis.entity.DepartmentWithEmployees&quot; id=&quot;DeptWithEmpsMap&quot;&gt;     &lt;id column=&quot;id&quot; property=&quot;id&quot;/&gt;     &lt;result column=&quot;name&quot; property=&quot;name&quot;/&gt;     &lt;result column=&quot;remark&quot; property=&quot;remark&quot;/&gt;     &lt;collection property=&quot;employees&quot; ofType=&quot;com.cj.mybatis.entity.Employee&quot;&gt;         &lt;id column=&quot;emp_id&quot; property=&quot;id&quot;/&gt;         &lt;result column=&quot;emp_name&quot; property=&quot;name&quot;/&gt;         &lt;result column=&quot;emp_remark&quot; property=&quot;remark&quot; /&gt;         &lt;result column=&quot;emp_deptartment_id&quot; property=&quot;departmentId&quot; /&gt;     &lt;/collection&gt;   &lt;/resultMap&gt; --&gt;   &lt;resultMap type=&quot;com.cj.mybatis.entity.DepartmentWithEmployees&quot;      id=&quot;DeptWithEmpsMap&quot; autoMapping=&quot;true&quot;&gt;     &lt;id column=&quot;id&quot; property=&quot;id&quot;/&gt; &lt;!-- must set! --&gt;     &lt;collection property=&quot;employees&quot; ofType=&quot;com.cj.mybatis.entity.Employee&quot;          columnPrefix=&quot;emp_&quot; autoMapping=&quot;true&quot;&gt;     &lt;/collection&gt;   &lt;/resultMap&gt;   &lt;select id=&quot;getDepartment&quot; resultMap=&quot;DeptWithEmpsMap&quot;&gt;     select         a.id id,a.name name,a.remark remark,         b.id emp_id,b.name emp_name,b.remark emp_remark,b.department_id emp_department_id     from pe_department a      left join pe_employee b on a.id=b.department_id      where a.id=#{id}   &lt;/select&gt;   &lt;resultMap type=&quot;com.cj.mybatis.entity.DepartmentWithEmployees&quot; id=&quot;DeptWithEmpsLazyMap&quot;&gt;     &lt;id column=&quot;id&quot; property=&quot;id&quot;/&gt;     &lt;result column=&quot;name&quot; property=&quot;name&quot;/&gt;     &lt;result column=&quot;remark&quot; property=&quot;remark&quot;/&gt;     &lt;collection property=&quot;employees&quot;          select=&quot;com.cj.mybatis.mapper.EmployeeMapper.listEmployeesByDept&quot;         column=&quot;id&quot; fetchType=&quot;lazy&quot;&gt;     &lt;/collection&gt;   &lt;/resultMap&gt;   &lt;select id=&quot;getDepartmentLazy&quot; resultMap=&quot;DeptWithEmpsLazyMap&quot;&gt;     select * from pe_department where id = #{id}   &lt;/select&gt; &lt;/mapper&gt;</code></pre></li><li><p>test</p><pre><code class="lang-java"> @Test public void testDepartmentWithEmployees() throws IOException {     SqlSessionFactory factory = getSqlSessionFactory();     try(SqlSession session=factory.openSession()){         DepartmentWithEmployeesMapper deMapper = session.getMapper(DepartmentWithEmployeesMapper.class);         System.out.println(&quot;------------getDepartment------------&quot;);         DepartmentWithEmployees dept = deMapper.getDepartment(1);         System.out.println(dept);         System.out.println(&quot;------------getDepartmentLazy------------&quot;);         dept = deMapper.getDepartmentLazy(1);         System.out.println(dept.getName());         System.out.println(dept.getEmployees());     } }</code></pre></li><li>result<pre><code class="lang-sql"> ------------getDepartment------------ [QC] DEBUG BaseJdbcLogger.debug | ==&gt;  Preparing: select a.id id,a.name name,a.remark remark, b.id emp_id,b.name emp_name,b.remark emp_remark,b.department_id emp_department_id from pe_department a left join pe_employee b on a.id=b.department_id where a.id=?  [QC] DEBUG BaseJdbcLogger.debug | ==&gt; Parameters: 1(Integer) [QC] DEBUG BaseJdbcLogger.debug | &lt;==      Total: 3 DepartmentWithEmployees [id=1, name=Dep-A, remark=This is Department A, employees=[Employee [id=1, name=Test1, remark=This is Test1, departmentId=1], Employee [id=2, name=Test2, remark=This is Test2, departmentId=1], Employee [id=3, name=Test3, remark=This is Test3, departmentId=1]]] ------------getDepartmentLazy------------ [QC] DEBUG BaseJdbcLogger.debug | ==&gt;  Preparing: select * from pe_department where id = ?  [QC] DEBUG BaseJdbcLogger.debug | ==&gt; Parameters: 1(Integer) [QC] DEBUG BaseJdbcLogger.debug | &lt;==      Total: 1 Dep-A [QC] DEBUG BaseJdbcLogger.debug | ==&gt;  Preparing: select * from pe_employee where department_id=?  [QC] DEBUG BaseJdbcLogger.debug | ==&gt; Parameters: 1(Integer) [QC] DEBUG BaseJdbcLogger.debug | &lt;==      Total: 3 [Employee [id=1, name=Test1, remark=This is Test1, departmentId=1], Employee [id=2, name=Test2, remark=This is Test2, departmentId=1], Employee [id=3, name=Test3, remark=This is Test3, departmentId=1]]</code></pre></li></ol><h3 id="header-26">resultMap: discriminator</h3><ol><li>Pojo<pre><code class="lang-java"> @Data public class UserRole {     private Integer id;     private Integer userId;     private String userType;     private String roleName; }</code></pre></li><li><p>mapper: UserRoleMapper.xml</p><pre><code class="lang-xml"> &lt;mapper namespace=&quot;com.cj.mybatis.mapper.UserRoleMapper&quot;&gt;   &lt;select id=&quot;listUserRoles&quot; resultType=&quot;UserRole&quot;&gt;     select * from pe_role   &lt;/select&gt;   &lt;resultMap id=&quot;userRoleMap&quot; type=&quot;com.cj.mybatis.entity.UserRole&quot;&gt;     &lt;id column=&quot;id&quot; property=&quot;id&quot;/&gt;     &lt;result column=&quot;role_name&quot; property=&quot;roleName&quot; /&gt;     &lt;result column=&quot;user_id&quot; property=&quot;userId&quot; /&gt;     &lt;result column=&quot;user_type&quot; property=&quot;userType&quot; /&gt;     &lt;discriminator javaType=&quot;string&quot; column=&quot;user_type&quot;&gt;         &lt;case value=&quot;Employee&quot;&gt;             &lt;result column=&quot;emp_name&quot; property=&quot;name&quot; /&gt;             &lt;result column=&quot;emp_remark&quot; property=&quot;remark&quot; /&gt;         &lt;/case&gt;         &lt;case value=&quot;Department&quot;&gt;             &lt;result column=&quot;dept_name&quot; property=&quot;name&quot; /&gt;             &lt;result column=&quot;dept_remark&quot; property=&quot;remark&quot; /&gt;         &lt;/case&gt;     &lt;/discriminator&gt;   &lt;/resultMap&gt;   &lt;select id=&quot;listUserRoleWithDetails&quot; resultMap=&quot;userRoleMap&quot;&gt;     select          a.id id,a.role_name role_name,a.user_id user_id,a.user_type user_type,         b.id emp_id,b.name emp_name,b.remark emp_remark,b.department_id emp_dept_id,         c.id dept_id,c.name dept_name,c.remark dept_remark      from pe_role a      left join pe_employee b on a.user_id=b.id and a.user_type=&#39;Employee&#39;     left join pe_department c on a.user_id=c.id and a.user_type=&#39;Department&#39;;   &lt;/select&gt; &lt;/mapper&gt;</code></pre></li><li><p>test</p><pre><code class="lang-java"> @Test public void testUserRole() throws IOException {     SqlSessionFactory factory = getSqlSessionFactory();     try(SqlSession session=factory.openSession()){         UserRoleMapper urMapper = session.getMapper(UserRoleMapper.class);         System.out.println(&quot;------------listUserRole------------&quot;);         List&lt;UserRole&gt;  list = urMapper.listUserRoles();         System.out.println(list);         System.out.println(&quot;------------listUserRoleWithDetails------------&quot;);         list = urMapper.listUserRoleWithDetails();         for(UserRole ur : list) {             System.out.println(ur);         }     } }</code></pre></li><li>result<pre><code class="lang-sql"> ------------listUserRole------------ [QC] DEBUG BaseJdbcLogger.debug | ==&gt;  Preparing: select * from pe_role  [QC] DEBUG BaseJdbcLogger.debug | ==&gt; Parameters:  [QC] DEBUG BaseJdbcLogger.debug | &lt;==      Total: 6 [UserRole [id=1, userId=1, userType=Employee, roleName=manager, name=null, remark=null], UserRole [id=2, userId=2, userType=Employee, roleName=leader, name=null, remark=null], UserRole [id=3, userId=3, userType=Employee, roleName=temporary, name=null, remark=null], UserRole [id=4, userId=1, userType=Department, roleName=IT-01, name=null, remark=null], UserRole [id=5, userId=2, userType=Department, roleName=IT-02, name=null, remark=null], UserRole [id=6, userId=3, userType=Department, roleName=Finance-01, name=null, remark=null]] ------------listUserRoleWithDetails------------ [QC] DEBUG BaseJdbcLogger.debug | ==&gt;  Preparing: select a.id id,a.role_name role_name,a.user_id user_id,a.user_type user_type, b.id emp_id,b.name emp_name,b.remark emp_remark,b.department_id emp_dept_id, c.id dept_id,c.name dept_name,c.remark dept_remark from pe_role a left join pe_employee b on a.user_id=b.id and a.user_type=&#39;Employee&#39; left join pe_department c on a.user_id=c.id and a.user_type=&#39;Department&#39;;  [QC] DEBUG BaseJdbcLogger.debug | ==&gt; Parameters:  [QC] DEBUG BaseJdbcLogger.debug | &lt;==      Total: 6 UserRole [id=1, userId=1, userType=Employee, roleName=manager, name=Test1, remark=This is Test1] UserRole [id=2, userId=2, userType=Employee, roleName=leader, name=Test2, remark=This is Test2] UserRole [id=3, userId=3, userType=Employee, roleName=temporary, name=Test3, remark=This is Test3] UserRole [id=4, userId=1, userType=Department, roleName=IT-01, name=Dep-A, remark=This is Department A] UserRole [id=5, userId=2, userType=Department, roleName=IT-02, name=Dep-B, remark=This is Department B] UserRole [id=6, userId=3, userType=Department, roleName=Finance-01, name=Dep-C, remark=This is Department C]</code></pre></li></ol><h2 id="header-27">TypeHandler</h2><p><a href="https://www.iteye.com/blog/elim-1847854" target="_blank" rel="noopener">Mybatis类型转换介绍</a></p><p>在整个过程中，进行数据库类型和JavaBean类型的映射 (Table column =&gt; JavaBean property)</p><ul><li>DefaultParameterHandler typeHandler.setParameter(ps,i+1,value,jdbcType);</li><li>DefaultResultSetHandler typeHandler.getResult(rs,column);</li></ul><h3 id="header-28">配置</h3><ul><li><p>Method 1: 全局配置(mybatis-config.xml) =&gt; 配置<code>&lt;typeHandlers&gt;</code>,<code>&lt;typeHandler&gt;</code></p><pre><code class="lang-xml">  &lt;typeHandlers&gt;      &lt;typeHandler handler=&quot;com.cj.mybatis.extend.MyEnumCodeTypeHandler&quot; javaType=&quot;com.cj.mybatis.entity.EmployeeStatusEnum&quot;/&gt;      &lt;typeHandler handler=&quot;org.apache.ibatis.type.EnumOrdinalTypeHandler&quot; javaType=&quot;com.cj.mybatis.entity.UserTypeEnum&quot;/&gt;  &lt;/typeHandlers&gt;</code></pre><pre><code class="lang-xml">  &lt;!-- then in XxxMapper.xml : --&gt;  &lt;insert id=&quot;insertOnEnumOrdinal&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot; &gt;      insert into pe_role2(role_name,user_id,user_type)      values(          #{roleName},          #{userId},          #{userType}      )  &lt;/insert&gt;  &lt;select id=&quot;listOnEnumOrdinal&quot; resultType=&quot;UserRole&quot;&gt;      select * from pe_role2  &lt;/select&gt;</code></pre></li><li><p>Method 2: 局部配置(XxxMapper.xml) =&gt; 处理某个字段时设置 eg: <code>#{status,typeHandler=xxx}</code>,<code>&lt;resultMap&gt; &lt;result column=&quot;&quot; property=&quot;&quot; typeHandler=&quot;xxx&quot;&gt;</code></p><pre><code class="lang-xml">  &lt;insert id=&quot;insertOnEnumOrdinal&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;       parameterType=&quot;com.cj.mybatis.entity.UserRole&quot;&gt; must set parameterType!      insert into pe_role2(role_name,user_id,user_type)      values(          #{roleName},          #{userId},          #{userType,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler}      )  &lt;/insert&gt;  &lt;resultMap type=&quot;com.cj.mybatis.entity.UserRole&quot; id=&quot;userRoleEnumOrdinalMap&quot;       autoMapping=&quot;true&quot;&gt;      &lt;id column=&quot;id&quot; property=&quot;id&quot;/&gt;      &lt;result column=&quot;user_type&quot; property=&quot;userType&quot;           typeHandler=&quot;org.apache.ibatis.type.EnumOrdinalTypeHandler&quot;/&gt;  &lt;/resultMap&gt;  &lt;select id=&quot;listOnEnumOrdinal&quot; resultMap=&quot;userRoleEnumOrdinalMap&quot;&gt;      select * from pe_role2  &lt;/select&gt;</code></pre></li><li><p>Method 3: 在自定义TypeHandler类上添加注解 <code>@MappedTypes(value={Xxx.class})</code> / <code>@MappedJdbcTypes(...)</code> 注册 (eg: <code>@MappedTypes({EmployeeStatusEnum.class})</code>)</p></li></ul><h3 id="header-29">处理Enum</h3><p>处理枚举对象: </p><ul><li>默认使用<code>EnumTypeHandler</code>，即操作的是枚举的名字 (=&gt; select/insert: use enum name)</li><li>可改变使用<code>EnumOrdinalTypeHandler</code>,即操作的是枚举的<code>ordinal()</code>值(eg: 0,1,2,… =&gt; select/insert: use enum ordinal ) </li></ul><h3 id="header-30">Sample: EnumTypeHandler</h3><p>=&gt; column: user_type(Employee,Department)</p><ol><li>enum<pre><code class="lang-java"> public enum UserTypeEnum {     Employee,Department }</code></pre></li><li>entity<pre><code class="lang-java"> @Data public class UserRole {     private Integer id;     private Integer userId;     private UserTypeEnum userType;     private String roleName; }</code></pre></li><li><p>mapper</p><pre><code class="lang-xml"> &lt;select id=&quot;listUserRoles&quot; resultType=&quot;UserRole&quot;&gt;     select * from pe_role &lt;/select&gt; &lt;insert id=&quot;insertUserRole&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;     insert into pe_role(role_name,user_id,user_type)     values(#{roleName},#{userId},#{userType}) &lt;/insert&gt;</code></pre></li><li><p>test</p><pre><code class="lang-java"> @Test public void testInsert() throws IOException {     SqlSessionFactory factory = getSqlSessionFactory();     try(SqlSession session=factory.openSession()){         UserRoleMapper userRoleMapper = session.getMapper(UserRoleMapper.class);         UserRole userRole=new UserRole();         userRole.setRoleName(&quot;PE-01&quot;);         userRole.setUserId(4);         userRole.setUserType(UserTypeEnum.Employee);         Integer result = userRoleMapper.insertUserRole(userRole);         System.out.println(result);         System.out.println(userRole.getId());         session.commit();     } } /*  Result Sample:  [QC] DEBUG BaseJdbcLogger.debug | ==&gt;  Preparing: insert into pe_role(role_name,user_id,user_type) values(?,?,?)   [QC] DEBUG BaseJdbcLogger.debug | ==&gt; Parameters: PE-01(String), 4(Integer), Employee(String)  [QC] DEBUG BaseJdbcLogger.debug | &lt;==    Updates: 1  1  8  */ @Test public void testList() throws IOException {     SqlSessionFactory factory = getSqlSessionFactory();     try(SqlSession session=factory.openSession()){         UserRoleMapper urMapper = session.getMapper(UserRoleMapper.class);         System.out.println(&quot;------------listUserRole------------&quot;);         List&lt;UserRole&gt;  list = urMapper.listUserRoles();         for(UserRole ur : list) {             System.out.println(ur);         }     } } /* Result Sample: ------------listUserRole------------ [QC] DEBUG BaseJdbcLogger.debug | ==&gt;  Preparing: select * from pe_role  [QC] DEBUG BaseJdbcLogger.debug | ==&gt; Parameters:  [QC] DEBUG BaseJdbcLogger.debug | &lt;==      Total: 7 UserRole [id=1, userId=1, userType=Employee, roleName=manager, name=null, remark=null] UserRole [id=2, userId=2, userType=Employee, roleName=leader, name=null, remark=null] UserRole [id=3, userId=3, userType=Employee, roleName=temporary, name=null, remark=null] UserRole [id=4, userId=1, userType=Department, roleName=IT-01, name=null, remark=null] UserRole [id=5, userId=2, userType=Department, roleName=IT-02, name=null, remark=null] UserRole [id=6, userId=3, userType=Department, roleName=Finance-01, name=null, remark=null] UserRole [id=8, userId=4, userType=Employee, roleName=PE-01, name=null, remark=null] */</code></pre></li></ol><h3 id="header-31">Sample: EnumOrdinalTypeHandler</h3><p>=&gt; column: user_type (0,1)</p><ol><li>enum<pre><code class="lang-java"> public enum UserTypeEnum {     Employee,Department }</code></pre></li><li>entity<pre><code class="lang-java"> @Data public class UserRole {     private Integer id;     private Integer userId;     private UserTypeEnum userType;     private String roleName; }</code></pre></li><li><p>mapper</p><pre><code class="lang-xml"> &lt;!-- method 1 --&gt; &lt;insert id=&quot;insertOnEnumOrdinal&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;      parameterType=&quot;com.cj.mybatis.entity.UserRole&quot;&gt; &lt;!-- must set parameterType! --&gt;     insert into pe_role2(role_name,user_id,user_type)     values(         #{roleName},         #{userId},         #{userType,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler}     )   &lt;/insert&gt; &lt;resultMap type=&quot;com.cj.mybatis.entity.UserRole&quot; id=&quot;userRoleEnumOrdinalMap&quot;      autoMapping=&quot;true&quot;&gt;     &lt;id column=&quot;id&quot; property=&quot;id&quot;/&gt;     &lt;result column=&quot;user_type&quot; property=&quot;userType&quot;          typeHandler=&quot;org.apache.ibatis.type.EnumOrdinalTypeHandler&quot;/&gt; &lt;/resultMap&gt; &lt;select id=&quot;listOnEnumOrdinal&quot; resultMap=&quot;userRoleEnumOrdinalMap&quot;&gt;     select * from pe_role2 &lt;/select&gt; &lt;!-- method 2      1. mybatis-config.xml     &lt;typeHandlers&gt;         &lt;typeHandler handler=&quot;org.apache.ibatis.type.EnumOrdinalTypeHandler&quot; javaType=&quot;com.cj.mybatis.entity.UserTypeEnum&quot;/&gt;     &lt;/typeHandlers&gt;     2. XxxMapper.xml     &lt;insert id=&quot;insertOnEnumOrdinal&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot; &gt;         insert into pe_role2(role_name,user_id,user_type)         values(             #{roleName},             #{userId},             #{userType}         )     &lt;/insert&gt;     &lt;select id=&quot;listOnEnumOrdinal&quot; resultType=&quot;UserRole&quot;&gt;         select * from pe_role2     &lt;/select&gt; --&gt;</code></pre></li><li><p>test</p><pre><code class="lang-java"> @Test public void testInsertOnEnumOrdinalTypeHandler() throws IOException {     SqlSessionFactory factory = getSqlSessionFactory();     try(SqlSession session=factory.openSession()){         UserRoleMapper userRoleMapper = session.getMapper(UserRoleMapper.class);         UserRole userRole=new UserRole();         userRole.setRoleName(&quot;PE-02&quot;);         userRole.setUserId(4);         userRole.setUserType(UserTypeEnum.Department);         Integer result = userRoleMapper.insertOnEnumOrdinal(userRole);         System.out.println(result);         System.out.println(userRole.getId());         session.commit();     } } /* [QC] DEBUG BaseJdbcLogger.debug | ==&gt;  Preparing: insert into pe_role2(role_name,user_id,user_type) values( ?, ?, ? )  [QC] DEBUG BaseJdbcLogger.debug | ==&gt; Parameters: PE-02(String), 4(Integer), 1(Integer) [QC] DEBUG BaseJdbcLogger.debug | &lt;==    Updates: 1 1 4 */ @Test public void testListOnEnumOrinalTypeHandler() throws IOException {     SqlSessionFactory factory = getSqlSessionFactory();     try(SqlSession session=factory.openSession()){         UserRoleMapper urMapper = session.getMapper(UserRoleMapper.class);         System.out.println(&quot;------------listUserRole------------&quot;);         List&lt;UserRole&gt;  list = urMapper.listOnEnumOrdinal();         for(UserRole ur : list) {             System.out.println(ur);         }     } } /*  ------------listUserRole------------ [QC] DEBUG BaseJdbcLogger.debug | ==&gt;  Preparing: select * from pe_role2  [QC] DEBUG BaseJdbcLogger.debug | ==&gt; Parameters:  [QC] DEBUG BaseJdbcLogger.debug | &lt;==      Total: 3 UserRole [id=1, userId=1, userType=Department, roleName=PE-00, name=null, remark=null] UserRole [id=3, userId=4, userType=Department, roleName=PE-01, name=null, remark=null] UserRole [id=4, userId=4, userType=Department, roleName=PE-02, name=null, remark=null] */</code></pre></li></ol><h3 id="header-32">处理Enum: 自定义TypeHandler</h3><p>=&gt; column: status(100,200,300)</p><p>步骤: </p><ul><li>实现<code>TypeHandler</code>接口或者继承<code>BaseTypeHandler</code></li><li>注册<code>TypeHandler</code>: <ul><li>method1: 使用<code>@MappedTypes</code>定义处理的java类型(使用<code>@MappedJdbcTypes</code>定义jdbcType类型)</li><li>method2: 在全局配置TypeHandler要处理的javaType</li><li>method3: 在自定义结果集标签(<code>&lt;resultMap&gt;</code>)或者参数处理(<code>@{xx,typeHandler=xxx}</code>)时声明使用自定义<code>TypeHandler</code>进行处理</li></ul></li></ul><p><strong>Sample:自定义TypeHandler处理枚举：在设置参数和取出结果集时自定义参数封装策略</strong></p><ol><li><p>enum</p><pre><code class="lang-java"> public enum EmployeeStatusEnum{     NORMAL(100,&quot;正常&quot;),CANCEL(200,&quot;注销&quot;),DELETE(300,&quot;删除&quot;);     private Integer code;     private String msg;     private EmployeeStatusEnum(Integer code,String msg) {         this.code=code;         this.msg=msg;     }     public Integer getCode() {         return code;     }     public String getMsg() {         return msg;     } }</code></pre></li><li>entity<pre><code class="lang-java"> @Data public class Employee {     private Integer id;     private String name;     private String remark;     private Integer departmentId;     private EmployeeStatusEnum status; }</code></pre></li><li><p>self defined TypeHandler: MyEnumCodeTypeHandler (实现<code>TypeHandler</code>接口，或者继承<code>BaseTypeHandler</code>)</p><pre><code class="lang-java"> public class MyEnumCodeTypeHandler extends BaseTypeHandler&lt;EmployeeStatusEnum&gt;{     private final Class&lt;EmployeeStatusEnum&gt; type;     private final Map&lt;Integer,EmployeeStatusEnum&gt; enumMap;     private final EmployeeStatusEnum[] enums;     public MyEnumCodeTypeHandler(Class&lt;EmployeeStatusEnum&gt; type) {         if (type == null) {               throw new IllegalArgumentException(&quot;Type argument cannot be null&quot;);         }         this.type = type;         this.enums = type.getEnumConstants();         if (this.enums == null) {           throw new IllegalArgumentException(type.getSimpleName() + &quot; does not represent an enum type.&quot;);         }         enumMap=new HashMap&lt;Integer,EmployeeStatusEnum&gt;();         for(EmployeeStatusEnum e:enums) {             enumMap.put(e.getCode(), e);         }     }     @Override     public void setNonNullParameter(PreparedStatement ps, int i, EmployeeStatusEnum parameter, JdbcType jdbcType) throws SQLException {         ps.setInt(i, parameter.getCode());     }     @Override     public EmployeeStatusEnum getNullableResult(ResultSet rs, String columnName) throws SQLException {         int code = rs.getInt(columnName);         if (code == 0 &amp;&amp; rs.wasNull()) {           return null;         }         return toCodeEnum(code);     }     @Override     public EmployeeStatusEnum getNullableResult(ResultSet rs, int columnIndex) throws SQLException {         int code = rs.getInt(columnIndex);         if (code == 0 &amp;&amp; rs.wasNull()) {           return null;         }         return toCodeEnum(code);     }     @Override     public EmployeeStatusEnum getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {         int code = cs.getInt(columnIndex);         if (code == 0 &amp;&amp; cs.wasNull()) {           return null;         }         return toCodeEnum(code);     }     private EmployeeStatusEnum toCodeEnum(int code) {         try {           return this.enumMap.get(code);         } catch (Exception ex) {           throw new IllegalArgumentException(&quot;Cannot convert &quot; + code + &quot; to &quot; + type.getSimpleName() + &quot; by code value.&quot;, ex);         }     } }</code></pre></li><li><p>mapper</p><pre><code class="lang-xml"> &lt;!-- Method 1 --&gt; &lt;insert id=&quot;insertEmployeeOnMyEnum&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;      parameterType=&quot;Employee&quot;&gt;  &lt;!-- must set parameterType! --&gt;     insert into pe_employee(name,remark,department_id,status)     values (#{name},#{remark},#{departmentId},#{status,typeHandler=com.cj.mybatis.extend.MyEnumCodeTypeHandler}) &lt;/insert&gt; &lt;resultMap type=&quot;Employee&quot; id=&quot;employeesOnMyEnumMap&quot; autoMapping=&quot;true&quot;&gt;     &lt;id column=&quot;id&quot; property=&quot;id&quot;/&gt;     &lt;result column=&quot;status&quot; property=&quot;status&quot;          typeHandler=&quot;com.cj.mybatis.extend.MyEnumCodeTypeHandler&quot;/&gt; &lt;/resultMap&gt; &lt;select id=&quot;listEmployeesOnMyEnum&quot; resultMap=&quot;employeesOnMyEnumMap&quot;&gt;     select * from pe_employee &lt;/select&gt; &lt;!-- Method 2      1. mybatis-config.xml         &lt;typeHandlers&gt;             &lt;typeHandler handler=&quot;com.cj.mybatis.extend.MyEnumCodeTypeHandler&quot; javaType=&quot;com.cj.mybatis.entity.EmployeeStatusEnum&quot;/&gt;         &lt;/typeHandlers&gt;     2. XxxMapper.xml         &lt;insert id=&quot;insertEmployeeOnMyEnum&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;              insert into pe_employee(name,remark,department_id,status)             values (#{name},#{remark},#{departmentId},#{status})         &lt;/insert&gt;         &lt;select id=&quot;listEmployeesOnMyEnum&quot; resultType=&quot;Employee&quot;&gt;             select * from pe_employee         &lt;/select&gt; --&gt;</code></pre></li><li><p>test</p><pre><code class="lang-java"> @Test public void testInsertOnMyEnumTypeHandler() throws Exception{     SqlSessionFactory factory = getSqlSessionFactory();     try(SqlSession session=factory.openSession()){         EmployeeMapper employeeMapper = session.getMapper(EmployeeMapper.class);         System.out.println(&quot;------------insertEmployeeOnMyEnum------------&quot;);         Employee emp = new Employee();         emp.setName(&quot;QA-02&quot;);         emp.setRemark(&quot;This is Employee QA-02&quot;);         emp.setDepartmentId(15);         emp.setStatus(EmployeeStatusEnum.CANCEL);         Integer result = employeeMapper.insertEmployeeOnMyEnum(emp);         System.out.println(result);         System.out.println(emp.getId());         session.commit();     } } /* ------------insertEmployeeOnMyEnum------------ [QC] DEBUG BaseJdbcLogger.debug | ==&gt;  Preparing: insert into pe_employee(name,remark,department_id,status) values (?,?,?,?)  [QC] DEBUG BaseJdbcLogger.debug | ==&gt; Parameters: QA-02(String), This is Employee QA-02(String), 15(Integer), 200(Integer) [QC] DEBUG BaseJdbcLogger.debug | &lt;==    Updates: 1 1 72 */ @Test public void testListOnMyEnumTypeHandler() throws Exception{     SqlSessionFactory factory = getSqlSessionFactory();     try(SqlSession session=factory.openSession()){         EmployeeMapper employeeMapper = session.getMapper(EmployeeMapper.class);         System.out.println(&quot;------------listEmployees------------&quot;);         List&lt;Employee&gt;  list = employeeMapper.listEmployeesOnMyEnum();         for(Employee ur : list) {             System.out.println(ur);         }     } } /*  ------------listEmployees------------ [QC] DEBUG BaseJdbcLogger.debug | ==&gt;  Preparing: select * from pe_employee  [QC] DEBUG BaseJdbcLogger.debug | ==&gt; Parameters:  [QC] DEBUG BaseJdbcLogger.debug | &lt;==      Total: 38 Employee [id=1, name=Test1, remark=This is Test1, depar Employee [id=68, name=Bat-19, remark=This is Employee Bat-19, departmentId=3, status=null] Employee [id=71, name=QA-01, remark=This is Employee QA-01, departmentId=15, status=NORMAL] Employee [id=72, name=QA-02, remark=This is Employee QA-02, departmentId=15, status=CANCEL] */</code></pre></li></ol><h2 id="header-33">Dynamic Sql</h2><ul><li><a href="https://mybatis.org/mybatis-3/dynamic-sql.html" target="_blank" rel="noopener">Doc</a></li><li>基于OGNL表达式简化SQL拼装</li><li><code>&lt;if&gt;</code></li><li><code>&lt;choose&gt;</code> (<code>&lt;when&gt;</code>, <code>&lt;otherwise&gt;</code>)</li><li><code>&lt;trim&gt;</code>,<code>&lt;where&gt;</code>, <code>&lt;set&gt;</code></li><li><code>&lt;foreach&gt;</code></li><li><code>&lt;bind&gt;</code>: create a variable out of an OGNL expression and bind it to the context<ul><li>configured variables for dynamic code: <code>_databaseId</code>,<code>_parameter</code></li><li><code>_databaseId</code>: 代表当前数据库的别名（depending on database vendor, 配置<code>databaseIdProvider</code>标签）</li><li><code>_parameter</code>: 代表整个参数（单个参数：<code>_parameter</code>即是这个参数；多个参数：参数会被封装成一个map，<code>_parameter</code>即代表这个map）</li></ul></li><li><code>&lt;sql&gt;</code> 可重用sql片段,<code>&lt;include&gt;</code> 引用定义的sql片段(里面可使用<code>&lt;property name=&quot;&quot; value=&quot;&quot;/&gt;</code>自定义参数和值，传给sql片段)<ul><li>注：<code>&lt;sql&gt;</code>中取<code>include</code>中<code>property</code>定义的属性，只能使用<code>${xxx}</code>,不能使用<code>#{xxx}</code></li></ul></li></ul><h3 id="header-34">OGNL</h3><p>Object Graph Navigation Language 对象图导航语言 (表达式语言，类似EL)</p><p>person.name<br>person.getName()<br>new com.cj.Persion(‘admin’).name</p><p>调用静态方法<br>@java.lang.Math@PI<br>@java.util.UUID@randomUUID()</p><p>运算符：<code>+,-,*,/,%</code><br>逻辑运算符： in,not in,<code>&gt;,&gt;=</code>,<code>&lt;,&lt;=</code>,<code>==</code>,<code>!=</code><br>注意：xml中特殊符号，如<code>&lt;</code>,<code>&gt;</code>等需要使用转义字符</p><h3 id="header-35">Sample: Dynamic Filter <code>&lt;select&gt;</code>,<code>&lt;if&gt;</code></h3><pre><code class="lang-xml">&lt;!-- Employee sample = new Employee();sample.setName(&quot;Test1&quot;);List&lt;Employee&gt; employees = employeeMapper.listEmployeesByExample(sample);--&gt;&lt;select id=&quot;listEmployeesByExample&quot; resultType=&quot;Employee&quot;&gt;    select * from pe_employee     where 1=1    &lt;if test=&quot;id!=null&quot;&gt; and id=#{id} &lt;/if&gt;    &lt;if test=&quot;name!=null&quot;&gt; and name=#{name} &lt;/if&gt;    &lt;if test=&quot;remark!=null&quot;&gt; and remark=#{remark} &lt;/if&gt;&lt;/select&gt;</code></pre><h3 id="header-36">Sample: Dynamic Update: <code>&lt;update&gt;</code>,<code>&lt;set&gt;</code>,<code>&lt;if&gt;</code></h3><pre><code class="lang-xml">&lt;!--Employee sample = new Employee();sample.setId(9);sample.setName(&quot;TestAB9&quot;);sample.setRemark(&quot;This is Employee TestAB9&quot;);Integer result= employeeMapper.updateEmployee(sample);--&gt;&lt;update id=&quot;updateEmployee&quot;&gt;    update pe_employee    &lt;set&gt;        &lt;if test=&quot;name!=null&quot;&gt;name=#{name},&lt;/if&gt;        &lt;if test=&quot;remark!=null&quot;&gt;remark=#{remark},&lt;/if&gt;        &lt;if test=&quot;departmentId!=null&quot;&gt;department_id=#{departmentId}&lt;/if&gt;    &lt;/set&gt;    where id=#{id}&lt;/update&gt;</code></pre><h3 id="header-37">Sample: <code>&lt;foreach&gt;</code></h3><pre><code class="lang-xml">&lt;!-- List&lt;Employee&gt; employees= employeeMapper.listEmployeesByDeptIds(Arrays.asList(1,3,5)); --&gt;&lt;select id=&quot;listEmployeesByDeptIds&quot; resultType=&quot;Employee&quot;&gt;    select * from pe_employee where department_id in     &lt;foreach collection=&quot;list&quot; item=&quot;deptId&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot;&gt;        #{deptId}    &lt;/foreach&gt;&lt;/select&gt;&lt;!-- 批量插入：    Mysql:         method1: insert into T(...) values (),(),...        method2:                insert into T(...) values ()                insert into T(...) values ()                ....    Oracle:        method1: insert into T(...) select ... from ...        method2:            begin                insert into T(...) values ();                insert into T(...) values ();                ...            end --&gt;&lt;!-- public Integer insertMultipleEmployees(@param(&quot;emps&quot;)List&lt;Employee&gt; emps)--&gt;&lt;insert id=&quot;insertMultipleEmployees&quot;&gt;   insert into pe_employees(name,remark,department_id) values   &lt;foreach collection=&quot;emps&quot; item=&#39;emp&#39; seperator=&quot;,&quot;&gt;       (#{emp.name},#{emp.remark},#{emp.departmentId})   &lt;/foreach&gt;&lt;/insert&gt;&lt;!--     注：这种方式数据库连接属性需加上 allowMultiQueries=true     （ jdbc:mysql://localhost:3306/demo?allowMultiQueries=true ）--&gt;&lt;!-- &lt;insert id=&quot;insertMultipleEmployees&quot;&gt;   &lt;foreach collection=&quot;emps&quot; item=&#39;emp&#39; seperator=&quot;;&quot;&gt;       insert into pe_employees(name,remark,department_id) values       (#{emp.name},#{emp.remark},#{emp.departmentId})   &lt;/foreach&gt;&lt;/insert&gt;--&gt;</code></pre><h3 id="header-38">Sample: <code>&lt;bind&gt;</code></h3><pre><code class="lang-xml">&lt;!-- List&lt;Employee&gt; employees= employeeMapper.listEmployeesByNameLike(&quot;Test&quot;); --&gt;&lt;select id=&quot;listEmployeesByNameLike&quot; resultType=&quot;Employee&quot;&gt;    &lt;bind name=&quot;namePatten&quot; value=&quot;&#39;%&#39; + name + &#39;%&#39;&quot; /&gt;    select * from pe_employee where name like #{namePatten}&lt;/select&gt;</code></pre><h3 id="header-39">Sample: <code>_parameter</code>,<code>_databaseId</code></h3><ol><li><p><code>_parameter</code></p><pre><code class="lang-xml"> &lt;!-- 单参：listByName(String name)--&gt; &lt;select id=&quot;listByName&quot; resultType=&quot;Employee&quot;&gt;     select * fro pe_employees      &lt;if test=&quot;_parameter!=null&quot;&gt;         where last_name = #{_paramter}     &lt;/if&gt; &lt;/select&gt; &lt;!-- 多参：ListBySample(Employee emp)--&gt; &lt;select id=&quot;ListBySample&quot; resultType=&quot;Employee&quot;&gt;     select * fro pe_employees      &lt;if test=&quot;_parameter!=null&quot;&gt;         where last_name = #{_paramter.lastname}     &lt;/if&gt; &lt;/select&gt;</code></pre></li><li><p><code>_databaseId</code></p><pre><code class="lang-xml"> &lt;!--  mybatis-config.xml: &lt;databaseIdProvider type=&quot;DB_VENDOR&quot;&gt;      &lt;property name=&quot;MySQL&quot; value=&quot;mysql&quot;/&gt;     &lt;property name=&quot;Oracle&quot; value=&quot;oracle&quot;/&gt;     &lt;property name=&quot;SQL Server&quot; value=&quot;sqlserver&quot;/&gt;   &lt;/databaseIdProvider&gt; --&gt; &lt;!-- XxxMapper.xml--&gt; &lt;if test=&quot;_databaseId==&#39;oracle&#39;&quot;&gt;     select seq_employee.nextval from dual;  &lt;/if&gt;</code></pre></li></ol><h3 id="header-40">Sample: <code>&lt;sql&gt;</code>,<code>&lt;include&gt;</code></h3><pre><code class="lang-xml">&lt;update id=&quot;updateEmployee&quot;&gt;    &lt;!-- update pe_employee    &lt;set&gt;        &lt;if test=&quot;name!=null&quot;&gt;name=#{name},&lt;/if&gt;        &lt;if test=&quot;remark!=null&quot;&gt;remark=#{remark},&lt;/if&gt;        &lt;if test=&quot;departmentId!=null&quot;&gt;department_id=#{departmentId}&lt;/if&gt;    &lt;/set&gt;    where id=#{id} --&gt;    update pe_employee    &lt;set&gt;        &lt;include refid=&quot;empUpdateSet&quot;/&gt;    &lt;/set&gt;    where id=#{id}&lt;/update&gt;&lt;sql id=&quot;empUpdateSet&quot;&gt;    &lt;if test=&quot;name!=null&quot;&gt;name=#{name},&lt;/if&gt;    &lt;if test=&quot;remark!=null&quot;&gt;remark=#{remark},&lt;/if&gt;    &lt;if test=&quot;departmentId!=null&quot;&gt;department_id=#{departmentId}&lt;/if&gt;&lt;/sql&gt;</code></pre><h2 id="header-41">Plugin</h2><h3 id="header-42">原理</h3><ul><li>拦截器接口<code>Interceptor</code>,插件即拦截器实现类(<code>implements Interceptor</code>)<pre><code class="lang-java">  package org.apache.ibatis.plugin;  import java.util.Properties;  public interface Interceptor {    Object intercept(Invocation invocation) throws Throwable;    default Object plugin(Object target) {      return Plugin.wrap(target, this);    }    default void setProperties(Properties properties) {      // NOP    }  }</code></pre></li><li>插件原理：<ul><li>四大对象每个创建的时候都有一个<code>interceptorChain.pluginAll(target)</code> </li><li>=&gt; 即插件介入：用拦截器们，通过动态代理机制一层层的包装目标对象，返回目标对象的代理对象，从而实现在目标对象执行目标方法之前进行拦截的效果(最终此代理对象可以拦截到四大对象的每一个执行)</li><li>eg:<code>Configuration#newParameterHandler#interceptorChain.pluginAll(parameterHandler)</code><pre><code class="lang-java">public Object pluginAll(Object target) {  for (Interceptor interceptor : interceptors) {    target = interceptor.plugin(target);  }  return target;}</code></pre></li></ul></li><li>四大对象：<ul><li>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li><li>ParameterHandler (getParameterObject, setParameters)</li><li>ResultSetHandler (handleResultSets, handleOutputParameters)</li><li>StatementHandler (prepare, parameterize, batch, update, query)</li></ul></li><li>插件会产生目标对象的代理对象，多个插件就会产生多层代理 =&gt; 创建动态代理的时候，按照插件配置顺序创建层层代理对象, 执行目标方法后，按照逆向顺序执行</li></ul><h3 id="header-43">自定义插件</h3><ul><li>编写<code>Interceptor</code>实现类</li><li>使用<code>@Intercepts({@Signature(type=Xxx.class,method=&quot;&quot;,args=[])})</code>注解完成插件签名</li><li>将写好的插件注册到全局配置文件中<code>&lt;plugins&gt;</code> -&gt; <code>&lt;plugin&gt;</code></li></ul><ol><li><p>MyFirstPlugin.java</p><pre><code class="lang-java"> @Intercepts({     @Signature(type=StatementHandler.class,method=&quot;parameterize&quot;,args=Statement.class) }) public class MyFirstPlugin implements Interceptor{     @Override     public Object intercept(Invocation invocation) throws Throwable {         System.out.println(&quot;MyFirstPlugin#intercept:&quot;+invocation.getMethod());         // test: change sql parameter value         Object target = invocation.getTarget();         // 拿到target的元数据         MetaObject metaObject = SystemMetaObject.forObject(target);         // StatementHandler -&gt; ParameterHandler -&gt; parameterObject         Object value = metaObject.getValue(&quot;parameterHandler.parameterObject&quot;);         System.out.println(&quot;Get Sql Parameter Value:&quot; + value);         metaObject.setValue(&quot;parameterHandler.parameterObject&quot;, 11);         Object proceed = invocation.proceed();         return proceed;     }     @Override     public Object plugin(Object target) {         // 使用当前Interceptor封装目标对象，返回一个新的代理对象         Object wrap = Plugin.wrap(target, this);         System.out.println(&quot;MyFirstPlugin#plugin wrap:&quot;+target);         return wrap;     }     @Override     public void setProperties(Properties properties) {         // 获取Plugin注册时（mybatis-config.xml &lt;plugins&gt; &lt;plugin&gt;）设置的property         System.out.println(&quot;MyFirstPlugin#setProperties:&quot;+properties);     } }</code></pre></li><li>mybatis-config.xml<pre><code class="lang-xml"> &lt;plugins&gt;     &lt;plugin interceptor=&quot;com.cj.mybatis.extend.MyFirstPlugin&quot;&gt;         &lt;property name=&quot;testname&quot; value=&quot;first-plugin&quot;/&gt;     &lt;/plugin&gt; &lt;/plugins&gt;</code></pre></li><li>test<pre><code class="lang-java">     @Test public void testGet() throws IOException {     SqlSessionFactory factory = getSqlSessionFactory();     try(SqlSession session=factory.openSession()){         EmployeeMapper employeeMapper = session.getMapper(EmployeeMapper.class);         Employee emp = employeeMapper.getEmployee(1);         System.out.println(emp);     } }</code></pre></li><li><p>result</p><pre><code class="lang-sql"> MyFirstPlugin#setProperties:{testname=first-plugin} MyFirstPlugin#plugin wrap:org.apache.ibatis.executor.CachingExecutor@569cfc36 MyFirstPlugin#plugin wrap:org.apache.ibatis.scripting.defaults.DefaultParameterHandler@6eceb130 MyFirstPlugin#plugin wrap:org.apache.ibatis.executor.resultset.DefaultResultSetHandler@5c072e3f MyFirstPlugin#plugin wrap:org.apache.ibatis.executor.statement.RoutingStatementHandler@954b04f [QC] DEBUG BaseJdbcLogger.debug | ==&gt;  Preparing: select * from pe_employee where id = ?  MyFirstPlugin#intercept:public abstract void org.apache.ibatis.executor.statement.StatementHandler.parameterize(java.sql.Statement) throws java.sql.SQLException Get Sql Parameter Value:1 [QC] DEBUG BaseJdbcLogger.debug | ==&gt; Parameters: 11(Integer) [QC] DEBUG BaseJdbcLogger.debug | &lt;==      Total: 1 Employee [id=11, name=Test-CC, remark=This is Employee CC, departmentId=3]</code></pre></li></ol><h3 id="header-44">多个插件</h3><ol><li>mybatis-config.xml<pre><code class="lang-xml"> &lt;plugins&gt;     &lt;plugin interceptor=&quot;com.cj.mybatis.extend.MyFirstPlugin&quot;&gt;         &lt;property name=&quot;testname&quot; value=&quot;first-plugin&quot;/&gt;     &lt;/plugin&gt;     &lt;plugin interceptor=&quot;com.cj.mybatis.extend.MySecondPlugin&quot;&gt;         &lt;property name=&quot;testname&quot; value=&quot;second-plugin&quot;/&gt;     &lt;/plugin&gt;   &lt;/plugins&gt;</code></pre></li><li>result ( First wrap,Second wrap -&gt; Target execute -&gt; Second intercept,First intercept )<pre><code class="lang-sql"> MyFirstPlugin#setProperties:{testname=first-plugin} MySecondPlugin#setProperties:{testname=second-plugin} MyFirstPlugin#plugin wrap:org.apache.ibatis.executor.CachingExecutor@569cfc36 MySecondPlugin#plugin wrap:org.apache.ibatis.executor.CachingExecutor@569cfc36 MyFirstPlugin#plugin wrap:org.apache.ibatis.scripting.defaults.DefaultParameterHandler@6eceb130 MySecondPlugin#plugin wrap:org.apache.ibatis.scripting.defaults.DefaultParameterHandler@6eceb130 MyFirstPlugin#plugin wrap:org.apache.ibatis.executor.resultset.DefaultResultSetHandler@5c072e3f MySecondPlugin#plugin wrap:org.apache.ibatis.executor.resultset.DefaultResultSetHandler@5c072e3f MyFirstPlugin#plugin wrap:org.apache.ibatis.executor.statement.RoutingStatementHandler@954b04f MySecondPlugin#plugin wrap:org.apache.ibatis.executor.statement.RoutingStatementHandler@954b04f [QC] DEBUG BaseJdbcLogger.debug | ==&gt;  Preparing: select * from pe_employee where id = ?  MySecondPlugin#intercept:public abstract void org.apache.ibatis.executor.statement.StatementHandler.parameterize(java.sql.Statement) throws java.sql.SQLException MyFirstPlugin#intercept:public abstract void org.apache.ibatis.executor.statement.StatementHandler.parameterize(java.sql.Statement) throws java.sql.SQLException [QC] DEBUG BaseJdbcLogger.debug | ==&gt; Parameters: 1(Integer) [QC] DEBUG BaseJdbcLogger.debug | &lt;==      Total: 1 Employee [id=1, name=Test1, remark=This is Test1, departmentId=1]</code></pre></li></ol><h3 id="header-45">第三方插件: PageHelper</h3><p><a href="https://pagehelper.github.io/docs/howtouse/" target="_blank" rel="noopener">Doc</a></p><ol><li>dependency<pre><code class="lang-xml"> &lt;dependency&gt;     &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;     &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;     &lt;version&gt;5.1.10&lt;/version&gt; &lt;/dependency&gt;</code></pre></li><li>mybatis-config.xml<pre><code class="lang-xml"> &lt;!-- typeAliases ... --&gt; &lt;plugins&gt;      &lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;         &lt;property name=&quot;rowBoundsWithCount&quot; value=&quot;true&quot;/&gt;     &lt;/plugin&gt; &lt;/plugins&gt; &lt;!-- environments ... --&gt;</code></pre></li><li><p>test: <code>PageHelper.startPage(pageNum,pageSize)</code></p><pre><code class="lang-java"> @Test public void testPage01() throws IOException {     SqlSessionFactory factory = getSqlSessionFactory();     try(SqlSession session=factory.openSession()){         EmployeeMapper employeeMapper = session.getMapper(EmployeeMapper.class);         System.out.println(&quot;------------listEmployees------------&quot;);         Page&lt;Object&gt; page = PageHelper.startPage(1, 4);         List&lt;Employee&gt; employees = employeeMapper.listEmployees();         for(Employee emp:employees) {             System.out.println(emp);         }         System.out.println(&quot;Current Page:\t&quot;+page.getPageNum());         System.out.println(&quot;Page Size:\t&quot;+page.getPageSize());         System.out.println(&quot;Total Pages:\t&quot;+page.getPages());         System.out.println(&quot;Total Records:\t&quot;+page.getTotal());     } }</code></pre><pre><code class="lang-sql"> ------------listEmployees------------ [QC] DEBUG BaseJdbcLogger.debug | ==&gt;  Preparing: SELECT count(0) FROM pe_employee  [QC] DEBUG BaseJdbcLogger.debug | ==&gt; Parameters:  [QC] DEBUG BaseJdbcLogger.debug | &lt;==      Total: 1 [QC] DEBUG BaseJdbcLogger.debug | ==&gt;  Preparing: select * from pe_employee LIMIT ?  [QC] DEBUG BaseJdbcLogger.debug | ==&gt; Parameters: 4(Integer) [QC] DEBUG BaseJdbcLogger.debug | &lt;==      Total: 4 Employee [id=1, name=Test1, remark=This is Test1, departmentId=1] Employee [id=2, name=Test2, remark=This is Test2, departmentId=1] Employee [id=3, name=Test3, remark=This is Test3, departmentId=1] Employee [id=4, name=Dev4, remark=This is Dev4, departmentId=2] Current Page:   1 Page Size:  4 Total Pages:    4 Total Records:  15</code></pre></li><li><p>test: <code>new PageInfo&lt;&gt;(List&lt;T&gt; list)</code></p><pre><code class="lang-java"> @Test public void testPage02() throws IOException {     SqlSessionFactory factory = getSqlSessionFactory();     try(SqlSession session=factory.openSession()){         EmployeeMapper employeeMapper = session.getMapper(EmployeeMapper.class);         System.out.println(&quot;------------listEmployees------------&quot;);         PageHelper.startPage(1, 4);         List&lt;Employee&gt; employees = employeeMapper.listEmployees();         PageInfo&lt;Employee&gt; pageInfo = new PageInfo&lt;Employee&gt;(employees);         System.out.println(&quot;Current Page:\t&quot;+pageInfo.getPageNum());         System.out.println(&quot;Page Size:\t&quot;+pageInfo.getPageSize());         System.out.println(&quot;Total Pages:\t&quot;+pageInfo.getPages());         System.out.println(&quot;Total Records:\t&quot;+pageInfo.getTotal());         System.out.print(&quot;List Nav Pages:\t&quot;);         for(int i : pageInfo.getNavigatepageNums()) {             System.out.print(i+&quot; &quot;);         }         System.out.println();         System.out.println(&quot;List Records:&quot;);         List&lt;Employee&gt; results=pageInfo.getList();         for(Employee emp : results) {             System.out.println(emp);         }         System.out.println(results);     } }</code></pre><pre><code class="lang-sql"> ------------listEmployees------------ [QC] DEBUG BaseJdbcLogger.debug | ==&gt;  Preparing: SELECT count(0) FROM pe_employee  [QC] DEBUG BaseJdbcLogger.debug | ==&gt; Parameters:  [QC] DEBUG BaseJdbcLogger.debug | &lt;==      Total: 1 [QC] DEBUG BaseJdbcLogger.debug | ==&gt;  Preparing: select * from pe_employee LIMIT ?  [QC] DEBUG BaseJdbcLogger.debug | ==&gt; Parameters: 4(Integer) [QC] DEBUG BaseJdbcLogger.debug | &lt;==      Total: 4 Current Page:   1 Page Size:  4 Total Pages:    4 Total Records:  15 List Nav Pages: 1 2 3 4  List Records: Employee [id=1, name=Test1, remark=This is Test1, departmentId=1] Employee [id=2, name=Test2, remark=This is Test2, departmentId=1] Employee [id=3, name=Test3, remark=This is Test3, departmentId=1] Employee [id=4, name=Dev4, remark=This is Dev4, departmentId=2] Page{count=true, pageNum=1, pageSize=4, startRow=0, endRow=4, total=15, pages=4, reasonable=false, pageSizeZero=false}[Employee [id=1, name=Test1, remark=This is Test1, departmentId=1], Employee [id=2, name=Test2, remark=This is Test2, departmentId=1], Employee [id=3, name=Test3, remark=This is Test3, departmentId=1], Employee [id=4, name=Dev4, remark=This is Dev4, departmentId=2]]</code></pre></li></ol><h2 id="header-46">Cache</h2><h3 id="header-47">一级缓存</h3><ul><li>本地缓存，<code>sqlSession</code>级别（默认开启，一个Map）</li><li>与数据库同一次session查询到的数据会放在本地缓存中,以后获取相同数据，会直接从缓存中取而不用再去DB查询</li><li>一级缓存失效情况（会再向DB发出查询）<ul><li>不同sqlSession</li><li>同一sqlSeesion<ul><li>查询条件不同（一级缓存中还没有这个数据）</li><li>两次查询中间执行了CUD操作（因为这次CUD可鞥会对当前数据有影响）</li><li>手动清除了一级缓存（缓存清空）</li></ul></li></ul></li></ul><h3 id="header-48">二级缓存</h3><ul><li>全局缓存，<code>namespace</code>级别（不同<code>namespace</code>查出的数据会放在自己对应的缓存中，需手动开启和配置）</li><li>一个会话中查询数据放入一级缓存，会话提交或关闭后，一级缓存中数据保存到二级缓存中，新的会话查询信息，可参照二级缓存</li><li>使用步骤：<ol><li>开启全局二级缓存配置 <code>&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</code></li><li>mapper中配置使用二级缓存 <code>&lt;cache/&gt;</code><ul><li><code>eviction</code> 缓存回收策略 LRU(最近最少使用的，默认),FIFO(先进先出),SOFT(软引用),WEAK(弱引用)</li><li><code>flushInterval</code> 缓存刷新间隔 （毫秒，多长时间清空一次，默认不清空）</li><li><code>readOnly</code> 是否只读（true则认为只读，会将数据在缓存中的引用交给用户，不安全，速度快；false则会利用序列化反序列技术克隆一份给用户，安全，速度慢）</li><li><code>size</code> 缓存存放多少元素</li><li><code>type</code> 指定自定义缓存的全类名（实现Cache接口的自定义类全名）</li></ul></li><li>POJO实现序列化接口</li></ol></li></ul><h3 id="header-49">缓存相关配置</h3><ol><li>全局二级缓存开关 <code>&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true/false&quot; /&gt;</code></li><li>mapper中<code>&lt;select&gt;</code>配置是否使用二级缓存  <code>&lt;select useCache=&quot;true/false&quot; ... &gt;</code></li><li>参照缓存：若想在命名空间中共享相同的缓存配置和实例，可使用<code>&lt;cache-ref namespace=&quot;...xxxMapper&quot; /&gt;</code>引用另一个缓存</li><li>mapper中sql标签上配置sql执行后是否清除缓存（包括一级二级）<ul><li>增删改标签上的<code>flushCache</code>默认为true</li><li>查询标签上的<code>flushCache</code>默认为false</li></ul></li><li>清除当前session的一级缓存：程序执行<code>sqlSession.clearCache()</code></li><li><code>localCacheScope</code> 本地缓存作用域 SESSION(一级缓存)/STATEMENT(禁用一级缓存)</li><li>注：<ul><li>在某一个作用域（一级缓存session/二级缓存namespace)进行了CUD后，默认该作用域下的所有select缓存将被clear</li><li>Mybatis提供了缓存接口<code>Cache</code>，供扩展实现自定义的二级缓存</li></ul></li></ol><h3 id="header-50">第三方缓存整合</h3><p>EhCache </p><ul><li>纯Java进程内缓存框架，是Hibernate中默认的CacheProvider</li><li>使用步骤：<ol><li>导入ehcache包，整合包(mybatis-echcache)，日志包</li><li>编写ehcache.xml配置文件</li><li>mapper中配置<code>&lt;cache type=&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;/&gt;</code>标签</li></ol></li></ul><h2 id="header-51">与SpringBoot整合</h2><h3 id="header-52">dependencies</h3><pre><code class="lang-xml">&lt;dependencies&gt;    &lt;!-- springboot --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;        &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;    &lt;!-- mybatis --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;        &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;        &lt;version&gt;2.1.1&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;mysql&lt;/groupId&gt;        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;scope&gt;runtime&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;        &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;        &lt;version&gt;5.1.10&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- druid --&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;        &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;        &lt;version&gt;1.1.21&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- for @ConfigurationProperties : optional ! --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;        &lt;optional&gt;true&lt;/optional&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><h3 id="header-53">druid</h3><p>Github: <a href="https://github.com/alibaba/druid" target="_blank" rel="noopener">druid</a> | <a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter" target="_blank" rel="noopener">druid-spring-boot-starter</a></p><ol><li><p>application.yml</p><pre><code class="lang-yaml"> server:   port: 8080   servlet:     context-path: /demo spring:   datasource:     druid:       url: jdbc:mysql://localhost:3306/demo?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;allowMultiQueries=true       username: root       password: 123456       driver-class-name: com.mysql.cj.jdbc.Driver #      type: com.alibaba.druid.pool.DruidDataSource       initial-size: 8       min-idle: 1       max-active: 20       max-wait: 60000       time-between-eviction-runsMillis: 60000       min-evictable-idle-timeMillis: 300000       validation-query: select &#39;x&#39;       test-while-idle: true       test-on-borrow: false       test-on-return: false       pool-prepared-statements: false       max-open-prepared-statements: 20       max-pool-prepared-statement-per-connection-size: 20       filters: stat,wall       use-global-data-source-stat: true       connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</code></pre></li><li><p>Configuration</p><pre><code class="lang-java"> @Configuration public class DruidConfig {     //doc: https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter     // inject configed druid properties     @ConfigurationProperties(prefix = &quot;spring.datasource.druid&quot;)     @Bean     public DataSource druidDataSource(){         return new DruidDataSource();     }     //配置Druid的监控     //1、配置一个管理后台的Servlet     @Bean     public ServletRegistrationBean&lt;StatViewServlet&gt; statViewServlet(){         ServletRegistrationBean&lt;StatViewServlet&gt; bean = new ServletRegistrationBean&lt;StatViewServlet&gt;(new StatViewServlet(), &quot;/druid/*&quot;);         Map&lt;String,String&gt; initParams = new HashMap&lt;&gt;();         initParams.put(&quot;loginUsername&quot;,&quot;admin&quot;);         initParams.put(&quot;loginPassword&quot;,&quot;123456&quot;);         //initParams.put(&quot;allow&quot;,&quot;&quot;);//默认就是允许所有访问         //initParams.put(&quot;deny&quot;,&quot;192.168.15.21&quot;);         bean.setInitParameters(initParams);         return bean;     }     //2、配置一个web监控的filter     @Bean     public FilterRegistrationBean&lt;WebStatFilter&gt; webStatFilter(){         FilterRegistrationBean&lt;WebStatFilter&gt; bean = new FilterRegistrationBean&lt;WebStatFilter&gt;();         bean.setFilter(new WebStatFilter());         Map&lt;String,String&gt; initParams = new HashMap&lt;&gt;();         initParams.put(&quot;exclusions&quot;,&quot;*.js,*.css,/druid/*&quot;);         bean.setInitParameters(initParams);         //bean.setUrlPatterns(Arrays.asList(&quot;/*&quot;));         return  bean;     } }</code></pre></li><li>start application,then visit: <a href="http://localhost:8080/demo/druid" target="_blank" rel="noopener">http://localhost:8080/demo/druid</a> to login</li></ol><p><img src="/2019/11/23/druid-single-monitor.PNG" alt="Druid Monitor"></p><h3 id="header-54">MyBatis(单数据源)</h3><ol><li><p>application.yml</p><pre><code class="lang-yaml"> server:   port: 8080   servlet:     context-path: /demo spring:   datasource:     druid:       url: jdbc:mysql://localhost:3306/demo?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;allowMultiQueries=true       username: root       password: 123456       driver-class-name: com.mysql.cj.jdbc.Driver       # type: com.alibaba.druid.pool.DruidDataSource       initial-size: 8       min-idle: 1       max-active: 20       max-wait: 60000       time-between-eviction-runsMillis: 60000       min-evictable-idle-timeMillis: 300000       validation-query: select &#39;x&#39;       test-while-idle: true       test-on-borrow: false       test-on-return: false       pool-prepared-statements: false       max-open-prepared-statements: 20       max-pool-prepared-statement-per-connection-size: 20       filters: stat,wall       use-global-data-source-stat: true       connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000 mybatis:   mapper-locations: classpath:mybatis/mapper/*Mapper.xml   config-location:  classpath:mybatis-config.xml</code></pre></li><li><p>Druid Configuration: DruidConfig.java</p><pre><code class="lang-java"> @Configuration public class DruidConfig {     //https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter     @ConfigurationProperties(prefix = &quot;spring.datasource.druid&quot;)     @Bean     public DataSource druidDataSource(){         return new DruidDataSource();     }     // 配置Druid的监控 &amp; 监控的Filter     // ... }</code></pre></li><li><p>Global Config: mybatis-config.xml</p><pre><code class="lang-xml"> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE configuration   PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;   &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt;   &lt;settings&gt;     &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;     &lt;!-- &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot; /&gt; --&gt;   &lt;/settings&gt;   &lt;typeAliases&gt;     &lt;package name=&quot;com.cj.mybatis.entity&quot;/&gt;    &lt;/typeAliases&gt;   &lt;plugins&gt;      &lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;         &lt;property name=&quot;rowBoundsWithCount&quot; value=&quot;true&quot;/&gt;     &lt;/plugin&gt;   &lt;/plugins&gt; &lt;/configuration&gt;</code></pre></li><li><p>XxxMapper.xml: mybatis/mapper/DepartmentMapper.xml</p><pre><code class="lang-xml"> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE mapper   PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;   &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.cj.mybatis.mapper.DepartmentMapper&quot;&gt;   &lt;select id=&quot;listAll&quot; resultType=&quot;Department&quot;&gt;     select * from pe_department   &lt;/select&gt; &lt;/mapper&gt;</code></pre></li><li><p>Dao Interface: com/cj/mybatis/mapper/DepartmentMapper.java</p><pre><code class="lang-java"> public interface DepartmentMapper {     public List&lt;Department&gt; listAll(); }</code></pre></li><li><p>Entity: com/cj/mybatis/entity/Department.java</p><pre><code class="lang-java"> @Data public class Department {       private Integer id;     private String name;     private String remark; }</code></pre></li><li><p>Service: com/cj/mybatis/service/DepartmentService.java</p><pre><code class="lang-java"> @Service public class DepartmentService {     @Autowired     private DepartmentMapper departmentMapper;     public List&lt;Department&gt; listAll(){         return this.departmentMapper.listAll();     } }</code></pre></li><li><p>Controller</p><pre><code class="lang-java"> @RestController public class DepartmentController {     @Autowired     DepartmentService departmentService;     @GetMapping(&quot;/departments&quot;)     public Object listAll() {         return ResponseUtil.ok(departmentService.listAll());     } }</code></pre></li><li><p>util/ResponseUtil.java</p><pre><code class="lang-java"> public class ResponseUtil {     private boolean success;     private Object data;     public ResponseUtil(boolean success, Object data) {         this.success = success;         this.data = data;     }     public static ResponseUtil result(boolean success,Object data) {         return new ResponseUtil(success, data);     }     public static ResponseUtil ok(Object data) {         return new ResponseUtil(true,data);     }     public static ResponseUtil fail(Object data) {         return new ResponseUtil(false,data);     }     // Getter &amp; Setter ...     // .... }</code></pre></li></ol><h3 id="header-55">MyBatis(多数据源)</h3><ol><li><p>application.yml</p><pre><code class="lang-yaml"> server:   port: 8080   servlet:     context-path: /demo spring:    datasource:       first:          url: jdbc:mysql://localhost:3306/demo?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;allowMultiQueries=true          username: root          password: 123456          driver-class-name: com.mysql.cj.jdbc.Driver          # type: com.alibaba.druid.pool.DruidDataSource          initial-size: 8          min-idle: 1          max-active: 20          max-wait: 60000          time-between-eviction-runsMillis: 60000          min-evictable-idle-timeMillis: 300000          validation-query: select &#39;x&#39; FROM DUAL          test-while-idle: true          test-on-borrow: false          test-on-return: false          pool-prepared-statements: false          max-open-prepared-statements: 20          max-pool-prepared-statement-per-connection-size: 20          filters: stat,wall          use-global-data-source-stat: true          connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000       second:          url: jdbc:mysql://localhost:3306/demo2?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;allowMultiQueries=true          username: root          password: 123456          driver-class-name: com.mysql.cj.jdbc.Driver          # type: com.alibaba.druid.pool.DruidDataSource          initial-size: 8          min-idle: 1          max-active: 20          max-wait: 60000          time-between-eviction-runsMillis: 60000          min-evictable-idle-timeMillis: 300000          validation-query: select &#39;x&#39; FROM DUAL          test-while-idle: true          test-on-borrow: false          test-on-return: false          pool-prepared-statements: false          max-open-prepared-statements: 20          max-pool-prepared-statement-per-connection-size: 20          filters: stat,wall          use-global-data-source-stat: true          connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000 # config sqlSessionFactory bean,this would be useless!          # mybatis: #   mapper-locations: classpath:mybatis/mapper/*Mapper.xml #   config-location:  classpath:mybatis-config.xml</code></pre></li><li><p>Configuration</p><pre><code class="lang-java"> @Configuration @MapperScan(basePackages=&quot;com.cj.mybatis.dao.first&quot;,sqlSessionTemplateRef=&quot;firstSqlSessionTemplate&quot;) public class FirstDruidConfig { //  @Primary     @Bean(name=&quot;firstDataSource&quot;)     @ConfigurationProperties(prefix=&quot;spring.datasource.first&quot;)     public DataSource firstDataSource() {         return DruidDataSourceBuilder.create().build();     } //  @Primary     @Bean(name=&quot;firstSqlSessionFactory&quot;)     public SqlSessionFactory firstSqlSessionFactory(@Qualifier(&quot;firstDataSource&quot;) DataSource dataSource)              throws Exception {         SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();         factoryBean.setDataSource(dataSource);         //factoryBean.setTypeAliasesPackage(&quot;com.cj.mybatis.entity&quot;);         factoryBean.setMapperLocations(new PathMatchingResourcePatternResolver()                 .getResources(&quot;classpath:mybatis/mapper/first/*Mapper.xml&quot;));         factoryBean.setConfigLocation(new PathMatchingResourcePatternResolver()                 .getResource(&quot;classpath:mybatis-config.xml&quot;));         return factoryBean.getObject();      } //  @Primary     @Bean(name=&quot;firstTransactionManager&quot;)     public DataSourceTransactionManager firstDataSourceTransactionManager(@Qualifier(&quot;firstDataSource&quot;) DataSource dataSource) {         return new DataSourceTransactionManager(dataSource);     } //  @Primary     @Bean(name=&quot;firstSqlSessionTemplate&quot;)     public SqlSessionTemplate firstSqlSessionTemplate(@Qualifier(&quot;firstSqlSessionFactory&quot;) SqlSessionFactory sqlSessionFactory)              throws Exception {         return new SqlSessionTemplate(sqlSessionFactory);     } }</code></pre><pre><code class="lang-java"> @Configuration @MapperScan(basePackages=&quot;com.cj.mybatis.dao.second&quot;,sqlSessionTemplateRef=&quot;secondSqlSessionTemplate&quot;) public class SecondDruidConfig {     @Bean(name=&quot;secondDataSource&quot;)     @ConfigurationProperties(prefix=&quot;spring.datasource.second&quot;)     public DataSource secondDataSource() {         return DruidDataSourceBuilder.create().build();     }     @Bean(name=&quot;secondSqlSessionFactory&quot;)     public SqlSessionFactory secondSqlSessionFactory(@Qualifier(&quot;secondDataSource&quot;) DataSource dataSource)              throws Exception {         SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();         factoryBean.setDataSource(dataSource);         //factoryBean.setTypeAliasesPackage(&quot;com.cj.mybatis.entity&quot;);         factoryBean.setMapperLocations(new PathMatchingResourcePatternResolver()                 .getResources(&quot;classpath:mybatis/mapper/second/*Mapper.xml&quot;));         factoryBean.setConfigLocation(new PathMatchingResourcePatternResolver()                 .getResource(&quot;classpath:mybatis-config.xml&quot;));         return factoryBean.getObject();     }     @Bean(name=&quot;secondTransactionManager&quot;)     public DataSourceTransactionManager secondDataSourceTransactionManager(@Qualifier(&quot;secondDataSource&quot;) DataSource dataSource) {         return new DataSourceTransactionManager(dataSource);     }     @Bean(name=&quot;secondSqlSessionTemplate&quot;)     public SqlSessionTemplate secondSqlSessionTemplate(@Qualifier(&quot;secondSqlSessionFactory&quot;) SqlSessionFactory sqlSessionFactory)              throws Exception {         return new SqlSessionTemplate(sqlSessionFactory);     } }</code></pre><pre><code class="lang-java"> // Druid Monitor 控制台 @Configuration public class DruidConfig {     @Bean     public ServletRegistrationBean&lt;StatViewServlet&gt; statViewServlet(){         ServletRegistrationBean&lt;StatViewServlet&gt; bean = new ServletRegistrationBean&lt;StatViewServlet&gt;(new StatViewServlet(), &quot;/druid/*&quot;);         Map&lt;String,String&gt; initParams = new HashMap&lt;&gt;();         initParams.put(&quot;loginUsername&quot;,&quot;admin&quot;);         initParams.put(&quot;loginPassword&quot;,&quot;123456&quot;);         bean.setInitParameters(initParams);         return bean;     }     @Bean     public FilterRegistrationBean&lt;WebStatFilter&gt; webStatFilter(){         FilterRegistrationBean&lt;WebStatFilter&gt; bean = new FilterRegistrationBean&lt;WebStatFilter&gt;();         bean.setFilter(new WebStatFilter());         Map&lt;String,String&gt; initParams = new HashMap&lt;&gt;();         initParams.put(&quot;exclusions&quot;,&quot;*.js,*.css,/druid/*&quot;);         bean.setInitParameters(initParams);         bean.setUrlPatterns(Arrays.asList(&quot;/*&quot;));         return  bean;     } }</code></pre></li><li><p>目录划分：</p><ul><li>resources: <ul><li><code>mybatis/mapper/first/*Mapper.xml</code></li><li><code>mybatis/mapper/second/*Mapper.xml</code></li></ul></li><li>java:<ul><li><code>com.cj.mybatis.dao.first: *Mapper.java</code></li><li><code>com.cj.mybatis.dao.second: *Mapper.java</code></li></ul></li></ul></li><li><p>Service: 注意事务时指定具体事务名<code>@Transactional(xxx)</code></p><pre><code class="lang-java"> @Service public class EmployeeService {     @Autowired     private EmployeeMapper employeeMapper;     @Transactional(&quot;firstTransactionManager&quot;)     public Integer updateEmployee(Employee emp) {         return employeeMapper.updateEmployee(emp);     } }</code></pre><pre><code class="lang-java"> @Service public class DepartmentService {     @Autowired     private DepartmentMapper departmentMapper;     @Transactional(&quot;secondTransactionManager&quot;)     public List&lt;Integer&gt; insertMultipleDepartments(int count) {         List&lt;Integer&gt; results=new ArrayList&lt;&gt;();         for(int i=0;i&lt;count;i++) {             Department dept = new Department(null,&quot;TDept-&quot;+i,&quot;This is TDept-&quot;+i);             results.add(departmentMapper.insert(dept));         }         return results;     } }</code></pre></li></ol><h2 id="header-56">高级</h2><h3 id="header-57">运行原理</h3><ol><li><code>SqlSessionFactoryBuilder#build</code> =&gt; 创建<code>SqlSessionFactory</code> （默认实现类：<code>DefaultSqlSessionFactory</code>）<ul><li><code>Configuration</code>对象，封装了所有配置文件（全局，sql映射配置文件）的详细信息</li><li>注：会解析XxxMapper.xml中增删改查标签的每一个标签每一个属性，封装成一个<code>MappedStatement</code>(一个MappedStatement就代表一个CRUD标签的详细信息)</li></ul></li><li><code>SqlSessionFactory#openSession</code>  =&gt; 创建一次连接会话<code>SqlSession</code>对象 (默认实现类:<code>DefaultSqlSession</code>)<ul><li>里面包括<code>Configuration</code>对象和根据全局配置文件中的<code>defaultExecutorType</code>创建出对应的<code>Executor</code></li></ul></li><li><code>sqlSession#getMapper</code> =&gt; 返回mapper接口对应的代理对象<code>MapperProxy</code>（<code>implements XxxMapper</code>,里面包括<code>SqlSession</code>对象）</li><li><p>使用返回的代理对象<code>MapperProxy</code>调用接口，执行配置的CRUD方法   </p><ol><li>调用<code>SqlSession</code>的CRUD（<code>Executor</code>）<br>2) 创建<code>StatementHandler</code>对象（同时也会创建出<code>ParameterHandler</code>，<code>ResultSetHandler</code>）<br>3) 调用<code>StatementHandler</code>预编译参数及设置参数值，使用<code>ParameterHandler</code>处理预编译参数<br>4) 调用<code>StatementHandler</code>的CRUD方法 =&gt; JDBC:Statement,PreparedStatement,…<br>5) 使用<code>ResultSetHandler</code>封装结果集</li></ol></li><li><p>总结(主要对象): </p><ul><li><code>Executor</code> (update,query,flushStatements,commit,rollback,getTransaction,close,isClosed) 执行sql</li><li><code>ParameterHandler</code> (getParameterObject,setParameters) 处理预编译参数</li><li><code>ResultSetHandler</code> (handleResultSet,handleOutputParameters) 处理结果集</li><li><code>StatemnetHandler</code> (prepare,parameterize,batch,update,query) 处理Sql语句预编译，设置参数等</li><li><code>TypeHandler</code> 用来在整个过程中，处理Table column =&gt; JavaBean property 映射<ul><li><code>DefaultParameterHandler typeHandler.setParameter(ps,i+1,value,jdbcType)</code>;</li><li><code>DefaultResultSetHandler typeHandler.getResult(rs,column);</code></li></ul></li><li>注： 四大对象(<code>Executor</code>,<code>ParameterHandler</code>,<code>ResultSetHandler</code>,<code>StatementHandler</code>)每个创建的时候都会执行<code>interceptorChain.pluginAll(parameterHandler)</code> 操作，执行插件拦截器</li></ul></li></ol><h3 id="header-58">存储过程</h3><ol><li><p>mysql procedure:</p><pre><code class="lang-sql"> -- 创建 delimiter $ create procedure get_page_result(     IN p_pageNum INTEGER,     IN p_pageSize INTEGER,     OUT total Integer ) begin     declare offsetNum int default 0;     if p_pageNum is null then         set p_pageNum=0;     end if;     if p_pageSize is null then         set p_pageSize=0;     end if;     set offsetNum = (p_pageNum-1) * p_pageSize;     select count(1) into total from pe_employee ;     select * from pe_employee limit offsetNum,p_pageSize; end $ -- 测试 set @total=0; call get_page_result(2,3,@total); select @total; -- 删除 drop procedure get_page_result;</code></pre></li><li><p>XxxMapper.xml</p><pre><code class="lang-xml"> &lt;!--  public List&lt;Employee&gt; getPageResult(MyPageInfo page); @Data public class MyPageInfo {     private Integer pageNum;     private Integer pageSize;     private Integer total; } --&gt; &lt;select id=&quot;getPageResult&quot; statementType=&quot;CALLABLE&quot; resultType=&quot;Employee&quot;&gt;     {call get_page_result(         #{pageNum,mode=IN},         #{pageSize,mode=IN},         #{total,mode=OUT,jdbcType=INTEGER}     )} &lt;/select&gt;</code></pre></li><li><p>test</p><pre><code class="lang-java"> @Test public void testProcedure() throws IOException {     SqlSessionFactory factory = getSqlSessionFactory();     try(SqlSession session=factory.openSession()){         EmployeeMapper employeeMapper = session.getMapper(EmployeeMapper.class);         MyPageInfo page = new MyPageInfo();         page.setPageNum(13);         page.setPageSize(3);         page.setTotal(0);         List&lt;Employee&gt; list = employeeMapper.getPageResult(page);         for(Employee emp:list) {             System.out.println(emp);         }         System.out.println(page.getTotal());     } } /* [QC] DEBUG BaseJdbcLogger.debug | ==&gt;  Preparing: {call get_page_result( ?, ?, ? )}  [QC] DEBUG BaseJdbcLogger.debug | ==&gt; Parameters: 13(Integer), 3(Integer) [QC] DEBUG BaseJdbcLogger.debug | &lt;==      Total: 3 [QC] DEBUG BaseJdbcLogger.debug | &lt;==    Updates: 0 Employee [id=71, name=QA-01, remark=This is Employee QA-01, departmentId=15, status=NORMAL] Employee [id=72, name=QA-02, remark=This is Employee QA-02, departmentId=15, status=CANCEL] Employee [id=73, name=QA-02, remark=This is Employee QA-02, departmentId=15, status=CANCEL] 43  */</code></pre></li></ol><h3 id="header-59">批量操作</h3><ul><li>非批量：预编译sql &amp; 设置参数 =&gt; 执行10000次 <code>SqlSession session=factory.openSession()</code></li><li>批量：预编译sql &amp; 设置参数 10000次 =&gt; 执行1次 <code>SqlSession session=factory.openSession(ExecutorType.BATCH)</code></li><li>注： springboot中可以注入<code>sqlSessionFactory.openSession(ExecutorType.BATCH)</code>来获取可以执行批量操作的sqlSession</li></ul><p><strong>Sample:</strong></p><pre><code class="lang-java">@SpringBootTest@RunWith(SpringJUnit4ClassRunner.class)public class BathExecutorTest {    @Autowired    private SqlSessionFactory sqlSessionFactory;    /*    EmployeeMapper.xml:    &lt;insert id=&quot;insertEmployee&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;        insert into pe_employee(name,remark,department_id) values (#{name},#{remark},#{departmentId})    &lt;/insert&gt;    */    @Test    public void testBatchExecutor() {        try(SqlSession session=sqlSessionFactory.openSession(ExecutorType.BATCH)){            EmployeeMapper employeeMapper = session.getMapper(EmployeeMapper.class);            for(int i=0;i&lt;5;i++) {                Employee emp = new Employee(null,&quot;Test-&quot;+i,&quot;This is Test-&quot;+i,3);                Integer result = employeeMapper.insertEmployee(emp);                System.out.println(result+&quot;,&quot;+emp.getId());            }            System.out.println(&quot;Done&quot;);        }    }}/*==&gt;  Preparing: insert into pe_employee(name,remark,department_id) values (?,?,?) ==&gt; Parameters: Test-0(String), This is Test-0(String), 3(Integer)-2147482646,null==&gt; Parameters: Test-1(String), This is Test-1(String), 3(Integer)-2147482646,null==&gt; Parameters: Test-2(String), This is Test-2(String), 3(Integer)-2147482646,null==&gt; Parameters: Test-3(String), This is Test-3(String), 3(Integer)-2147482646,null==&gt; Parameters: Test-4(String), This is Test-4(String), 3(Integer)-2147482646,null*/</code></pre><h2 id="header-60">More</h2><h3 id="header-61">显示sql语句</h3><ul><li>method 1: mybatis-config.xml<pre><code class="lang-xml">  &lt;settings&gt;      &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;      &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot; /&gt; &lt;!-- 控制台显示sql语句--&gt;  &lt;/settings&gt;</code></pre></li><li><p>method 2: log4j.properties</p><pre><code class="lang-properties">  log4j.rootLogger=error,Stdout  # 控制台显示sql语句  log4j.logger.com.cj.mybatis=debug  # 控制台  log4j.appender.Stdout=org.apache.log4j.ConsoleAppender  log4j.appender.Stdout.layout=org.apache.log4j.PatternLayout  log4j.appender.Stdout.layout.ConversionPattern=[QC] %p %C{1}.%M | %m%n  log4j.appender.Stdout.Target=System.err</code></pre></li><li><p>与springboot结合: application.yml</p><pre><code class="lang-yaml">  logging:    level:       root: warn       com.cj.mybatis.mapper: debug</code></pre></li></ul><h3 id="header-62">logback日志</h3><ul><li><p>application.yml</p><pre><code class="lang-yaml">  # 默认就使用logback-spring.xml，可不配置  logging:    config: classpath:logback-spring.xml</code></pre></li><li><p>logback-spring.xml</p><pre><code class="lang-xml">  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  &lt;configuration&gt;      &lt;conversionRule conversionWord=&quot;mycolor&quot; converterClass=&quot;com.cj.mybatis.util.LogColor&quot; /&gt;      &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;          &lt;layout class=&quot;ch.qos.logback.classic.PatternLayout&quot;&gt;              &lt;Pattern&gt;                  %mycolor(%msg%n)              &lt;/Pattern&gt;          &lt;/layout&gt;      &lt;/appender&gt;      &lt;!-- 显示sql语句 --&gt;      &lt;logger name=&quot;com.cj.mybatis&quot; level=&quot;DEBUG&quot; /&gt;      &lt;root level=&quot;info&quot;&gt;          &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;      &lt;/root&gt;  &lt;/configuration&gt;</code></pre></li><li><p>彩色输出(自定义实现类：com.cj.mybatis.util.LogColor.java)</p><pre><code class="lang-java">  package com.cj.mybatis.util;  import ch.qos.logback.classic.Level;  import ch.qos.logback.classic.spi.ILoggingEvent;  import ch.qos.logback.core.pattern.color.ANSIConstants;  import ch.qos.logback.core.pattern.color.ForegroundCompositeConverterBase;  public class LogColor extends ForegroundCompositeConverterBase&lt;ILoggingEvent&gt;{      @Override      protected String getForegroundColorCode(ILoggingEvent event) {          Level level = event.getLevel();          switch(level.toInt()) {              case Level.ERROR_INT:                  return ANSIConstants.RED_FG;              case Level.WARN_INT:                  return ANSIConstants.YELLOW_FG;              case Level.INFO_INT:                  return ANSIConstants.BLUE_FG;              case Level.DEBUG_INT:                  return ANSIConstants.GREEN_FG;              case Level.TRACE_INT:                  return ANSIConstants.DEFAULT_FG;              default:                  return ANSIConstants.DEFAULT_FG;          }      }  }</code></pre></li><li><p>Logger使用示例：</p><pre><code class="lang-java">  @RestControllerAdvice  public class ExceptionControllerAdvice {      private static final Logger LOGGER = LoggerFactory.getLogger(ExceptionControllerAdvice.class);      @ExceptionHandler(Throwable.class)      public ResponseUtil onException(Throwable ex,HttpServletRequest request){          LOGGER.error(&quot;url: {}, msg: {}&quot;, request.getRequestURL(), ex.getMessage());          return ResponseUtil.fail(&quot;get exception:&quot;+ex.getMessage());      }  }</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;header-1&quot;&gt;Starter&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mybatis/mybatis-3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github&lt;/a&gt; | &lt;a href=&quot;https:
      
    
    </summary>
    
    
      <category term="Java" scheme="http://sixdegree.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Python Matplotlib</title>
    <link href="http://sixdegree.github.io/2019/08/21/Python-Matplotlib.html"/>
    <id>http://sixdegree.github.io/2019/08/21/Python-Matplotlib.html</id>
    <published>2019-08-20T16:00:00.000Z</published>
    <updated>2019-08-22T05:15:39.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="header-1">Matplotlib</h2><ul><li>第三方可视化库</li><li>由各种可视化类构成,内部结构复杂,受Matlab启发 </li><li><code>matplotlib.pyplot</code>是绘制各类可视化图形的命令子库,相当于快捷方式</li></ul><p>导入使用：</p><pre><code class="lang-python">import matplotlib.pyplot as plt</code></pre><h2 id="header-2">基础绘图函数</h2><table class="table"><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">plt.plot(x,y,fmt,…)</td><td style="text-align:left">绘制一个坐标图</td></tr><tr><td style="text-align:left">plt.boxplot(data,notch,position)</td><td style="text-align:left">绘制一个箱形图</td></tr><tr><td style="text-align:left">plt.bar(left,height,width,bottom)</td><td style="text-align:left">绘制一个条形图</td></tr><tr><td style="text-align:left">plt.barh(width,bottom,left,height)</td><td style="text-align:left">绘制一个横向条形图</td></tr><tr><td style="text-align:left">plt.polar(theta, r)</td><td style="text-align:left">绘制极坐标图</td></tr><tr><td style="text-align:left">plt.pie(data, explode)</td><td style="text-align:left">绘制饼图</td></tr><tr><td style="text-align:left">plt.psd(x,NFFT=256,pad_to,Fs)</td><td style="text-align:left">绘制功率谱密度图</td></tr><tr><td style="text-align:left">plt.specgram(x,NFFT=256,pad_to,F)</td><td style="text-align:left">绘制谱图</td></tr><tr><td style="text-align:left">plt.cohere(x,y,NFFT=256,Fs)</td><td style="text-align:left">绘制X‐Y的相关性函数</td></tr><tr><td style="text-align:left">plt.scatter(x,y)</td><td style="text-align:left">绘制散点图,其中x和y长度相同</td></tr><tr><td style="text-align:left">plt.step(x,y,where)</td><td style="text-align:left">绘制步阶图</td></tr><tr><td style="text-align:left">plt.hist(x,bins,normed)</td><td style="text-align:left">绘制直方图</td></tr><tr><td style="text-align:left">plt.contour(X,Y,Z,N)</td><td style="text-align:left">绘制等值图</td></tr><tr><td style="text-align:left">plt.vlines()</td><td style="text-align:left">绘制垂直图</td></tr><tr><td style="text-align:left">plt.stem(x,y,linefmt,markerfmt)</td><td style="text-align:left">绘制柴火图</td></tr><tr><td style="text-align:left">plt.plot_date()</td><td style="text-align:left">绘制数据日期</td></tr></tbody></table><p>Note:</p><ul><li><code>plt.savefig(fname,dpi)</code> : 将输出图形存储为文件,默认PNG格式,可以通过dpi修改输出质量</li><li><code>plt.show()</code>: 显示绘图</li></ul><h2 id="header-3">plt.plot 坐标图</h2><p><code>plt.plot(x, y, format_string, **kwargs)</code></p><ul><li><code>x</code> : X轴数据,列表或数组,可选(绘制多条曲线时,各条曲线的x不能省略)</li><li><code>y</code> : Y轴数据,列表或数组</li><li><code>format_string</code>: 控制曲线的格式字符串,可选(由颜色字符、风格字符和标记字符组成)</li><li><code>**kwargs</code> : 第二组或更多(x,y,format_string)<ul><li>color : 控制颜色, color=’green’</li><li>linestyle : 线条风格, linestyle=’dashed’</li><li>marker : 标记风格, marker=’o’</li><li>markerfacecolor: 标记颜色, markerfacecolor=’blue’</li><li>markersize : 标记尺寸, markersize=20</li><li>…</li></ul></li></ul><p><strong>Sample:</strong></p><ol><li><p>准备数据</p><pre><code class="lang-python"> # data x=np.linspace(0,10,100) siny=np.sin(x) cosy=np.cos(x)</code></pre></li><li><p>绘制多条曲线</p><pre><code class="lang-python"> # method1: plt.plot(x,siny) plt.plot(x,cosy)  # method2: plt.plot(x,siny,x,cosy)</code></pre></li><li><p>曲线样式设置</p><pre><code class="lang-python"> # method1: plt.plot(x,siny,color=&quot;green&quot;) plt.plot(x,cosy,color=&quot;red&quot;,linestyle=&quot;--&quot;) # &#39;--&#39;:---- , &#39;-.&#39;:--.--.-- , &#39;:&#39;:..... , &#39;-&#39;: ___ # method2: plt.plot(x,siny,&#39;g&#39;,x,cosy,&#39;r--&#39;)</code></pre><p> <img src="/2019/08/21/sin_cos_style.png" alt="sin_cos_style"></p></li><li><p>曲线标签设置</p><pre><code class="lang-python"> plt.plot(x,siny,color=&quot;green&quot;,label=&quot;sin(x)&quot;) plt.plot(x,cosy,color=&quot;red&quot;,label=&quot;cos(x)&quot;)  plt.legend()</code></pre><p> <img src="/2019/08/21/sin_cos_legend.png" alt="sin_cos_legend"></p></li><li><p>坐标轴标签设置</p><pre><code class="lang-python"> plt.plot(x,siny) plt.plot(x,cosy) plt.xlabel(&quot;X axis&quot;) plt.ylabel(&quot;Y axis&quot;)</code></pre><p> <img src="/2019/08/21/sin_cos_xylabel.png" alt="sin_cos_xylabel"></p></li><li><p>坐标轴范围设置</p><pre><code class="lang-python"> plt.plot(x,siny,x,cosy) plt.plot(x,cosy) # method1: plt.xlim(-5,15) plt.ylim(-0.5,1.5) # method2: plt.axis([-1,12,-2,2]) # [x_s,x_e,y_s,y_e]</code></pre><p> <img src="/2019/08/21/sin_cos_axis.png" alt="sin_cos_axis"></p></li><li><p>给图加标题</p><pre><code class="lang-python"> plt.plot(x,siny,x,cosy) plt.title(&quot;Test&quot;)</code></pre></li><li><p>显示绘图</p><pre><code class="lang-python"> plt.show()</code></pre></li></ol><h2 id="header-4">plt.scatter 散点图</h2><p><strong>Sample:</strong></p><pre><code class="lang-python">x=np.linspace(0,10,100)siny=np.sin(x)cosy=np.cos(x)plt.scatter(x,siny,color=&quot;green&quot;)plt.scatter(x,cosy,color=&quot;red&quot;)plt.show()</code></pre><p><img src="/2019/08/21/sin_cos_scatter.png" alt="sin_cos_scatter"></p><pre><code class="lang-python">x1=np.random.normal(0,1,1000)x2=np.random.normal(0,1,1000)plt.scatter(x1,x2,alpha=0.3)plt.show()</code></pre><p><img src="/2019/08/21/x1_x2_scatter.png" alt="x1_x2_scatter"></p><h2 id="header-5">plt.hist 直方图</h2><pre><code class="lang-python">a=np.random.normal(100,20,size=100)plt.hist(a,40,alpha=0.3)       # 40: bin,直方个数plt.show()</code></pre><p><img src="/2019/08/21/normal_hist.png" alt="normal_hist"></p><h2 id="header-6">plt.pie 饼图</h2><pre><code class="lang-python">labels=[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;]sizes=[15,30,45,10]explode=[0,0.1,0,0]plt.pie(sizes,explode=explode,labels=labels,autopct=&quot;%1.1f%%&quot;,shadow=False,startangle=90)plt.show()</code></pre><p><img src="/2019/08/21/pie.png" alt="pie"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;header-1&quot;&gt;Matplotlib&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;第三方可视化库&lt;/li&gt;
&lt;li&gt;由各种可视化类构成,内部结构复杂,受Matlab启发 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;matplotlib.pyplot&lt;/
      
    
    </summary>
    
    
      <category term="Python" scheme="http://sixdegree.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python Numpy</title>
    <link href="http://sixdegree.github.io/2019/08/20/Python-Numpy.html"/>
    <id>http://sixdegree.github.io/2019/08/20/Python-Numpy.html</id>
    <published>2019-08-19T16:00:00.000Z</published>
    <updated>2019-10-20T08:24:43.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>ndarray数组：属性，元素类型，创建</li><li>基础操作：（维度，元素类型）变换，访问（索引，切片），合并，分割</li><li>运算操作：基本运算（作用于数组的每一个元素），线性运算（向量／矩阵 ：逆，乘）</li><li>高级：聚合函数，索引函数，Fancy Indexing(应用：统计判断，方便抽出符合条件的元素)</li><li>文件存取</li></ol><a id="more"></a><h2 id="header-1">Numpy</h2><p>NumPy是一个开源的Python科学计算基础库，包含:</p><ul><li>一个强大的N维数组对象 <code>ndarray</code></li><li>广播功能函数</li><li>整合<code>C</code>/<code>C++</code>/<code>Fortran</code>代码的工具</li><li>线性代数、傅里叶变换、随机数生成等功能</li></ul><p>导入使用：</p><pre><code class="lang-python">import numpy as np</code></pre><h2 id="header-2">N维数组对象:ndarray</h2><p><code>ndarray</code>: 数组（在程序中的别名是:<code>array</code>）</p><ul><li>一个多维数组（注：这里的维度是指数据的组织形式）：<ul><li>1维数组：1层，eg: <code>[]</code>,可用来表示一个向量</li><li>2维数组：2层，eg: <code>[[],[],...,[]]</code>,可用来表示一个矩阵</li><li>N维数组：N层数组，可用来表示多个矩阵</li></ul></li><li>由两部分构成:<ul><li>实际的数据</li><li>描述这些数据的元数据(数据维度、数据类型等)</li></ul></li><li>元素类型:<ul><li>一般要求为相同(同质)类型</li><li>也可以由非同质对象构成，此时元素类型为object，无法有效发挥NumPy优势,尽量避免使用</li></ul></li><li>vs. Python <code>list</code>列表: <ul><li><code>ndarray</code>对象采用相同的数据类型（有助于节省运算和存储空间）</li><li><code>ndarray</code>对象运算更直接高效（如：可去掉元素间运算所需的循环,使一维向量更像单个数据）</li></ul></li></ul><h3 id="header-3">ndarray对象的属性</h3><table class="table"><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>.ndim</code></td><td style="text-align:left">秩(轴数量或维度数量)</td></tr><tr><td style="text-align:left"><code>.shape</code></td><td style="text-align:left">每个维度的尺度,返回一个tuple (eg: <code>(n,)</code>,<code>(n,m)</code>,<code>(a,b,c)</code>)</td></tr><tr><td style="text-align:left"><code>.size</code></td><td style="text-align:left">元素个数(=<code>.shape</code>中<code>n*m*...</code>)</td></tr><tr><td style="text-align:left"><code>.dtype</code></td><td style="text-align:left">元素类型</td></tr><tr><td style="text-align:left"><code>.itemsize</code></td><td style="text-align:left">每个元素的大小,以字节为单位</td></tr></tbody></table><h3 id="header-4">ndarray的元素类型</h3><p>对比Python语法仅支持整数、浮点数和复数3种类型,ndarray支持更多的元素类型，因为：</p><ul><li>科学计算涉及数据较多,对存储和性能都有较高要求</li><li>对元素类型精细定义,有助于NumPy合理使用存储空间并优化性能 </li></ul><table class="table"><thead><tr><th style="text-align:left">数据类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>bool</code></td><td style="text-align:left">布尔类型,<code>True</code>或<code>False</code></td></tr><tr><td style="text-align:left"><code>intc</code></td><td style="text-align:left">与C语言中的int类型一致,一般是<code>int32</code>或<code>int64</code></td></tr><tr><td style="text-align:left"><code>intp</code></td><td style="text-align:left">用于索引的整数,与C语言中<code>ssize_t</code>一致,<code>int32</code>或<code>int64</code> </td></tr><tr><td style="text-align:left"><code>int8</code></td><td style="text-align:left">字节长度的整数,取值:<code>[‐128, 127]</code></td></tr><tr><td style="text-align:left"><code>int16</code></td><td style="text-align:left">16位长度的整数,取值:<code>[‐32768, 32767]</code></td></tr><tr><td style="text-align:left"><code>int32</code></td><td style="text-align:left">32位长度的整数,取值:<code>[‐2^31, 2^31‐1]</code></td></tr><tr><td style="text-align:left"><code>int64</code></td><td style="text-align:left">64位长度的整数,取值:<code>[‐2^63, 2^63‐1]</code></td></tr><tr><td style="text-align:left"><code>uint8</code></td><td style="text-align:left">8位无符号整数,取值:<code>[0, 255]</code></td></tr><tr><td style="text-align:left"><code>uint16</code></td><td style="text-align:left">16位无符号整数,取值:<code>[0, 65535]</code></td></tr><tr><td style="text-align:left"><code>uint32</code></td><td style="text-align:left">32位无符号整数,取值:<code>[0, 2^32‐1]</code></td></tr><tr><td style="text-align:left"><code>uint64</code></td><td style="text-align:left">64位无符号整数,取值:<code>[0, 2^64‐1]</code></td></tr><tr><td style="text-align:left"><code>float16</code></td><td style="text-align:left">16位半精度浮点数:1位符号位,5位指数,10位尾数</td></tr><tr><td style="text-align:left"><code>float32</code></td><td style="text-align:left">32位半精度浮点数:1位符号位,8位指数,23位尾数</td></tr><tr><td style="text-align:left"><code>float64</code></td><td style="text-align:left">64位半精度浮点数:1位符号位,11位指数,52位尾数</td></tr><tr><td style="text-align:left"><code>complex64</code></td><td style="text-align:left">复数类型,实部和虚部都是32位浮点数</td></tr><tr><td style="text-align:left"><code>complex128</code></td><td style="text-align:left">复数类型,实部和虚部都是64位浮点数</td></tr></tbody></table><h3 id="header-5">ndarray数组的创建</h3><table class="table"><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">说明</th><th style="text-align:left">示例</th></tr></thead><tbody><tr><td style="text-align:left"><code>np.array(list/tuple,dtype=None)</code></td><td style="text-align:left">从list/tuple/array等类型创建(不指定<code>dtype</code>时,将根据数据情况自动关联一个<code>dtype</code>类型)</td><td style="text-align:left"><code>np.array([i for i in range(10)])</code></td></tr><tr><td style="text-align:left"><code>np.zeros(shape,dtype=float)</code></td><td style="text-align:left">根据<code>shape</code>生成一个全<code>0</code>数组(<code>shape</code>: int or tuple)</td><td style="text-align:left"><code>np.zeros(shape=(3,5),dtype=int)</code></td></tr><tr><td style="text-align:left"><code>np.ones(shape,dtype=float)</code></td><td style="text-align:left">根据<code>shape</code>生成一个全<code>1</code>数组(<code>shape</code>: int or tuple)</td><td style="text-align:left"><code>np.ones(shape=(3,5),dtype=int)</code></td></tr><tr><td style="text-align:left"><code>np.full(shape,fill_value,dtype=None)</code></td><td style="text-align:left">根据<code>shape</code>生成一个全是<code>fill_value</code>的数组(<code>shape</code>:int or tuple,<code>dtype</code>默认根据<code>fill_value</code>的数据类型)</td><td style="text-align:left"><code>np.full(shape=(3,5),fill_value=6</code></td></tr><tr><td style="text-align:left"><code>np.zeros_like(a,dtype=None)</code></td><td style="text-align:left">根据数组<code>a</code>的形状生成一个全<code>0</code>数组(<code>dtype</code>默认根据<code>a</code>的<code>dtype</code>)</td><td style="text-align:left"><code>np.zeros_like(a)</code></td></tr><tr><td style="text-align:left"><code>np.ones_like(a,dtype=None)</code></td><td style="text-align:left">根据数组<code>a</code>的形状生成一个全<code>1</code>数组(<code>dtype</code>默认根据<code>a</code>的<code>dtype</code>)</td><td style="text-align:left"><code>np.ones_like(a)</code></td></tr><tr><td style="text-align:left"><code>np.full_like(a,val,dtype=None)</code></td><td style="text-align:left">根据数组<code>a</code>的形状生成一个全是<code>val</code>的数组(<code>dtype</code>默认根据<code>a</code>的<code>dtype</code>)</td><td style="text-align:left"><code>np.full_like(a,0.1,dtype=float)</code></td></tr><tr><td style="text-align:left"><code>np.arange([start=0,] stop[, step=1,], dtype=None)</code></td><td style="text-align:left"><code>[start,stop-1]</code>等<code>step</code>间隔形成一维数组（类似<code>range()</code>，但可以是浮点数）</td><td style="text-align:left"><code>np.arange(0,1,0.2)</code></td></tr><tr><td style="text-align:left"><code>np.linspace(start, stop, num=50,endpoint=True,dtype=None)</code></td><td style="text-align:left"><code>[start,stop]</code>等间距提取<code>num</code>个数据形成一维数组(<code>endpoint=True</code>: 默认<code>sample</code>包括<code>stop</code>)</td><td style="text-align:left"><code>np.linspace(0,20,11)</code></td></tr><tr><td style="text-align:left"><code>np.eye(n,dtype=float)</code></td><td style="text-align:left">创建一个正方的<code>n*n</code>单位矩阵(对角线为1,其余为0)</td><td style="text-align:left"><code>np.eye(3)</code></td></tr><tr><td style="text-align:left"><code>np.random.randint([low=0,] high, size=None, dtype=&#39;l&#39;)</code></td><td style="text-align:left"><code>[low,high)</code>随机整数数组（<code>size</code>: int or tuple for output shape），默认生成一个数</td><td style="text-align:left"><code>np.random.randint(5, size=(2, 4))</code></td></tr><tr><td style="text-align:left"><code>np.random.random(size=None)</code></td><td style="text-align:left"><code>[0.0,1.0)</code>随机均匀分布的浮点数数组(<code>size</code>: int or tuple for output shape)，默认生成一个数</td><td style="text-align:left"><code>np.random.random((3, 2))</code></td></tr><tr><td style="text-align:left"><code>np.random.normal(loc=0.0, scale=1.0, size=None)</code></td><td style="text-align:left">生成符合<code>loc</code>均值,<code>scale</code>方差的随机正态分布的浮点数数组(<code>size</code>: int or tuple for output shape)，默认生成一个数</td><td style="text-align:left"><code>np.random.normal(loc=0,scale=10,size=(3,5))</code></td></tr><tr><td style="text-align:left"><code>np.random.shuffle(a)</code></td><td style="text-align:left">根据数组a的0轴进行随排列（行乱序）,改变原数组</td><td style="text-align:left"><code>np.random.shuffle(X)</code></td></tr><tr><td style="text-align:left"><code>np.random.permutation(a)</code></td><td style="text-align:left">根据数组a的0轴进行随排列（行乱序）,生成一个新数组</td><td style="text-align:left"><code>X1=np.random.permutation(X)</code></td></tr><tr><td style="text-align:left"><code>np.random.choice(a, size=None, replace=True, p=None)</code></td><td style="text-align:left">从a(一维数组或int)中以概率p抽取元素,形成size形状新数组 replace表示是否可以重用元素</td><td style="text-align:left"><code>np.random.choice(a)</code></td></tr></tbody></table><h3 id="header-6">Samples</h3><ol><li><p><code>np.array</code></p><pre><code class="lang-python"> x=np.array([i for i in range(10)])  # array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) y=np.array((1.1, 2, 3.5))           # array([1.1, 2. , 3.5]) X=np.array([ [1, 2], [3, 4] ])      # array([[1, 2],[3, 4]])</code></pre></li><li><p><code>.ndim</code>,<code>.shape</code>,<code>.size</code>,<code>.dtype</code>,<code>.itemsize</code></p><pre><code class="lang-python"> # 1, (10,), 10, dtype(&#39;int64&#39;), 8 x.ndim, x.shape, x.size, x.dtype, x.itemsize # 1, (3,), 3, dtype(&#39;float64&#39;), 8 y.ndim, y.shape, y.size, y.dtype, y.itemsize # 2, (2, 2), 4, dtype(&#39;int64&#39;), 8 X.ndim, X.shape, X.size, X.dtype, X.itemsize # 注意: a 与 b 的维度不同 a,b = np.array([1,2,3]), np.array([[1,2,3]]) # 1, (3,), 3 a.ndim,a.shape,a.size  # 2, (1, 3), 3 b.ndim,b.shape,b.size</code></pre></li><li><p><code>np.zeros</code>,<code>np.ones</code>,<code>np.full</code></p><pre><code class="lang-python"> # np.zeros(shape,dtype=float) np.zeros(5)                         # array([0., 0., 0., 0., 0.]) np.zeros(5,dtype=int)               # array([0, 0, 0, 0, 0]) np.zeros(shape=(3,2),dtype=int)     # array([[0, 0], [0, 0], [0, 0]]) # np.ones(shape,dtype=float) np.ones(5)                          # array([1., 1., 1., 1., 1.]) np.ones(5,dtype=int)                # array([1, 1, 1, 1, 1]) np.ones(shape=(3,2),dtype=int)      # array([[1, 1], [1, 1], [1, 1]]) # np.full(shape,fill_value,dtype=None) np.full(5,2)                        # array([2, 2, 2, 2, 2]) np.full((3,2),2.5)                  # array([[2.5, 2.5], [2.5, 2.5], [2.5, 2.5]])</code></pre></li><li><p><code>np.zeros_like</code>,<code>np.ones_like</code>,<code>np.full_like</code></p><pre><code class="lang-python"> X                                   # array([[1, 2], [3, 4]]) # np.zeros_like(a,dtype=None) np.zeros_like(X)                    # array([[0, 0], [0, 0]]) # np.ones_like(a,dtype=None) np.ones_like(X)                     # array([[1, 1], [1, 1]]) # np.full_like(a,val,dtype=None) np.full_like(X,2.5)                 # array([[2, 2],[2, 2]]) np.full_like(X,2.5,dtype=float)     # array([[2.5, 2.5], [2.5, 2.5]])</code></pre></li><li><p><code>np.arange</code>,<code>np.linspace</code></p><pre><code class="lang-python"> # np.arange([start=0,] stop[, step=1,], dtype=None) =&gt; [start,stop-1] np.arange(5)                        # array([0, 1, 2, 3, 4]) np.arange(0,5)                      # array([0, 1, 2, 3, 4]) np.arange(0,10,2)                   # array([0, 2, 4, 6, 8]) np.arange(0,5.0)                    # array([0., 1., 2., 3., 4.]) np.arange(0,1,0.2)                  # array([0. , 0.2, 0.4, 0.6, 0.8]) # np.linspace(start, stop, num=50,endpoint=True,dtype=None) =&gt; [start,stop] np.linspace(0,10,5)                 # array([ 0. ,  2.5,  5. ,  7.5, 10. ]) np.linspace(0,10,6)                 # array([ 0.,  2.,  4.,  6.,  8., 10.]) np.linspace(0,10,5,endpoint=False)  # array([0., 2., 4., 6., 8.])</code></pre></li><li><p><code>np.eye</code></p><pre><code class="lang-python"> # np.eye(n,dtype=float) =&gt; n*n I np.eye(2)                           # array([[1., 0.], [0., 1.]])</code></pre></li><li><p><code>np.random.randint</code>,<code>np.random.random</code>,<code>np.random.normal</code>,<code>np.random.seed</code></p><pre><code class="lang-python"> # np.random.randint([low=0,] high, size=None, dtype=&#39;l&#39;) =&gt; [low, high) 均匀分布的整数 np.random.randint(0,10)             # 7 np.random.randint(0,10,size=5)      # array([6, 3, 9, 5, 4]) np.random.randint(0,10,size=(2,6))  # array([[0, 5, 5, 2, 2, 6], [5, 3, 5, 7, 4, 3]]) # np.random.random(size=None) =&gt; [0.0, 1.0) 均匀分布的浮点数 np.random.random()                  # 0.35112599596274263 np.random.random(size=5)            # array([0.84018916, 0.6768928 , 0.37947955, 0.10752063, 0.42760159]) np.random.random(size=(2,3))        # array([[0.3148762 , 0.87591898, 0.29565754], [0.97317656, 0.58963764, 0.19674398]]) # np.random.normal(loc=0.0, scale=1.0, size=None) ＝&gt; 正态分布的浮点数 np.random.normal()                          # -1.6000374192847393 : 均值为0，方差为1的一个随机浮点数 np.random.normal(10,100)                    # -83.71302590581439  : 均值为10，方差为100的一个随机浮点数 np.random.normal(loc=0,scale=10,size=(2,3)) # array([[-5.43979747, 16.91181992, -4.96602424], [-5.8348921 , -8.60388572, -9.39083007]]) # np.random.seed(seed=None) =&gt; 生成随机数前设置一个随机种子，保证生成的随机数一样 np.random.seed(55) np.random.randint(10)               # 7 np.random.randint(10)               # 8 : 未使用相同的seed,生成的随机数不一样 np.random.seed(55) np.random.randint(10)               # 7 : 使用相同的seed,生成的随机数一样 np.random.seed(55) np.random.randint(10)               # 7 : 使用相同的seed,生成的随机数一样 np.random.seed(55) np.random.randint(100)              # 83 : seed相同，范围不同，生成的随机数不一样</code></pre></li><li><p><code>np.random.shuffle</code>,<code>np.random.permutation</code>,<code>np.random.choice</code></p><pre><code class="lang-python"> &#39;&#39;&#39; X:  array([[ 0,  1,  2,  3,  4],        [ 5,  6,  7,  8,  9],        [10, 11, 12, 13, 14]]) &#39;&#39;&#39; np.random.shuffle(X)        # 根据数组a的0轴进行随排列 =&gt; 行乱序，直接改变原数组 X                           &#39;&#39;&#39;                             array([[10, 11, 12, 13, 14],                                    [ 5,  6,  7,  8,  9],                                    [ 0,  1,  2,  3,  4]])                             &#39;&#39;&#39; Y=np.random.permutation(X)  # 根据数组a的0轴进行随排列 =&gt; 行乱序，不改变原数组                             &#39;&#39;&#39;                             array([[10, 11, 12, 13, 14],                                    [ 0,  1,  2,  3,  4],                                    [ 5,  6,  7,  8,  9]])                             &#39;&#39;&#39; np.random.choice(10,(2,3))  # ＝ np.random.randint(0,10,(2,3))                             &#39;&#39;&#39;                             array([[8, 7, 1],                                    [5, 7, 8]])                             &#39;&#39;&#39; np.random.choice(5, 3, replace=False, p=[0.1, 0, 0.3, 0.6, 0])                               &#39;&#39;&#39;                             从 array[0,1,2,3,4] 中按概率p无重复的随机挑出3个（元素1，4取出的概率为0）                             =&gt; array([2, 3, 0])                             &#39;&#39;&#39;</code></pre></li></ol><h2 id="header-7">ndarray数组的基础操作</h2><h3 id="header-8">变换</h3><ul><li><p>维度变换</p><table class="table"><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>.reshape(shape)</code></td><td style="text-align:left">返回一个shape形状的新数组(注：数组元素个数一致)</td></tr><tr><td style="text-align:left"><code>.resize(shape)</code></td><td style="text-align:left">与<code>.reshape(shape)</code>功能一致，但修改原数组</td></tr><tr><td style="text-align:left"><code>.swapaxes(ax1,ax2)</code></td><td style="text-align:left">将数组<code>n</code>个维度中两个维度进行调换,返回一个新数组,原数组不变</td></tr><tr><td style="text-align:left"><code>.flatten()</code></td><td style="text-align:left">对数组进行降维,返回折叠后的一维数组,原数组不变</td></tr></tbody></table></li><li><p>元素类型变换</p><table class="table"><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>dtype=</code></td><td style="text-align:left"><code>np.array(a,dtype=np.int32)</code> 创建时指定</td></tr><tr><td style="text-align:left"><code>astype()</code></td><td style="text-align:left"><code>a.astype(np.float)</code> 返回一个新数组</td></tr></tbody></table></li></ul><p><strong>Sample1:维度变换</strong> </p><pre><code class="lang-python">x=np.arange(10)         # array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre><pre><code class="lang-python"># 1. reshape(shape) =&gt; 原数组不变x.reshape(2,5)         # array([[0, 1, 2, 3, 4],[5, 6, 7, 8, 9]])                       # =&gt; Note: 原数组x不变 = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])x.reshape(2,-1)        # array([[0, 1, 2, 3, 4],[5, 6, 7, 8, 9]])                       # =&gt; Note: x.reshape(3,-1)会出错，因为10不能被3整除x.reshape(1,-1)        # array([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]])                        # =&gt; Note: 生成的是一个新的1*10的二维数组（矩阵）,不是一维数组（向量）</code></pre><pre><code class="lang-python"># 2. resize(shape) =&gt; 原数组改变x.resize(5,2)           # None           x                       # array([[0, 1],[2, 3],[4, 5],[6, 7],[8, 9]])</code></pre><pre><code class="lang-python"># 3. swapaxes(ax1,ax2) =&gt; 原数组不变# 2, (5,2)x.ndim,x.shapex.swapaxes(0,1)         # array([[0, 2, 4, 6, 8],[1, 3, 5, 7, 9]])                        # ＝&gt; 0,1 维度数据交换</code></pre><pre><code class="lang-python"># 4. flatten() =&gt; 原数组不变x.flatten()             # array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])                        # =&gt; 压缩到一维</code></pre><p><strong>Sample2:元素类型变换</strong> </p><pre><code class="lang-python">a                                   # array([1, 2, 3])a.dtype                             # dtype(&#39;int64&#39;)</code></pre><pre><code class="lang-python"># 1. dtype=xxxc = np.array(a,dtype=np.int32)      # array([1, 2, 3], dtype=int32)</code></pre><pre><code class="lang-python"># 2. astype(dtype)d = a.astype(float)                 # array([1., 2., 3.])</code></pre><h3 id="header-9">访问</h3><ul><li>索引: 获取数组中特定位置元素<ul><li>每个维度一个索引值,逗号分割</li></ul></li><li>切片: 获取数组元素子集<ul><li>每个维度一个切片,逗号分割</li><li>一个切片使用3元素冒号分割（<code>起始编号: 终止编号(不含): 步长</code>）</li></ul></li><li>注意：<ul><li>编号<code>0</code>开始从左递增,或<code>‐1</code>开始从右递减</li><li>切片产生的子数组是原数组的引用（创建与原数组无关的新的子数组可以使用<code>.copy()</code>复制一份）</li></ul></li></ul><p><strong>Sample1:索引</strong></p><ol><li><p>一维数组使用索引</p><pre><code class="lang-python"> &#39;&#39;&#39; x = np.arange(10) =&gt; array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) &#39;&#39;&#39; x[2]        # 2 x[-1]       # 9</code></pre><ol><li>二维数组使用索引<pre><code class="lang-python">&#39;&#39;&#39;X = np.arange(10).reshape(3,5)=&gt; array([[ 0,  1,  2,  3,  4],        [ 5,  6,  7,  8,  9],        [10, 11, 12, 13, 14]])&#39;&#39;&#39;X[2][2]     # 12X[(2,2)]    # 12X[2,2]      # 12 &lt;= 推荐方式</code></pre></li></ol></li></ol><p><strong>Sample2:切片</strong></p><ol><li><p>一维数组使用切片</p><pre><code class="lang-python"> &#39;&#39;&#39; x = np.arange(10) =&gt; array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) &#39;&#39;&#39; x[5:9:2]    # [5,9),step:2  =&gt; array([5, 7]) x[5:9]      # [5,9),step:1  =&gt; array([5, 6, 7, 8])  x[:5]       # [s,5),s=0     =&gt; array([0, 1, 2, 3, 4]) x[5:]       # [5,e),e=len   =&gt; array([5, 6, 7, 8, 9]) x[::2]      # step:2        =&gt; array([0, 2, 4, 6, 8]) x[::-1]     # step:-1       =&gt; array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) 倒数</code></pre></li><li><p>二维数组使用切片</p><pre><code class="lang-python"> &#39;&#39;&#39; X = np.arange(10).reshape(3,5) =&gt; array([[ 0,  1,  2,  3,  4],           [ 5,  6,  7,  8,  9],           [10, 11, 12, 13, 14]]) &#39;&#39;&#39; X[0], X[0,:]    # 取第0行 array([0, 1, 2, 3, 4]) X[:,0]          # 取第0列 array([ 0,  5, 10]) X[::-1,::-1]    # 行列都反转                 &#39;&#39;&#39;                 array([[14, 13, 12, 11, 10],                        [ 9,  8,  7,  6,  5],                        [ 4,  3,  2,  1,  0]])                 &#39;&#39;&#39; X[:2,::2]       # 取前2行，列step为2的元素                 &#39;&#39;&#39;                 array([[0, 2, 4],                        [5, 7, 9]])                 &#39;&#39;&#39; X[:2,:3]        # 取前2*3 (注意与X[:2][:3]的区别)                 &#39;&#39;&#39;                 array([[0, 1, 2],                        [5, 6, 7]])                 &#39;&#39;&#39; X[:2][:3]       # X[:2]数组的前3个元素                 &#39;&#39;&#39;                 X[:2]                      array([[0, 1, 2, 3, 4],                            [5, 6, 7, 8, 9]])                 X[:2][:3]                     array([[0, 1, 2, 3, 4],                            [5, 6, 7, 8, 9]])                 &#39;&#39;&#39;</code></pre></li><li><p>切片产生的子数组是原数组的引用</p><pre><code class="lang-python"> subX=X[:2,:3]           # 切片，产生子矩阵数组                         &#39;&#39;&#39;                         array([[0, 1, 2],                                [5, 6, 7]])                         &#39;&#39;&#39; subX[0,0]=100           # 1. 修改子矩阵[0,0]位置的元素值                          &#39;&#39;&#39;                         array([[100,   1,   2],                                 [  5,   6,   7]])                         &#39;&#39;&#39;    X                       # 原数组中[0,0]位置的元素值也改变了                         &#39;&#39;&#39;                         array([[100,   1,   2,   3,   4],                                [  5,   6,   7,   8,   9],                                [ 10,  11,  12,  13,  14]])                         &#39;&#39;&#39;   X[0,0]=50               # 2. 修改原数组[0,0]位置元素值                         &#39;&#39;&#39;                         array([[50,  1,  2,  3,  4],                                [ 5,  6,  7,  8,  9],                                [10, 11, 12, 13, 14]])                         &#39;&#39;&#39;        subX                    # 子数组[0,0]位置的元素值也跟着改变了                         &#39;&#39;&#39;                         array([[50,  1,  2],                                [ 5,  6,  7]])                         &#39;&#39;&#39; subX=X[:2,:3].copy()    # 3. 使用`.copy()`创建与原数组无关的新的子数组                         &#39;&#39;&#39;                         array([[50,  1,  2],                                [ 5,  6,  7]])                         &#39;&#39;&#39; subX[0,0]=20            # 改变子数组[0,0]位置元素值                         &#39;&#39;&#39;                         array([[20,  1,  2],                                [ 5,  6,  7]])                         &#39;&#39;&#39; X                       # 原数组不受影响                         &#39;&#39;&#39;                         array([[50,  1,  2,  3,  4],                                [ 5,  6,  7,  8,  9],                                [10, 11, 12, 13, 14]])                          &#39;&#39;&#39;</code></pre></li></ol><h3 id="header-10">合并</h3><ul><li><code>np.concatenate((a1, a2, ...), axis=0, out=None)</code> <ul><li>同维度数组合并</li><li>不同维度需先<code>reshape</code></li></ul></li><li>more:<ul><li><code>np.stack(arrays, axis=0, out=None)</code> : Join a sequence of arrays along a new axis.</li><li><code>np.vstack(tup)</code> : Stack arrays in sequence vertically (row wise).<ul><li>垂直方向堆叠，水平方向size需相同(即列size需相同)</li><li>内部使用<code>np.concatenate</code></li><li>特：可直接合并一维数组（向量）</li></ul></li><li><code>np.hstack(tup)</code> : Stack arrays in sequence horizontally (column wise).<ul><li>水平方向堆叠，垂直方向size需相同(即行size需相同)</li><li>内部使用<code>np.concatenate</code></li></ul></li><li><code>np.dstack(tup)</code> : Stack arrays in sequence depth wise (along third dimension)</li></ul></li></ul><p><strong>Sample1:<code>np.concatenate</code></strong></p><ol><li><p>一维数组间（向量）合并</p><pre><code class="lang-python"> x=np.array([1,2,3]) y=np.array([3,2,1]) z=np.array([6,6,6]) np.concatenate([x,y,z])     # 组成一个新的一维向量:                              &#39;&#39;&#39;                             array([1, 2, 3, 3, 2, 1, 6, 6, 6])                             &#39;&#39;&#39;</code></pre></li><li><p>二维数组间（矩阵）合并</p><pre><code class="lang-python"> &#39;&#39;&#39; A : 2维矩阵（2*3）     array([[1, 2, 3],            [4, 5, 6]]) &#39;&#39;&#39; np.concatenate([A,A])           # 1. 维度0上合并，组成一个新的4*3矩阵                                  &#39;&#39;&#39;                                 array([[1, 2, 3],                                        [4, 5, 6],                                        [1, 2, 3],                                        [4, 5, 6]])                                 &#39;&#39;&#39; np.concatenate([A,A],axis=1)    # 维度1上合并,组成2*6矩阵                                 &#39;&#39;&#39;                                 array([[1, 2, 3, 1, 2, 3],                                        [4, 5, 6, 4, 5, 6]])                                 &#39;&#39;&#39; np.concatenate([A,A],axis=None) # = flatten 压缩成一维                                 &#39;&#39;&#39;                                 array([1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6])                                 &#39;&#39;&#39;</code></pre></li><li><p>一维数组（向量）合并到二维数组（矩阵）中</p><pre><code class="lang-python"> &#39;&#39;&#39; z : 1维向量     array([6,6,6]) A : 2维矩阵（2*3）     array([[1, 2, 3],            [4, 5, 6]]) &#39;&#39;&#39; np.concatenate([A,z.reshape(1,-1)])     # concatenate只能合并相同维度的数组，z.reshape成2维后再合并                                         &#39;&#39;&#39;                                         array([[1, 2, 3],                                                [4, 5, 6],                                                [6, 6, 6]])                                         &#39;&#39;&#39;</code></pre></li></ol><p><strong>Sample2:<code>np.vstack</code>,<code>np.hstack</code></strong></p><ol><li><p><code>np.vstack</code></p><pre><code class="lang-python"> &#39;&#39;&#39; z : 1维向量     array([6,6,6]) A : 2维矩阵（2*3）     array([[1, 2, 3],            [4, 5, 6]]) B: 2维矩阵（2*2）     array([[1,2],            [3,4]])   &#39;&#39;&#39; # 1. 同维数组堆叠 np.vstack([A,A])    # 垂直方向堆叠 A: 2*3矩阵 &amp; A: 2*3矩阵 =&gt; 4*3矩阵                     &#39;&#39;&#39;                     array([[1, 2, 3],                            [4, 5, 6],                            [1, 2, 3],                            [4, 5, 6]])                     &#39;&#39;&#39; # 2. 不同维数组堆叠 np.vstack([A,z])    # 垂直方向堆叠 A: 2*3矩阵 &amp; z: 1*3向量 =&gt; 3*3矩阵                     &#39;&#39;&#39;                     array([[1, 2, 3],                            [4, 5, 6],                            [6, 6, 6]])                     &#39;&#39;&#39;</code></pre></li><li><p><code>np.hstack</code></p><pre><code class="lang-python"> &#39;&#39;&#39; A : 2维矩阵（2*3）     array([[1, 2, 3],            [4, 5, 6]]) B: 2维矩阵（2*2）     array([[1,2],            [3,4]])     &#39;&#39;&#39;              np.hstack([A,B])    # 水平方向堆叠 =&gt; A: 2*3矩阵 &amp; B: 2*2矩阵 =&gt; 2*5矩阵                     &#39;&#39;&#39;                     array([[1, 2, 3, 1, 2],                            [4, 5, 6, 3, 4]])                     &#39;&#39;&#39;</code></pre></li></ol><h3 id="header-11">分割</h3><ul><li><code>np.split(ary, indices_or_sections, axis=0)</code></li><li>more:<ul><li><code>np.array_split</code> : Split an array into multiple sub-arrays of equal or near-equal size. Does not raise an exception if an equal division cannot be made.</li><li><code>np.hsplit</code> : Split array into multiple sub-arrays horizontally (column-wise).</li><li><code>np.vsplit</code> : Split array into multiple sub-arrays vertically (row wise).</li><li><code>np.dsplit</code> : Split array into multiple sub-arrays along the 3rd axis (depth).</li></ul></li></ul><p><strong>Sample1:<code>np.split</code></strong></p><ol><li><p>一维数组（向量）分割</p><pre><code class="lang-python"> &#39;&#39;&#39; x array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) &#39;&#39;&#39; np.split(x,[3,7]) # 2个分割点：3,7 =&gt; 将数组分割成三段 =&gt; 生成3个数组                   &#39;&#39;&#39;                   [array([0, 1, 2]), array([3, 4, 5, 6]), array([7, 8, 9])]                   &#39;&#39;&#39; np.split(x,[5])   # 1个分割点：5 =&gt; 将数组分割成两段 =&gt; 生成2个数组                   &#39;&#39;&#39;                   [array([0, 1, 2, 3, 4]), array([5, 6, 7, 8, 9])]                   &#39;&#39;&#39;</code></pre></li><li><p>二维数组（矩阵）分割：</p><pre><code class="lang-python"> &#39;&#39;&#39; A array([[ 0,  1,  2,  3],        [ 4,  5,  6,  7],        [ 8,  9, 10, 11],        [12, 13, 14, 15]]) &#39;&#39;&#39; np.split(A,[2])         # 基于维度0，即行，分割 =&gt; 2个2*4数组                         &#39;&#39;&#39;                         [                          array([[0, 1, 2, 3],                                 [4, 5, 6, 7]]),                           array([[ 8,  9, 10, 11],                                 [12, 13, 14, 15]])                         ]                         &#39;&#39;&#39; np.split(A,[2],axis=1)  # 基于维度1，即列，分割 =&gt; 2个4*2数组                         &#39;&#39;&#39;                         [                          array([[ 0,  1],                                 [ 4,  5],                                 [ 8,  9],                                 [12, 13]]),                           array([[ 2,  3],                                 [ 6,  7],                                 [10, 11],                                 [14, 15]])                         ]                         &#39;&#39;&#39;</code></pre></li></ol><p><strong>Sample2:<code>np.vsplit</code>,<code>np.hsplit</code></strong></p><ol><li><p><code>np.vsplit</code></p><pre><code class="lang-python"> &#39;&#39;&#39; A array([[ 0,  1,  2,  3],        [ 4,  5,  6,  7],        [ 8,  9, 10, 11],        [12, 13, 14, 15]]) &#39;&#39;&#39; np.vsplit(A,[2])    # 垂直方向分割，分为上下两部分  =&gt; 2个2*4数组                     &#39;&#39;&#39;                     [                         array([[0, 1, 2, 3],                                [4, 5, 6, 7]]),                         array([[ 8,  9, 10, 11],                                [12, 13, 14, 15]])                     ]</code></pre></li><li><p><code>np.hsplit</code></p><pre><code class="lang-python"> &#39;&#39;&#39; x array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) A array([[ 0,  1,  2,  3],        [ 4,  5,  6,  7],        [ 8,  9, 10, 11],        [12, 13, 14, 15]]) &#39;&#39;&#39; np.hsplit(x,[3,7]) # 水平方向分割,分为三部分部分 =&gt; 3个1维数组                     &#39;&#39;&#39;                     [                         array([0, 1, 2]),                          array([3, 4, 5, 6]),                          array([7, 8, 9])                     ]                     &#39;&#39;&#39; np.hsplit(A,[2])    # 水平方向分割，分为左右两部分 =&gt; 2个4*2数组                     &#39;&#39;&#39;                     [                         array([[ 0,  1],                                 [ 4,  5],                                 [ 8,  9],                                 [12, 13]]),                          array([[ 2,  3],                                 [ 6,  7],                                 [10, 11],                                 [14, 15]])                     ]                     &#39;&#39;&#39;</code></pre></li></ol><p><strong>Sample3:应用</strong></p><pre><code class="lang-python">&#39;&#39;&#39;data : 4*4矩阵        array([[ 0,  1,  2,  3],               [ 4,  5,  6,  7],               [ 8,  9, 10, 11],               [12, 13, 14, 15]])&#39;&#39;&#39;X,Y=np.hsplit(data,[-1])    # 分割出最后一列                              &#39;&#39;&#39;                               X: 4*3矩阵                                 array([[ 0,  1,  2],                                       [ 4,  5,  6],                                       [ 8,  9, 10],                                       [12, 13, 14]])                               Y: 4*1矩阵                                 array([[ 3],                                       [ 7],                                       [11],                                       [15]])                              &#39;&#39;&#39;y=Y[:,0]                    # 取列(Y的子集，是Y的引用) =&gt; 1*4向量                                &#39;&#39;&#39;                                 array([ 3,  7, 11, 15])                                &#39;&#39;&#39;</code></pre><h2 id="header-12">运算</h2><p>作用于数组的每一个元素</p><ul><li><p>基本操作符: </p><ul><li><code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>,<code>//</code>,<code>%</code>,<code>**</code></li><li><code>&gt;</code>,<code>&lt;</code>,<code>&gt;=</code>,<code>&lt;=</code>,<code>==</code>,<code>!=</code></li></ul></li><li><p>一元函数: 数组中各元素进行对应运算</p><table class="table"><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>np.abs(x)</code> <code>np.fabs(x)</code></td><td style="text-align:left">计算数组各元素的绝对值</td></tr><tr><td style="text-align:left"><code>np.sqrt(x)</code></td><td style="text-align:left">计算数组各元素的平方根</td></tr><tr><td style="text-align:left"><code>np.square(x)</code></td><td style="text-align:left">计算数组各元素的平方</td></tr><tr><td style="text-align:left"><code>np.log(x)</code> <code>np.log10(x)</code> <code>np.log2(x)</code></td><td style="text-align:left">计算数组各元素的自然对数、10底对数和2底对数</td></tr><tr><td style="text-align:left"><code>np.ceil(x)</code> <code>np.floor(x)</code></td><td style="text-align:left">计算数组各元素的ceiling值、floor值</td></tr><tr><td style="text-align:left"><code>np.rint(x)</code></td><td style="text-align:left">计算数组各元素的四舍五入值</td></tr><tr><td style="text-align:left"><code>np.modf(x)</code></td><td style="text-align:left">将数组各元素的小数和整数部分以两个独立数组形式返回</td></tr><tr><td style="text-align:left"><code>np.cos(x)</code> <code>np.cosh(x)</code> <code>np.sin(x)</code> <code>np.sinh(x)</code> <code>np.tan(x)</code> <code>np.tanh(x)</code></td><td style="text-align:left">计算数组各元素的普通型和双曲型三角函数</td></tr><tr><td style="text-align:left"><code>np.exp(x)</code></td><td style="text-align:left">计算数组各元素的指数值</td></tr><tr><td style="text-align:left"><code>np.sign(x)</code></td><td style="text-align:left">计算数组各元素的符号值,<code>1(+)</code>, <code>0</code>, <code>‐1(‐)</code></td></tr></tbody></table></li><li><p>二元函数: 两个数组各元素进行对应运算</p><table class="table"><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>np.maximum(x,y)</code> <code>np.fmax()</code> <code>np.minimum(x,y)</code> <code>np.fmin()</code></td><td style="text-align:left">元素级的最大值/最小值计算</td></tr><tr><td style="text-align:left"><code>np.mod(x,y)</code></td><td style="text-align:left">元素级的模运算</td></tr><tr><td style="text-align:left"><code>np.copysign(x,y)</code></td><td style="text-align:left">将数组y中各元素值的符号赋值给数组x对应元素</td></tr></tbody></table></li></ul><h3 id="header-13">基本运算</h3><ul><li><code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>,<code>//</code>,<code>%</code>,<code>**</code></li><li><code>&gt;</code>,<code>&lt;</code>,<code>&gt;=</code>,<code>&lt;=</code>,<code>==</code>,<code>!=</code> (得到bool数组)</li></ul><p>作用于数组的每一个元素（与python的list不同）</p><ol><li><p>与标量</p><pre><code class="lang-python"> &#39;&#39;&#39; X: 3*5 矩阵     array([[ 1,  2,  3,  4,  5],            [ 6,  7,  8,  9, 10],            [11, 12, 13, 14, 15]]) &#39;&#39;&#39; X+2         &#39;&#39;&#39;             array([[ 3,  4,  5,  6,  7],                [ 8,  9, 10, 11, 12],                [13, 14, 15, 16, 17]])             &#39;&#39;&#39; X-2         &#39;&#39;&#39;             array([[-1,  0,  1,  2,  3],                    [ 4,  5,  6,  7,  8],                    [ 9, 10, 11, 12, 13]])             &#39;&#39;&#39; X*2         &#39;&#39;&#39;             array([[ 2,  4,  6,  8, 10],                    [12, 14, 16, 18, 20],                    [22, 24, 26, 28, 30]])             &#39;&#39;&#39;             X/2         &#39;&#39;&#39;             array([[0, 1, 1, 2, 2],                    [3, 3, 4, 4, 5],                    [5, 6, 6, 7, 7]])             &#39;&#39;&#39; X//2        &#39;&#39;&#39;             array([[0, 1, 1, 2, 2],                    [3, 3, 4, 4, 5],                    [5, 6, 6, 7, 7]])             &#39;&#39;&#39; X%2         &#39;&#39;&#39;             array([[1, 0, 1, 0, 1],                    [0, 1, 0, 1, 0],                    [1, 0, 1, 0, 1]])             &#39;&#39;&#39; 1/X         &#39;&#39;&#39;             array([[1.        , 0.5       , 0.33333333, 0.25      , 0.2       ],                    [0.16666667, 0.14285714, 0.125     , 0.11111111, 0.1       ],                    [0.09090909, 0.08333333, 0.07692308, 0.07142857, 0.06666667]])             &#39;&#39;&#39; X&gt;5         &#39;&#39;&#39;             array([[False, False, False, False, False],                    [False,  True,  True,  True,  True],                    [ True,  True,  True,  True,  True]])             &#39;&#39;&#39;</code></pre></li><li><p>数组与数组</p><pre><code class="lang-python"> &#39;&#39;&#39; A: 2*2 矩阵     array([[0, 1],            [2, 3]]) B: 2*2 矩阵     array([[10, 10],            [10, 10]]) &#39;&#39;&#39; A+B     &#39;&#39;&#39;         array([[10, 11],                [12, 13]])         &#39;&#39;&#39; A-B     &#39;&#39;&#39;         array([[-10,  -9],                [ -8,  -7]])         &#39;&#39;&#39; A*B     &#39;&#39;&#39;         array([[ 0, 10],                [20, 30]])         &#39;&#39;&#39; A/B     &#39;&#39;&#39;         array([[0. , 0.1],                [0.2, 0.3]])         &#39;&#39;&#39; A&gt;B    &#39;&#39;&#39;        array([[False, False],               [False, False]])        &#39;&#39;&#39;</code></pre></li><li><p>矩阵和向量: 向量和矩阵每一行做运算</p><pre><code class="lang-python"> &#39;&#39;&#39; v: 一维向量     array([1, 2]) A: 2*2 矩阵     array([[0, 1],            [2, 3]]) &#39;&#39;&#39; v+A     &#39;&#39;&#39;         array([[1, 3],                [3, 5]])         &#39;&#39;&#39; v-A     &#39;&#39;&#39;         array([[ 1,  1],                [-1, -1]])         &#39;&#39;&#39; v*A     &#39;&#39;&#39;         array([[0, 2],                [2, 6]])         &#39;&#39;&#39; A/v     &#39;&#39;&#39;         array([[0. , 0.5],                [2. , 1.5]])         &#39;&#39;&#39; v&gt;A     &#39;&#39;&#39;         array([[ True,  True],                [False, False]])         &#39;&#39;&#39; np.vstack([v]*A.shape[0])+A     # = `v+A`                                 &#39;&#39;&#39;                                 A.shape                   : (2,2)                                 [v]*A.shape[0]            : [array([1, 2]), array([1, 2])]                                 np.vstack([v]*A.shape[0]) : 垂直方向上堆叠2个v，生成2*2的矩阵                                                             array([[1, 2],                                                                    [1, 2]])                                 =&gt;                                     array([[1, 3],                                            [3, 5]])                                 &#39;&#39;&#39; np.tile(v,(2,1))+A              # = `v+A`                                 &#39;&#39;&#39;                                 `np.tile(A,repeats)`                                 np.tile(v,(2,1)) : 将v，行方向上重复2次，列方向上重复1次，形成2*2矩阵                                                     array([[1, 2],                                                            [1, 2]])                                 =&gt;                                      array([[1, 3],                                         [3, 5]])                                 &#39;&#39;&#39;</code></pre></li></ol><h3 id="header-14">常用运算函数</h3><ol><li><p>一元函数</p><pre><code class="lang-python"> &#39;&#39;&#39; X: 3*5 矩阵     array([[ 1,  2,  3,  4,  5],            [ 6,  7,  8,  9, 10],            [11, 12, 13, 14, 15]]) &#39;&#39;&#39; np.sin(X)       &#39;&#39;&#39;                 array([[ 0.84147098,  0.90929743,  0.14112001, -0.7568025 , -0.95892427],                        [-0.2794155 ,  0.6569866 ,  0.98935825,  0.41211849, -0.54402111],                        [-0.99999021, -0.53657292,  0.42016704,  0.99060736,  0.65028784]])                 &#39;&#39;&#39; np.power(3,X)   # 3^x , 同 3**X                 &#39;&#39;&#39;                 array([[       3,        9,       27,       81,      243],                        [     729,     2187,     6561,    19683,    59049],                        [  177147,   531441,  1594323,  4782969, 14348907]])                 &#39;&#39;&#39; np.exp(X)       # e^x                 &#39;&#39;&#39;                 array([[2.71828183e+00, 7.38905610e+00, 2.00855369e+01, 5.45981500e+01, 1.48413159e+02],                        [4.03428793e+02, 1.09663316e+03, 2.98095799e+03, 8.10308393e+03, 2.20264658e+04],                        [5.98741417e+04, 1.62754791e+05, 4.42413392e+05, 1.20260428e+06, 3.26901737e+06]])                 &#39;&#39;&#39; np.log(X)       # ln(X)                 &#39;&#39;&#39;                 array([[0.        , 0.69314718, 1.09861229, 1.38629436, 1.60943791],                        [1.79175947, 1.94591015, 2.07944154, 2.19722458, 2.30258509],                        [2.39789527, 2.48490665, 2.56494936, 2.63905733, 2.7080502 ]])                 &#39;&#39;&#39; np.log2(X)      # log2(X)                 &#39;&#39;&#39;                 array([[0.        , 1.        , 1.5849625 , 2.        , 2.32192809],                        [2.5849625 , 2.80735492, 3.        , 3.169925  , 3.32192809],                        [3.45943162, 3.5849625 , 3.70043972, 3.80735492, 3.9068906 ]])                 &#39;&#39;&#39; np.log10(X)     # log10(X)                 &#39;&#39;&#39;                 array([[0.        , 0.30103   , 0.47712125, 0.60205999, 0.69897   ],                        [0.77815125, 0.84509804, 0.90308999, 0.95424251, 1.        ],                        [1.04139269, 1.07918125, 1.11394335, 1.14612804, 1.17609126]])                   &#39;&#39;&#39; np.sign(X)      &#39;&#39;&#39;                 array([[0, 1, 1, 1, 1],                        [1, 1, 1, 1, 1],                        [1, 1, 1, 1, 1]])                 &#39;&#39;&#39;</code></pre></li><li><p>二元函数</p><pre><code class="lang-python"> &#39;&#39;&#39; A: 2*2 矩阵     array([[0, 1],            [2, 3]]) B: 2*2 矩阵     array([[10.0, 10.0],            [10.0, 10.0]]) v: 一维向量     array([1, 2]) &#39;&#39;&#39; np.minimum(A,B)     &#39;&#39;&#39;                     B是浮点数，所以运算结果为浮点数                     array([[0., 1.],                            [2., 3.]])                     &#39;&#39;&#39; np.maximum(A,v)     &#39;&#39;&#39;                     array([[1, 2],                            [2, 3]])                     &#39;&#39;&#39; np.mod(A,B)         &#39;&#39;&#39;                     = A%B                     array([[0., 1.],                            [2., 3.]])                     &#39;&#39;&#39; np.mode(A,v)        &#39;&#39;&#39;                     = A%v                     array([[0, 1],                            [0, 1]])                     &#39;&#39;&#39;</code></pre></li></ol><h3 id="header-15">线性运算</h3><ol><li><p>向量</p><pre><code class="lang-python"> &#39;&#39;&#39; v: array([1, 2]) w: array([2, 3]) &#39;&#39;&#39; v.T         # 1. 转置：还是1维行向量，无变化 =&gt; array([1,2]) v.dot(w)    # 2. 点积（v·w）： 结果是一个标量(对应元素相乘后相加) 1*2+2*3 =&gt; 8</code></pre></li><li><p>矩阵</p><pre><code class="lang-python"> &#39;&#39;&#39; A: 2*2 矩阵     array([[0, 1],            [2, 3]]) B: 2*3 矩阵     array([[0, 1, 2],            [3, 4, 5]]) &#39;&#39;&#39; A.T                         # 1. 转置: 行列交换                             &#39;&#39;&#39;                             array([[0, 2],                                    [1, 3]])                             &#39;&#39;&#39; invA = np.linalg.inv(A)     # 2. 逆                             &#39;&#39;&#39;                             array([[-1.5,  0.5],                                    [ 1. ,  0. ]])                             &#39;&#39;&#39; pinvB = np.linalg.pinv(B)   # 3. 伪逆： 方阵才有逆，非方阵可使用伪逆（近似逆）                             &#39;&#39;&#39;                             array([[-0.77777778,  0.27777778],                                    [-0.11111111,  0.11111111],                                    [ 0.55555556, -0.05555556]])                             &#39;&#39;&#39; A.dot(B)                    # 4. 矩阵乘法（A·B）：2*2 · 2*3 =&gt; 2*3                             &#39;&#39;&#39;                             array([[ 3,  4,  5],                                    [ 9, 14, 19]])                             &#39;&#39;&#39; A.dot(invA)                 # 5. A · invA  =&gt; 单位矩阵                             &#39;&#39;&#39;                             array([[1., 0.],                                    [0., 1.]])                             &#39;&#39;&#39; B.dot(pinvB)                # 6. B · pinvB =&gt; 近似单位矩阵：主对角线为1，次对角线几乎为0（浮点误差造成）                             &#39;&#39;&#39;                             array([[ 1.00000000e+00, -1.11022302e-16],                                    [ 2.66453526e-15,  1.00000000e+00]])                             &#39;&#39;&#39;</code></pre></li><li><p>向量 &amp; 矩阵</p><pre><code class="lang-python"> &#39;&#39;&#39; v: array([1, 2]) A: 2*2 矩阵     array([[0, 1],            [2, 3]]) &#39;&#39;&#39; v.dot(A)                &#39;&#39;&#39;                         v:1*2 · A:2*2 : 1*2                          =&gt; auto transfer to vector, 1 dim                         =&gt; array([4, 7])                         &#39;&#39;&#39; A.dot(v)                &#39;&#39;&#39;                         A:2*2 · v:1*2 (auto treat as 2*1) : 2*1                          =&gt; auto transfer to vector, 1 dim                         =&gt; array([2, 8])</code></pre></li></ol><h2 id="header-16">高级</h2><h3 id="header-17">聚合(统计函数)</h3><table class="table"><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>sum(a, axis=None)</code></td><td style="text-align:left">元素之和</td></tr><tr><td style="text-align:left"><code>min(a, axis=None)</code> <code>max(a, axis=None)</code></td><td style="text-align:left">最小值、最大值</td></tr><tr><td style="text-align:left"><code>average(a, axis=None,weights=None)</code></td><td style="text-align:left">加权平均值（expection）</td></tr><tr><td style="text-align:left"><code>ptp(a, axis=None)</code></td><td style="text-align:left">元素最大值与最小值的差</td></tr><tr><td style="text-align:left"><code>median(a, axis=None)</code></td><td style="text-align:left">中位数(中值)</td></tr><tr><td style="text-align:left"><code>mean(a, axis=None)</code></td><td style="text-align:left">均值</td></tr><tr><td style="text-align:left"><code>std(a, axis=None)</code></td><td style="text-align:left">标准差</td></tr><tr><td style="text-align:left"><code>var(a, axis=None)</code></td><td style="text-align:left">方差</td></tr><tr><td style="text-align:left"><code>percentile(a,q, axis=None)</code></td><td style="text-align:left">百分位</td></tr><tr><td style="text-align:left"><code>prod(a, axis=None)</code></td><td style="text-align:left">元素乘积</td></tr></tbody></table><p>Note: <code>axis=None</code> 是统计函数的标配参数</p><p><strong>Sample</strong></p><pre><code class="lang-python">&#39;&#39;&#39;X=np.arange(16).reshape(4,-1)=&gt;    array([[ 0,  1,  2,  3],           [ 4,  5,  6,  7],           [ 8,  9, 10, 11],           [12, 13, 14, 15]])&#39;&#39;&#39;np.sum(X)                                   # 120np.sum(X,axis=0)                            # 维度0上聚合（压缩维度0，即行）=&gt; 每列的和 =&gt; array([24, 28, 32, 36])np.sum(X,axis=1)                            # 维度1上聚合（压缩维度1，即列）=&gt; 每行的和 =&gt; array([ 6, 22, 38, 54])np.max(X)                                   # 15np.max(X,aixs=0)                            # 维度0上聚合 =&gt; 每列最大值 =&gt; array([12, 13, 14, 15])np.max(X,axis=1)                            # 维度1上聚合 =&gt; 每行最大值 =&gt; array([12, 13, 14, 15])np.mean(X)                                  # 7.5np.mean(X,axis=0)                           # 维度0上聚合 =&gt; 每列均值 =&gt; array([6., 7., 8., 9.])np.mean(X,axis=1)                           # 维度1上聚合 =&gt; 每行均值 =&gt; array([ 1.5,  5.5,  9.5, 13.5])np.average(X)                               # 7.5np.average(X,axis=0)                        # 维度0上聚合 =&gt; 每列平均值 =&gt; array([6., 7., 8., 9.])np.average(X,axis=0,,weights=[10,5,1,4])    # 维度0上聚合 =&gt; 每列加权平均值 =&gt; array([3.8, 4.8, 5.8, 6.8])np.percentile(X,q=25)                       # 百分位, 25%的元素都是小于等于的值 =&gt; 3.75np.percentile(X,q=50)                       # = np.median(X) =&gt; 7.5np.percentile(X,q=0)                        # = np.min(X)    =&gt; 0.0np.percentile(X,q=100)                      # = np.max(X)    =&gt; 15.0np.percentile(X,q=[0,25,50,100])            # array([ 0.  ,  3.75,  7.5 , 15.  ])np.percentile(X,q=50,axis=0)                # 维度0上聚合 =&gt; array([6., 7., 8., 9.])np.percentile(X,q=50,axis=1)                # 维度0上聚合 =&gt; array([ 1.5,  5.5,  9.5, 13.5])np.prod(X)                                  # 0np.prod(X,axis=0)                           # 维度0上聚合 =&gt; array([   0,  585, 1680, 3465])np.prod(X,axis=1)                           # 维度1上聚合 =&gt; array([    0,   840,  7920, 32760])x=np.random.normal(0,1,size=1000000)        #［0,1) 正态分布随机浮点一维数组np.mean(x)                                  # -0.00019733605984642867 &lt;= 均值，非常趋近0np.std(x)                                   # 1.0001027608240785      &lt;= 标准差，非常趋近1np.var(x)                                   # 1.000205532207944       &lt;= 方差，非常趋近1</code></pre><h3 id="header-18">索引函数</h3><table class="table"><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>argmin(a, axis=None)</code> <code>argmax(a, axis=None)</code></td><td style="text-align:left">计算数组a中元素最小值、最大值所在的索引</td></tr><tr><td style="text-align:left"><code>unravel_index(index, shape)</code></td><td style="text-align:left">将一维索引重塑成多维索引</td></tr><tr><td style="text-align:left"><code>argsort(a, axis=-1, kind=&#39;quicksort&#39;, order=None)</code></td><td style="text-align:left">元素排好序，对应的索引组成的数组</td></tr><tr><td style="text-align:left"><code>argpartition(a, kth, axis=-1, kind=&#39;introselect&#39;, order=None)</code></td><td style="text-align:left">元素分区后，对应的索引组成的数组</td></tr></tbody></table><pre><code class="lang-python">&#39;&#39;&#39;Xarray([[ 0,  1,  2,  3],       [ 4,  5,  6,  7],       [ 8,  9, 10, 11],       [12, 13, 14, 15]])&#39;&#39;&#39;np.argmin(X)                        # 扁平化后的，最小值的下标 =&gt; 0np.argmax(X)                        # 扁平化后的，最大值的下标 =&gt; 15np.argmin(X,axis=0)                 # 维度0上聚合 =&gt; 每列最小值所在的下标 =&gt; array([0, 0, 0, 0])np.unravel_index(12,shape=(4,4))    # (3, 0) &lt;= 将12重塑成多维下标</code></pre><pre><code class="lang-python">np.random.shuffle(X)                # 对X进行乱序处理X                                   &#39;&#39;&#39;                                    array([[ 0,  1,  2,  3],                                           [ 8,  9, 10, 11],                                           [12, 13, 14, 15],                                           [ 4,  5,  6,  7]])                                    &#39;&#39;&#39;np.argsort(x,axis=0)                &#39;&#39;&#39;                                    array([[0, 0, 0, 0],                                           [3, 3, 3, 3],                                           [1, 1, 1, 1],                                           [2, 2, 2, 2]])                                    &#39;&#39;&#39;np.sort(x,axis=0)                   &#39;&#39;&#39;                                    array([[ 0,  1,  2,  3],                                           [ 4,  5,  6,  7],                                           [ 8,  9, 10, 11],                                           [12, 13, 14, 15]])                                    &#39;&#39;&#39;</code></pre><pre><code class="lang-python">x=np.arange(10)                     # array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9])np.random.shuffle(x)                # 对x进行乱序处理x                                   # array([3, 5, 2, 7, 6, 0, 8, 1, 9, 4])np.argpartition(x,5)                # &lt;5,=5,&gt;5 =&gt; array([5, 0, 2, 7, 9, 1, 4, 6, 8, 3])np.partition(x,3)                   # &lt;5,=5,&gt;5 =&gt; array([0, 3, 2, 1, 4, 5, 6, 8, 9, 7])np.argpartition(x,[3,7])            # array([5, 7, 2, 0, 9, 1, 4, 3, 8, 6])np.partition(x,[3,7])               # array([0, 1, 2, 3, 4, 5, 6, 7, 9, 8])</code></pre><h3 id="header-19">Fancy Indexing</h3><p>应用：统计判断，方便抽出符合条件的元素 (且返回的数组维度可控）</p><ol><li><p>使用索引数组</p><pre><code class="lang-python"> &#39;&#39;&#39; x = np.arange(16)                      array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15]) &#39;&#39;&#39; x_inds=[1,3,7,12]               x[x_inds]                       # array([ 1,  3,  7, 12]) x_inds=np.array([[0,2],[1,3]]) x[x_inds]                       &#39;&#39;&#39;                                 array([[0, 2],                                        [1, 3]])                                 &#39;&#39;&#39; &#39;&#39;&#39; X=x.reshape(4,-1)     array([[ 0,  1,  2,  3],            [ 4,  5,  6,  7],            [ 8,  9, 10, 11],            [12, 13, 14, 15]]) &#39;&#39;&#39; row_inds = np.array([0,1,2]) col_inds = np.array([1,2,3]) X[row_inds,0]                   # array([0, 4, 8]) X[0,col_inds]                   # array([1, 2, 3]) X[row_inds,col_inds]            # array([ 1,  6, 11]) &lt;= nodes [0,1],[1,2],[2,3]</code></pre></li><li><p>使用bool值数组（array中的元素进行批量比较，得到bool值数组）</p><pre><code class="lang-python"> &#39;&#39;&#39; x = np.arange(5)                      array([ 0,  1,  2,  3,  4 ]) &#39;&#39;&#39; x&lt;3                         # array([ True,  True,  True, False, False]) x[x&lt;3]                      # array([0, 1, 2]) 2*x == 24-4*x               # array([False, False, False, False,  True]) x[2*x == 24-4*x]            # array([4]) x%2==0                      # array([ True, False,  True, False,  True]) x[x%2==0]                   # array([0, 2, 4]) np.sum(x&lt;3)                 # 3 np.count_nonzero(x&lt;3)       # 3 np.sum((x&gt;2)&amp;(x&lt;4))         # 1         &lt;= 多个条件，使用位运算符 np.sum((x%2==0)|(x&gt;3))      # 3 np.sum(~(x==0))             # 4 np.any(x==0)                # True np.any(x&lt;0)                 # False np.all(x&gt;=0)                # True &#39;&#39;&#39; X=x.reshape(4,-1)     array([[ 0,  1,  2,  3],            [ 4,  5,  6,  7],            [ 8,  9, 10, 11],            [12, 13, 14, 15]]) &#39;&#39;&#39; X&lt;6                         &#39;&#39;&#39;                             array([[ True,  True,  True,  True],                                    [ True,  True, False, False],                                    [False, False, False, False],                                    [False, False, False, False]])                             &#39;&#39;&#39; X[X&lt;6]                      # array([0, 1, 2, 3, 4, 5]) X[:,3]%3==0                 # array([ True, False, False,  True]) &lt;= 每行最后一个元素能否被3整除 X[X[:,3]%3==0,:]            # 选出最后一个元素可被3整除的行                             &#39;&#39;&#39;                             array([[ 0,  1,  2,  3],                                    [12, 13, 14, 15]])                             &#39;&#39;&#39; np.sum(X%2==0)              # 8                     &lt;= 统计偶数个数 np.sum(X%2==0,axis=0)       # array([4, 0, 4, 0])   &lt;= 每列有多少偶数（行方向上压缩） np.sum(X%2==0,axis=1)       # array([2, 2, 2, 2])   &lt;= 每行有多少偶数（列方向上压缩）） np.all(X&gt;3,axis=0)          # array([False, False, False, False]) &lt;= 每列（行方向上判断） np.all(X&gt;3,axis=1)          # array([False,  True,  True,  True]) &lt;= 每行（列方向上判断）</code></pre></li></ol><h2 id="header-20">文件存取</h2><h3 id="header-21">CSV文件存取</h3><ul><li><p><code>np.savetxt(fname,X,fmt=&#39;%.18e&#39;,delimiter=&#39; &#39;,newline=&#39;\n&#39;,header=&#39;&#39;,footer=&#39;&#39;,comments=&#39;# &#39;,encoding=None,)</code></p><ul><li><code>frame</code> : 文件、字符串或产生器,可以是<code>.gz</code>或<code>.bz2</code>的压缩文件 </li><li><code>array</code> : 存入文件的数组</li><li><code>fmt</code> : 写入文件的格式,例如:<code>%d</code> <code>%.2f</code> <code>%.18e</code></li><li><code>delimiter</code> : 分割字符串,默认是任何空格</li></ul></li><li><p><code>np.loadtxt(fname,dtype=&lt;class &#39;float&#39;&gt;,comments=&#39;#&#39;,delimiter=None,converters=None,skiprows=0,usecols=None,unpack=False,ndmin=0,encoding=&#39;bytes&#39;,max_rows=None,)</code></p><ul><li><code>frame</code> : 文件、字符串或产生器,可以是<code>.gz</code>或<code>.bz2</code>的压缩文件     </li><li><code>dtype</code> : 数据类型,可选</li><li><code>delimiter</code> : 分割字符串,默认是任何空格</li><li><code>unpack</code> : 如果<code>True</code>,读入属性将分别写入不同变量</li></ul></li><li><p>局限：只能有效存储一维和二维数组 </p></li></ul><pre><code class="lang-python">X=np.arange(100).reshape(5,20)np.savetxt(&quot;a.csv&quot;,X,fmt=&#39;%d&#39;,delimiter=&quot;,&quot;)&#39;&#39;&#39;0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,1920,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,3940,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,5960,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,7980,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99&#39;&#39;&#39;Y=np.loadtxt(&quot;a.csv&quot;,delimiter=&quot;,&quot;)&#39;&#39;&#39;array([[ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12.,        13., 14., 15., 16., 17., 18., 19.],       [20., 21., 22., 23., 24., 25., 26., 27., 28., 29., 30., 31., 32.,        33., 34., 35., 36., 37., 38., 39.],       [40., 41., 42., 43., 44., 45., 46., 47., 48., 49., 50., 51., 52.,        53., 54., 55., 56., 57., 58., 59.],       [60., 61., 62., 63., 64., 65., 66., 67., 68., 69., 70., 71., 72.,        73., 74., 75., 76., 77., 78., 79.],       [80., 81., 82., 83., 84., 85., 86., 87., 88., 89., 90., 91., 92.,        93., 94., 95., 96., 97., 98., 99.]])&#39;&#39;&#39;</code></pre><h3 id="header-22">多维数据的存取</h3><ul><li><p><code>a.tofile(frame, sep=&#39;&#39;, format=&#39;%s&#39;)</code></p><ul><li><code>frame</code> : 文件、字符串</li><li><code>sep</code> : 数据分割字符串,如果是空串,写入文件为二进制 </li><li><code>format</code> : 写入数据的格式</li></ul></li><li><p><code>np.fromfile(frame, dtype=float, count=‐1, sep=&#39;&#39;)</code></p><ul><li><code>frame</code> : 文件、字符串</li><li><code>dtype</code> : 读取的数据类型</li><li><code>count</code> : 读入元素个数,<code>‐1</code>表示读入整个文件</li><li><code>sep</code> : 数据分割字符串,如果是空串,写入文件为二进制</li></ul></li><li>注：tofile将array按一维存储，所以读取到后需reshape恢复（可以通过元数据文件来存储数组相关的额外信息）</li></ul><pre><code class="lang-python">X=np.arange(100).reshape(2,10,5)    # 2*10*5&#39;&#39;&#39;array([[[ 0,  1,  2,  3,  4],        [ 5,  6,  7,  8,  9],        [10, 11, 12, 13, 14],        [15, 16, 17, 18, 19],        [20, 21, 22, 23, 24],        [25, 26, 27, 28, 29],        [30, 31, 32, 33, 34],        [35, 36, 37, 38, 39],        [40, 41, 42, 43, 44],        [45, 46, 47, 48, 49]],       [[50, 51, 52, 53, 54],        [55, 56, 57, 58, 59],        [60, 61, 62, 63, 64],        [65, 66, 67, 68, 69],        [70, 71, 72, 73, 74],        [75, 76, 77, 78, 79],        [80, 81, 82, 83, 84],        [85, 86, 87, 88, 89],        [90, 91, 92, 93, 94],        [95, 96, 97, 98, 99]]])&#39;&#39;&#39;X.tofile(&quot;b.txt&quot;,sep=&quot;,&quot;,format=&quot;%d&quot;)   # =&gt; 扁平化存储（1维）&#39;&#39;&#39;0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99&#39;&#39;&#39;Y=np.fromfile(&quot;b.txt&quot;,sep=&quot;,&quot;)&#39;&#39;&#39;array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12.,       13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25.,       26., 27., 28., 29., 30., 31., 32., 33., 34., 35., 36., 37., 38.,       39., 40., 41., 42., 43., 44., 45., 46., 47., 48., 49., 50., 51.,       52., 53., 54., 55., 56., 57., 58., 59., 60., 61., 62., 63., 64.,       65., 66., 67., 68., 69., 70., 71., 72., 73., 74., 75., 76., 77.,       78., 79., 80., 81., 82., 83., 84., 85., 86., 87., 88., 89., 90.,       91., 92., 93., 94., 95., 96., 97., 98., 99.])&#39;&#39;&#39;Y.reshape(2,10,5)                   # reshape回原维度</code></pre><h3 id="header-23">便捷存取</h3><ul><li><code>np.save(fname, array, allow_pickle=True, fix_imports=True)</code> , <code>np.savez(fname, array)</code><ul><li><code>fname</code> : 文件名,以<code>.npy</code>为扩展名,压缩扩展名为<code>.npz</code></li><li><code>array</code> : 数组变量</li></ul></li><li><code>np.load(fname,mmap_mode=None,allow_pickle=True,fix_imports=True,encoding=&#39;ASCII&#39;)</code><ul><li><code>fname</code> : 文件名,以<code>.npy</code>为扩展名,压缩扩展名为<code>.npz</code></li></ul></li></ul><pre><code class="lang-python">X=np.arange(100).reshape(2,10,5)    # 2*10*5np.save(&quot;c.npy&quot;,X)                  # 二进制，包含数组元信息Y=np.load(&quot;c.npy&quot;)                  # 可直接恢复成原数组&#39;&#39;&#39;array([[[ 0,  1,  2,  3,  4],        [ 5,  6,  7,  8,  9],        [10, 11, 12, 13, 14],        [15, 16, 17, 18, 19],        [20, 21, 22, 23, 24],        [25, 26, 27, 28, 29],        [30, 31, 32, 33, 34],        [35, 36, 37, 38, 39],        [40, 41, 42, 43, 44],        [45, 46, 47, 48, 49]],       [[50, 51, 52, 53, 54],        [55, 56, 57, 58, 59],        [60, 61, 62, 63, 64],        [65, 66, 67, 68, 69],        [70, 71, 72, 73, 74],        [75, 76, 77, 78, 79],        [80, 81, 82, 83, 84],        [85, 86, 87, 88, 89],        [90, 91, 92, 93, 94],        [95, 96, 97, 98, 99]]])&#39;&#39;&#39;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;ndarray数组：属性，元素类型，创建&lt;/li&gt;
&lt;li&gt;基础操作：（维度，元素类型）变换，访问（索引，切片），合并，分割&lt;/li&gt;
&lt;li&gt;运算操作：基本运算（作用于数组的每一个元素），线性运算（向量／矩阵 ：逆，乘）&lt;/li&gt;
&lt;li&gt;高级：聚合函数，索引函数，Fancy Indexing(应用：统计判断，方便抽出符合条件的元素)&lt;/li&gt;
&lt;li&gt;文件存取&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://sixdegree.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>React Fiber</title>
    <link href="http://sixdegree.github.io/2019/08/15/React-Fiber.html"/>
    <id>http://sixdegree.github.io/2019/08/15/React-Fiber.html</id>
    <published>2019-08-14T16:00:00.000Z</published>
    <updated>2019-10-07T15:12:55.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>create-react-app</li><li>new features</li><li>CSS</li><li>Redux</li><li>Router</li><li>More: react-loadable,Next.js,Jest,re-organize by features</li></ol><a id="more"></a><h2 id="header-1">Starter</h2><p><strong>React：</strong></p><ul><li>声明式开发（操作Data，自动根据Data构建Dom，注：JQuery是命令式开发，直接操作Dom）</li><li>可以与其他框架并存</li><li>组件化 (Component)</li><li>单向数据流（子组件可使用父组件传递过来的值，但子组件不能直接改变这个值）</li><li>视图层框架（对于大型项目，组件间传值时，可借助其他数据层框架，如redux,flux）</li><li>函数式编程（更方便前端自动化测试）</li></ul><p><strong>React Fiber:</strong></p><ul><li>React Version &gt;16（eg:16.4）</li><li>底层核心算法改良，引入优先级，分片等概念</li></ul><p><strong>注：</strong></p><ul><li>React: UI</li><li>Redux: State</li><li>Router: route</li><li>babel: JavaScript compiler (ES6-&gt;ES5)</li><li>webpack: A module bundler</li><li>ESLint: 语法规则和代码风格的检查工具</li></ul><h3 id="header-2">开发环境搭建</h3><ol><li><p>方式一：直接引入<code>.js</code>文件</p></li><li><p>方式二：使用脚手架工具，eg: grunt,gulp,webpack =&gt; 官方提供：<code>create-react-app</code></p><pre><code class="lang-bash"> $ npm install -g create-react-app $ create-react-app todolist   # or use `npx create-react-app todolist` if npm 5.2.0+ $ cd todoList $ npm start                   # or use `yarn start`</code></pre></li><li><p>其它工具平台：</p><ul><li>Rekit (React专属IDE和工具集, 基于最佳实践生成代码和管理项目)<ul><li>以feature方式组织代码</li><li>拆分component,action,reducer</li><li>拆分route配置</li><li>通过代码自动生成保持代码一致性：文件夹结构，文件名，变量名，代码逻辑的一致性</li><li>集成单元测试，单元测试覆盖率</li><li>可视化关系，图表</li></ul></li><li>codesandbox (online)</li></ul></li></ol><h3 id="header-3">开发调试工具</h3><ul><li><p>ESLint </p><ul><li>代码格式检查，使用<code>.eslintrc</code>进行规则配置</li><li>例如配置使用<code>airbnb</code>的javascript代码风格</li></ul></li><li><p>Prettier</p><ul><li>代码格式化神器，使用<code>.prettierrc</code>进行规则配置</li><li>保证更容易写出风格一直的代码(保存时会自动格式化修正)</li></ul></li><li><p>Chrom 插件</p><ul><li>React DevTool: 可以React组件树的方式观察组件结构,props,state<ul><li>离线下载安装 Issue: <code>程序包无效:&quot;CRX_HEADER_INVALID&quot;</code> =&gt; 将下载的<code>react-developer-tools.ctx</code>重命名为<code>react-developer-tools.zip</code>压缩包再拖拽到<code>chrome://extensions/</code>即可</li></ul></li><li>Redux DevTool: 可监控查看Redux中store,action等，可自动生成测试</li></ul></li></ul><h3 id="header-4">打包和部署</h3><ul><li><code>npm run build</code> : 打包<code>create-react-app</code>创建的项目到项目的build文件夹下</li><li>webpack<ul><li>编译ES6语法特性，编译JSX</li><li>整合资源，如图片，Less/Sass</li><li>优化代码体积</li></ul></li><li>注意：<ul><li>设置nodejs环境为production</li><li>禁用开发时的专用代码，如logger</li><li>设置应用根路径</li></ul></li></ul><h3 id="header-5">JSX</h3><blockquote><p>JSX：在JS文件中直接写HTML或自定义的组件标签（不用字符串包裹）<br>是 <code>HTML</code> 和 <code>JavaScript</code> 的混合，当遇到 <code>&lt;</code> 时，当作 <code>HTML</code> 解析，遇到 <code>{</code> 时，当作 <code>JS</code> 解析<br><code>{}</code>内可使用表达式<br>本质: 不是模版引擎，而是语法糖</p></blockquote><pre><code class="lang-javascript">// JSX: 动态创建组件的语法糖const name = &quot;Hello&quot;const element = &lt;h1&gt;Hello,{name}&lt;/h1&gt;;// 等价于：const name = &quot;Hello&quot;const element = React.createElement(&#39;h1&#39;,null,&#39;Hello,&#39;,name); // (tag,attrs,child1,child2,...)</code></pre><p><strong>使用:</strong></p><ol><li><p>import</p><pre><code class="lang-javascript"> // 使用JSX语法，必需引入： import React from &#39;react&#39;;</code></pre></li><li><p>添加注释：</p><pre><code class="lang-javascript"> &lt;div&gt;     { /* 块注释 */ }     {       // 行注释     } &lt;/div&gt;</code></pre></li><li><p>表达式：</p><pre><code class="lang-javascript"> // JSX本身也是表达式 const element = &lt;h1&gt;Hello,World!&lt;/h1&gt;; // 属性中使用表达式 &lt;MyComponent foo = {1+2+3+4} /&gt; // 延展属性 const props = {firstName: &#39;Ben&#39;,lastName: &#39;Hector&#39;}; const greeting = &lt;Greeting {...props} /&gt;; // 表达式作子元素 const element = &lt;li&gt;{props.msg}&lt;/li&gt;;</code></pre></li><li><p>标签上添加css class，不能使用<code>class</code>（关键字冲突），需使用<code>className</code></p><pre><code class="lang-javascript"> &lt;input className=&quot;input&quot; /&gt;</code></pre></li><li><p>光标自动聚焦，不能使用<code>for</code>（关键字冲突），需使用<code>htmlFor</code></p><pre><code class="lang-javascript"> &lt;!-- 点击此label时，光标自动聚焦到input --&gt; &lt;label htmlFor=&quot;insertArea&quot;&gt;Input&lt;/label&gt; &lt;input id=&quot;insertArea&quot;/&gt;</code></pre></li><li><p>dangerouslySetInnerHTML</p><ul><li><p>直接添加<code>{}</code>的内容会自动转义，eg: 内容为<code>&lt;h1&gt;Hello&lt;/h1&gt;</code> =&gt; 会转换为字符串显示</p><pre><code class="lang-javascript">  return (      &lt;ul&gt;          {              this.state.list.map((item,index)=&gt;{                  return &lt;li key={index}                       onClick={this.handleItemDelete.bind(this,index)}                      &gt;{item}&lt;/li&gt;              })          }      &lt;/ul&gt;  )</code></pre></li><li><p>使用<code>dangerouslySetInnerHTML</code>添加的内容不转义，eg: 内容为<code>&lt;h1&gt;Hello&lt;/h1&gt;</code> =&gt; 会直接作为HTML渲染显示</p><pre><code class="lang-javascript">  return(      &lt;ul&gt;          {              this.state.list.map((item,index)=&gt;{                  return &lt;li key={index}                       onClick={this.handleItemDelete.bind(this,index)}                      // 配置dangerouslySetInnerHTML属性等于一个json对象：`{__html:item}`                      dangerouslySetInnerHTML={{__html:item}}                      &gt;&lt;/li&gt;              })          }      &lt;/ul&gt;  )</code></pre></li></ul></li></ol><p><strong>约定:</strong></p><ul><li>React认为小写的tag是原生Dom节点，如<code>div</code></li><li>大写字母开头为自定义组件</li><li>JSX标记可以直接使用属性语法，如<code>&lt;menu.Item /&gt;</code></li></ul><h2 id="header-6">Component</h2><p>React以组件方式考虑UI的构建:</p><ul><li>一般不提供其它操作方法，而是某种状态机，可理解为一个纯函数</li><li>单向数据绑定</li></ul><pre><code>    props       +       state           =&gt;      View(外部传来的属性)       (内部维护的状态)</code></pre><ol><li>响应式设计：通过监听Data(即组件的<code>status</code>属性)操作，而传统方式是通过Dom操作</li><li>父子组件通讯：通过组件的<code>props</code>属性<ul><li>父组件：子组件标签上添加标签属性</li><li>子组件：通过<code>props</code>属性获取调用时设置的标签属性</li><li>注：子组件可使用父组件传递过来的值，但子组件不能直接改变这个值（单向数据流）</li></ul></li><li>使用原则:<ul><li>何时创建组件：单一职责原则<ul><li>每一个组件只做一件事</li><li>如果组件变得复杂，则应拆分成小组件</li></ul></li><li>数据状态管理：DRY原则<ul><li>能计算得到的状态就不要单独存储</li><li>组件尽量无状态，所需数据通过<code>props</code>获取</li></ul></li></ul></li></ol><h3 id="header-7">自定义组件</h3><pre><code class="lang-jsx">import React,{ Component } from &#39;react&#39;;// 等价于：import React from &#39;react&#39;const Component=React.Component// 自定义组件class App extends Component{    render(){        // JSX        return &lt;div&gt;Hello world&lt;/div&gt;;    }}export default App;</code></pre><p><strong>注：</strong></p><ul><li>首字母必需大些</li><li>render返回的内容必需整体包含在一个大的元素中</li></ul><h3 id="header-8">state</h3><p>组件中的<code>state</code>属性不允许直接做任何改变(即<code>Immutable</code>不可变数据)，需通过<code>setState</code>方法</p><pre><code class="lang-javascript">handleItemDelete(index,event){    const lst=[...this.state.list]    lst.splice(index,1)    this.setState({        list:lst      // list: this.state.list.splice(index,1) -- not recommend    })}</code></pre><h3 id="header-9">props</h3><ul><li><code>props</code> : 接收从父组件传递过来的属性</li><li><code>defaultProps</code> : 给组件设置默认属性值</li><li><code>propTypes</code> : 对接收的属性进行校验（不通过时，<code>console</code>会有个<code>warning</code>）</li></ul><pre><code class="lang-javascript">import PropTypes from &#39;prop-types&#39;// Typechecking with PropTypesTodoItem.propTypes = {    item: PropTypes.string.isRequired    ,index: PropTypes.oneOfType([PropTypes.number,PropTypes.string])    ,deleteItem: PropTypes.func}TodoItem.defaultProps={    item: &#39;Hello World&#39;}</code></pre><h3 id="header-10">Sample: TodoList</h3><pre><code class="lang-javascript">import React,{Component,Fragment} from &#39;react&#39;;import &#39;./style.css&#39;class TodoList extends Component{    constructor(props){        super(props);        this.state={            inputValue:&#39;&#39;,            list:[                &#39;Learn English&#39;                ,&#39;Learn React&#39;            ]        }    }    render(){        return (            &lt;Fragment&gt;                 &lt;label htmlFor=&quot;insertArea&quot;&gt;Input&lt;/label&gt; {/*点击此label时，光标自动聚焦到input*/}                &lt;input id=&quot;insertArea&quot;                    className=&quot;input&quot;                    value={this.state.inputValue}                    onChange={this.handleInputChange.bind(this)} // bind this: TodoList inst!!                /&gt;&lt;button onClick={this.handleBtnClick.bind(this)}&gt;Submit&lt;/button&gt;                &lt;ul&gt;                    {                        this.state.list.map((item,index)=&gt;{                            // return &lt;li key={index}                             //     onClick={this.handleItemDelete.bind(this,index)}                              //     &gt;{item}&lt;/li&gt;                            return &lt;li key={index}                                 onClick={this.handleItemDelete.bind(this,index)}                                  dangerouslySetInnerHTML={{__html:item}}                                &gt;&lt;/li&gt;                        })                    }                &lt;/ul&gt;            &lt;/Fragment&gt;        )    }    handleInputChange(event){        // console.log(event.target) // event.target = dom: input        // console.log(this)         // undefined !! ,need to bind when call        // this.state.inputValue=event.target.value // need to use setState!!        this.setState({            inputValue:event.target.value        })    }    handleBtnClick(event){        this.setState({            list:[...this.state.list,this.state.inputValue]            ,inputValue:&#39;&#39;        })    }    handleItemDelete(index,event){        const lst=[...this.state.list]        lst.splice(index,1)        this.setState({            list:lst      // list: this.state.list.splice(index,1) -- not recommend        })    }}export default TodoList;</code></pre><h3 id="header-11">组件拆分：父子组件</h3><p>注：可通过组件的<code>props</code>属性实现父子组件通讯</p><ol><li><p>TodoList.js: <code>import TodoItem from &#39;./TodoItem&#39;</code></p><pre><code class="lang-java"> render(){     return (         &lt;Fragment&gt;              &lt;label htmlFor=&quot;insertArea&quot;&gt;Input&lt;/label&gt; {/*点击此label时，光标自动聚焦到input*/}             &lt;input id=&quot;insertArea&quot;                 className=&quot;input&quot;                 value={this.state.inputValue}                 onChange={this.handleInputChange.bind(this)} // bind this: TodoList inst!!             /&gt;&lt;button onClick={this.handleBtnClick.bind(this)}&gt;Submit&lt;/button&gt;             &lt;ul&gt;                 {                     this.state.list.map((item,index)=&gt;{                         // return &lt;li key={index}                          //     onClick={this.handleItemDelete.bind(this,index)}                           //     &gt;{item}&lt;/li&gt;                         // return &lt;li key={index}                          //     onClick={this.handleItemDelete.bind(this,index)}                           //     dangerouslySetInnerHTML={{__html:item}}                         //     &gt;&lt;/li&gt;                         return &lt;TodoItem                             key={index} item={item} index={index}                             deleteItem={this.handleItemDelete.bind(this)}                             //onClick={this.handleItemDelete.bind(this,index)}                              /&gt;                     })                 }             &lt;/ul&gt;         &lt;/Fragment&gt;     ) }</code></pre></li><li><p>TodoItem.js:</p><pre><code class="lang-javascript"> import React,{Component} from &#39;react&#39; class TodoItem extends Component{     constructor(props){         super(props);         this.handleClick=this.handleClick.bind(this) // recommend! 节约性能     }     render(){         return &lt;li onClick={this.handleClick}&gt;{this.props.item}&lt;/li&gt;     }     handleClick(){         // 调用传过来的父组件方法修改父组件status（即仍然是使用父组件的方法维护父组件状态）         // console.log(this.props);         this.props.deleteItem(this.props.index)      } } export default TodoItem</code></pre></li></ol><h3 id="header-12">组件拆分: UI &amp; Container</h3><p>拆分成UI组件和Container组件：</p><ul><li>UI组件负责渲染部分 =&gt; 无状态组件(一个只有render函数的组件) =&gt; 可直接用一个函数定义, 性能高</li><li>Container组件负责逻辑部分</li></ul><p><strong>Sample:</strong></p><ol><li><p>AntTodoList.js : Container组件</p><pre><code class="lang-javascript"> import React,{ Component } from &#39;react&#39;; import store from &#39;./store/index&#39; import * as actionCreator from &#39;./store/actionCreator&#39; import TodoListUI from &#39;./TodoListUI&#39; class AntdTodoList extends Component {     render(){         return &lt;TodoListUI                      inputValue={this.state.inputValue}                     handleInputChange={this.handleInputChange}                     handleBtnClick={this.handleBtnClick}                     list={this.state.list}                     handleItemDelete={this.handleItemDelete}                 /&gt;     }     // 其他不变 .... }</code></pre></li><li><p>TodoListUI.js : UI组件</p><pre><code class="lang-java"> import React,{ Component } from &#39;react&#39;; import &#39;antd/dist/antd.css&#39;; import { Input,Button,List,Icon } from &#39;antd&#39;; /* class TodoListUI extends Component{     render(){         return (             &lt;div style={{margin:'20px auto',maxWidth:'600px'}}&gt;                 &lt;div style={{padding:'20px 0px',textAlign:'center'}}&gt;                     &lt;h2&gt;TodoList(with Antd UI):&lt;/h2&gt;                     &lt;Input                          placeholder=&#39;Enter todo item here&#39;                          style={{width:'500px',marginRight:'10px'}}                         value={this.props.inputValue}                         onChange={this.props.handleInputChange}                     /&gt;                     &lt;Button type=&quot;primary&quot; onClick={this.props.handleBtnClick}&gt;Submit&lt;/Button&gt;                 &lt;/div&gt;                 &lt;List                    bordered                    dataSource={this.props.list}                   renderItem={(item,index) =&gt; (                     &lt;List.Item                          actions={[                             &lt;Icon                                  type=&quot;delete&quot; theme=&quot;filled&quot;                                  // onClick={this.props.handleItemDelete.bind(this,index)}                                 onClick={()=&gt;{                                     // console.log(&quot;del:&quot;,index,this.props.list[index])                                     this.props.handleItemDelete(index)                                 }}                             /&gt;                         ]}                     &gt;                         {item}                     &lt;/List.Item&gt;                   )}                 /&gt;             &lt;/div&gt;         )     } }*/ // 无状态组件(一个只有render函数的组件) =&gt; 可直接用一个函数定义, 性能高 const TodoListUI = (props)=&gt;{     return (         &lt;div style={{margin:'20px auto',maxWidth:'600px'}}&gt;             &lt;div style={{padding:'20px 0px',textAlign:'center'}}&gt;                 &lt;h2&gt;TodoList(with Antd UI):&lt;/h2&gt;                 &lt;Input                      placeholder=&#39;Enter todo item here&#39;                      style={{width:'500px',marginRight:'10px'}}                     value={props.inputValue}                     onChange={props.handleInputChange}                 /&gt;                 &lt;Button type=&quot;primary&quot; onClick={props.handleBtnClick}&gt;Submit&lt;/Button&gt;             &lt;/div&gt;             &lt;List                bordered                dataSource={props.list}               renderItem={(item,index) =&gt; (                 &lt;List.Item                      actions={[                         &lt;Icon                              type=&quot;delete&quot; theme=&quot;filled&quot;                              onClick={()=&gt;{                                 // console.log(&quot;del:&quot;,index,props.list[index])                                 props.handleItemDelete(index)                             }}                         /&gt;                     ]}                 &gt;                     {item}                 &lt;/List.Item&gt;               )}             /&gt;         &lt;/div&gt;     ) } export default TodoListUI;</code></pre></li></ol><h3 id="header-13">受控 &amp; 非受控组件</h3><p>(主要针对表单)</p><ul><li>受控组件：表单元素状态由使用者维护<pre><code class="lang-html">  &lt;input      type=&quot;text&quot;      value={this.state.value}      onChange={ evt =&gt; this.setState({value:evt.target.value})}  /&gt;</code></pre></li><li>非受控组件：表单元素状态由DOM自身维护<pre><code class="lang-html">  &lt;input      type=&quot;text&quot;      ref={ node =&gt; this.input=node }  /&gt;</code></pre></li></ul><h3 id="header-14">组件复用(设计模式)</h3><ul><li><p>高阶组件（HOC）: 一个函数，接收组件作为参数，返回新的组件</p><pre><code class="lang-java">  export default function withTimer(WrappedComponent) {    return class extends Component {      state = { time: new Date() };      componentDidMount() {        this.timerID = setInterval(() =&gt; this.tick(), 1000);      }      componentWillUnmount() {        clearInterval(this.timerID);      }      tick() {        this.setState({          time: new Date()        });      }      render() {        return &lt;WrappedComponent time={this.state.time} {...this.props} /&gt;;      }    };  }</code></pre><pre><code class="lang-java">  class App extends Component {      render(){          return (              &lt;div&gt;                  &lt;h1&gt;Hello World!&lt;/h1&gt;                  // 使用withTimer封装后，可直接使用传递进来的time属性                  &lt;h2&gt;{this.props.time.toLocaleString()}&lt;/h2&gt;              &lt;/div&gt;          )      }  }  export default withTimer(App);  // 返回封装后的新组件</code></pre></li><li><p>函数作为子组件：外部使用一个函数作为组件的children =&gt; 组件如何render内容，由调用方决定</p><pre><code class="lang-java">  class MyComponent extends Component{      render(){          return (              // 传进来的children是个函数              &lt;ul&gt;{this.props.children(&#39;Susan&#39;)}&lt;/ul&gt;          )      }  }</code></pre><pre><code class="lang-java">  &lt;MyComponent&gt;{ (name) =&gt; (&lt;li&gt;{name}&lt;/li&gt;) }&lt;/MyComponent&gt;</code></pre></li><li><p><strong>注：</strong>是一种设计模式，自己可实现更多场景的组件复用</p></li></ul><h2 id="header-15">高阶</h2><h3 id="header-16">this</h3><ul><li>this : 一般指向该方法运行时所在的环境 <a href="https://sixdegree.github.io/2018/10/15/ES6.html#header-37">ES6 this</a></li><li>注：在箭头函数中，<code>this</code>指向是固定的，为定义时所在的对象，不是使用时所在的对象（因为箭头函数没有自己的this，只能使用外层代码块的this）</li></ul><pre><code class="lang-javascript">render(){    return &lt;input id=&quot;insertArea&quot;            className=&quot;input&quot;            value={this.state.inputValue}            onChange={this.handleInputChange.bind(this)} // bind this: TodoList inst!!}handleInputChange(event){    // console.log(event.target) // event.target = dom: input    // console.log(this)         // undefined !! ,need to bind when call    // this.state.inputValue=event.target.value // need to use setState!!    this.setState({        inputValue:event.target.value    })}</code></pre><p>=&gt; 优化：</p><pre><code class="lang-javascript">constructor(props){    super(props);    this.state={        inputValue:&#39;&#39;,        list:[]    };    this.handleInputChange=this.handleInputChange.bind(this) // 在这里bind this: TodoList inst!! 性能更优}render(){    return &lt;input id=&quot;insertArea&quot;            className=&quot;input&quot;            value={this.state.inputValue}            onChange={this.handleInputChange} // constructor时已经绑定好了，可直接使用}</code></pre><h3 id="header-17">ref</h3><p>可用于直接定位到真实Dom（但不推荐直接操作Dom）</p><pre><code class="lang-java">render(){    return (        &lt;Fragment&gt;             &lt;label htmlFor=&quot;insertArea&quot;&gt;Input&lt;/label&gt; {/*点击此label时，光标自动聚焦到input*/}            &lt;input id=&quot;insertArea&quot;                className=&quot;input&quot;                value={this.state.inputValue}                onChange={this.handleInputChange.bind(this)} // bind this: TodoList inst!!                ref={(input)=&gt;{this.input=input}}            /&gt;            &lt;button onClick={this.handleBtnClick.bind(this)}&gt;Submit&lt;/button&gt;            &lt;ul ref={(ul)=&gt;{this.ul=ul}}&gt;                {this.getTodoItem()}            &lt;/ul&gt;        &lt;/Fragment&gt;    )}handleInputChange(event){    // 异步函数式：    // const val=event.target.value    const val=this.input.value //  使用了ref后，也可这样定位到input dom节点 - 不推荐    this.setState(        ()=&gt;({inputValue:val})    );}handleBtnClick(event){    this.setState(        (preState)=&gt;({      // preState = this.state            list:[...preState.list,preState.inputValue]            ,inputValue:&#39;&#39;        }),()=&gt;{ // callback func            // 使用了ref后,可直接定位到ul dom节点，对dom进行操作 - 不推荐            console.log(this.ul.querySelectorAll(&#39;li&#39;).length)        }    );}</code></pre><h3 id="header-18">Fragment</h3><p>Fragment占位符，本质也是个组件</p><p><strong>Sample:</strong></p><pre><code class="lang-javascript">import React,{Component} from &#39;react&#39;;class TodoList extends Component{    render(){        return (            &lt;div&gt;                 &lt;input/&gt;&lt;button&gt;Submit&lt;/button&gt;                &lt;ul&gt;                    &lt;li&gt;Learn English&lt;/li&gt;                    &lt;li&gt;Learn React&lt;/li&gt;                &lt;/ul&gt;            &lt;/div&gt;        )    }}export default TodoList;</code></pre><p>=&gt; 将返回的<code>&lt;div&gt;</code>标签插入到目标节点</p><pre><code class="lang-javascript">import React,{Component,Fragment} from &#39;react&#39;;class TodoList extends Component{    render(){        return (            &lt;Fragment&gt;                 &lt;input/&gt;&lt;button&gt;Submit&lt;/button&gt;                &lt;ul&gt;                    &lt;li&gt;Learn English&lt;/li&gt;                    &lt;li&gt;Learn React&lt;/li&gt;                &lt;/ul&gt;            &lt;/Fragment&gt;        )    }}export default TodoList;</code></pre><p>=&gt; 将Fragment下的内容插入到目标节点</p><h3 id="header-19">结构化赋值</h3><pre><code class="lang-javascript">import React,{Component} from &#39;react&#39;class TodoItem extends Component{    constructor(props){        super(props);        this.handleClick=this.handleClick.bind(this) // recommend! 节约性能    }    render(){        // return &lt;li onClick={this.handleClick}&gt;{this.props.item}&lt;/li&gt;        const {item} = this.props;  // 等同于 const item = this.props.item        return &lt;li onClick={this.handleClick}&gt;{item}&lt;/li&gt;    }    handleClick(){        // console.log(this.props);        // this.props.deleteItem(this.props.index);        const {deleteItem,index}=this.props;        deleteItem(index);    }}export default TodoItem</code></pre><h3 id="header-20">函数式编程</h3><pre><code class="lang-javascript">handleInputChange(event){    // console.log(event.target);                 // event.target = dom: input    // console.log(this);                         // undefined !! , need to bind when call    // this.state.inputValue=event.target.value;  // need to use setState!!    // 1. 老式写法：    // this.setState({    //     inputValue:event.target.value    // });    // 2. 函数式：    // this.setState(()=&gt;{    //     return {    //         inputValue:event.target.value    //     }    // });    // 3. 异步函数式：    const val=event.target.value    this.setState(        ()=&gt;({inputValue:val})    );}</code></pre><pre><code class="lang-javascript">handleBtnClick(event){    // this.setState({    //     list:[...this.state.list,this.state.inputValue]    //     ,inputValue:&#39;&#39;    // })    this.setState(        (preState)=&gt;({      // preState = this.state            list:[...preState.list,preState.inputValue]            ,inputValue:&#39;&#39;        })    );}</code></pre><pre><code class="lang-javascript">handleItemDelete(index,event){    // const lst=[...this.state.list]    // lst.splice(index,1)    // this.setState({    //     list:lst      // list: this.state.list.splice(index,1) -- not recommend    // });    this.setState(        (preState)=&gt;{            const list=[...preState.list]            list.splice(index,1)            return {list}   // 等同：return {list:list}        }    );}</code></pre><h3 id="header-21">Immutable data</h3><p><strong>不可变数据</strong></p><p><img src="http://arqex.com/wp-content/uploads/2015/02/trees-300x150.png" alt="immutable data"></p><blockquote><p>Instead of updating the node, Freezer creates a new data tree starting from the top.<br>The nodes in the update path are new, but the rest are reused</p><p><a href="http://arqex.com/991/json-editor-react-immutable-data" target="_blank" rel="noopener">Refer: A JSON editor with React and Immutable data</a></p></blockquote><ol><li><p>为何需要不可变数据：性能优化, 易于调试和跟踪, 易于推测</p><ul><li>所有的变化都是由action触发，action触发在旧的state上，形成一个新的state，新旧state是两个不同的对象，这样很容易知道state发生了变化</li><li>（不需要进行深层次的遍历和比较值，只需比较两个state的引用是否一致，即可知道是否发生了变化）</li></ul></li><li><p>如何操作不可变数据：</p><ul><li><p>原生写法: <code>{...}</code>, <code>Object.assign</code></p><pre><code class="lang-javascript">  const state = {filter:&#39;completed&#39;,todos:[&#39;Learn React&#39;]};  // {}写法  const newState = {...state,todos:[...state.todos,&#39;Learn English&#39;]};  // Object.assign写法  const newState2 = object.assign({},state,{todos:[...state.todos,&#39;Learn English&#39;]});</code></pre></li><li>使用工具类: <a href="https://github.com/kolodny/immutability-helper" target="_blank" rel="noopener">immutability-helper</a><pre><code class="lang-javascript">  import update from &#39;immutability-helper&#39;;  const state = {filter:&#39;completed&#39;,todos:[&#39;Learn React&#39;]};  const newState = update(state,{todos:{$push:[&#39;Learn English&#39;]}})</code></pre></li><li><p>使用工具类: <a href="https://github.com/immerjs/immer" target="_blank" rel="noopener">immer</a></p><pre><code class="lang-javascript">  import produce from &#39;immer&#39;;  const state = {filter:&#39;completed&#39;,todos:[&#39;Learn React&#39;]};  const newState = produce(state,draftState =&gt; {      draftState.todos.push(&#39;Learn English&#39;)  })</code></pre></li><li>使用工具类: <a href="https://github.com/immutable-js/immutable-js" target="_blank" rel="noopener">immutable-js</a> (install: <code>yarn add immutable</code>)<ul><li><code>fromJS(jsObj)</code>: 将一个JS对象变成一个immutable(不可变)对象</li><li><code>immuObj.toJS()</code>: 将一个immutable对象转换回JS对象</li><li><code>immuObj.get(fieldName)</code>: 获取immutable对象里的数据</li><li><code>immuObj.set(fieldName,value)</code>/<code>immuObj.merge({k:v,k,v})</code>: 根据原始值和新值，返回一个全新的immutable对象</li></ul></li></ul></li></ol><p><strong>Sample:使用<code>immutable-js</code>维护redux store中的state对象</strong></p><ol><li><p>src/common/header/store/reducer.js: </p><pre><code class="lang-javascript"> import * as actionType from &#39;./actionType&#39;; import { fromJS } from &#39;immutable&#39;; // const defaultState={ //     focused: false // }; const defaultState = fromJS({               // 将一个JS对象变成一个immutable(不可变)对象     focused: false,     list: []                                // Note: 这里list也会转变为immutable(不可变)对象，更新数据时要注意 }) export default (state=defaultState,action)=&gt;{     if (action.type==actionType.HeaderSearchFocus){         // return { focused:true}         return state.set(&#39;focused&#39;,true)  // immutable对象的set方法，会根据原始值和新值，返回一个全新的对象     }     if (action.type==actionType.HeaderSearchBlur){         // return {focused:false}         return state.set(&#39;focused&#39;,false) // 同 return state.merge({focused:false}), merge方式合并多个更新值，再返回新的对象     }     return state; }</code></pre></li><li><p>src/common/header/index.js</p><pre><code class="lang-javascript"> const mapStateToProps=(state)=&gt;{     return {         // focused: state.focused         // focused: state.header.focused         focused: state.header.get(&#39;focused&#39;) // Note：这里state.header是一个immutable对象     } }</code></pre></li></ol><h3 id="header-22">PureComponent</h3><p>PureComponent + immutable.js</p><p>提供了一个具有浅比较的<code>shouldComponentUpdate</code>方法 =&gt; 对<code>props</code>和<code>state</code>进行浅比较，不变则不重新渲染 =&gt; 更具性能</p><pre><code class="lang-java">// import React, { Component } from &#39;react&#39;;import React, { PureComponent } from &#39;react&#39;;// class Home extends Component{//     shouldComponentUpdate(nextProps,nextState){//         if(nextProps.title!==this.props.title){//             return true//         }//         return false//     }//     return (//         &lt;div&gt;Home&lt;/div&gt;//     )// }class Home extends PureComponent{    return (        &lt;div&gt;Home&lt;/div&gt;    )}const mapStateToProps=(state)=&gt;{    return {        title: state.home.title    }}export default connect(mapStateToProps,null)(Home);</code></pre><h3 id="header-23">Context API</h3><ul><li>React 16.3公布的新特性（实际早就存在且应用了，如redux）</li><li>可用于解决组件间通讯问题 </li><li><a href="https://reactjs.org/docs/context.html#when-to-use-context" target="_blank" rel="noopener">when to use context</a></li></ul><p><strong>使用：</strong></p><ul><li><code>React.createContext</code><pre><code class="lang-javascript">  const MyContext = React.createContext(defaultValue);</code></pre></li><li><code>Context.Provider</code><pre><code class="lang-javascript">  &lt;MyContext.Provider value={/* some value */}&gt;</code></pre></li><li><code>Context.Consumer</code><pre><code class="lang-javascript">  &lt;MyContext.Consumer&gt;    {value =&gt; /* render something based on the context value */}  &lt;/MyContext.Consumer&gt;</code></pre></li></ul><p><strong>Sample:</strong></p><pre><code class="lang-java">const TheamContext = React.createContext(&#39;light&#39;);class App extends Component{    render(){        &lt;ThemeContext.Provider value=&#39;dark&#39;&gt;            &lt;ThemedButton/&gt;        &lt;/ThemeContext.Provider&gt;    }}class ThemedButton extends Component{    render(){        &lt;ThemeContext.Consumer&gt;            { (theme) =&gt; (&lt;button&gt;{theme}&lt;/button&gt;) }        &lt;/ThemeContext.Consumer&gt;    }}</code></pre><p>=&gt; <code>&lt;button&gt;dark&lt;/button&gt;</code></p><h3 id="header-24">Virtual Dom</h3><ul><li>JSX的运行基础，本质为JS对象（eg:<code>[tag,props,children]</code>），用来描述真实Dom</li><li><p><code>JSX</code> =&gt; <code>React.createElement</code> =&gt; <code>虚拟Dom</code> =&gt; <code>真实Dom</code></p><pre><code class="lang-javascript">  // JSX:  &lt;div id=&#39;abc&#39;&gt;&lt;span&gt;Hello World&lt;/span&gt;&lt;/div&gt;  // 等价于：  span=React.createElement(&#39;span&#39;,{},&#39;Hello World&#39;)  div=React.createElement(&#39;div&#39;,{&#39;id&#39;:&#39;abc&#39;},span)</code></pre></li><li>虚拟DOM树，计算<code>Diff</code>：<ul><li>两个假设前提：<ul><li>组件的DOM结构是相对稳定的</li><li>类型相同的兄弟节点可以被唯一标识</li></ul></li><li><code>Diff</code>算法：<ul><li>广度优先分层比较新旧虚拟Dom树</li><li>节点的key属性，作为唯一标识，用于定位比较新旧虚拟Dom树节点</li><li>同层，节点顺序变化，则交换位置</li><li>同层，节点类型变化，则删除该节点和其子节点，重新创建</li></ul></li><li>总体平均算法复杂度可达到: <code>O(n)</code></li></ul></li><li>优点：<ul><li>性能提升<ul><li>减少了真实Dom的创建和对比，使用虚拟Dom（即JS对象）创建和对比损耗小的多</li><li>逐（同）层比对发现节点类型不同时，则不会再往下比对，直接废弃掉，用重新生成的替换掉它，减少比对</li><li><code>setState</code>是异步的，可方便将多次间隔短的<code>setState</code>合并到一次，减少虚拟Dom比对的次数</li></ul></li><li>使得跨端应用得以实现，eg:<ul><li>React: 虚拟Dom -&gt; 浏览器真实Dom</li><li>React Native： 虚拟Dom -&gt; 原生应用的组件 </li></ul></li></ul></li><li>注：节点通过key定位比对，所以尽量保证用稳定的值作为key，不推荐使用index作为key</li></ul><p><strong>引入虚拟Dom性能提升分析</strong></p><ul><li>不使用<code>Virtual Dom</code>的处理过程:<ol><li>数据 state ＋ 模版 jsx =&gt; 生成真实Dom，渲染显示</li><li>数据 state 发生改变</li><li>数据 state ＋ 模版 jsx =&gt; 生成真实Dom，替换原来的Dom，渲染显示</li></ol></li><li>＝&gt; 缺陷：<ul><li>第一次生成了一个完整的Dom片段</li><li>第二次生成了一个完整的Dom片段</li><li>第二次的Dom替换第一次的Dom</li><li>-&gt; 耗性能</li></ul></li><li>=&gt; 改良：<ul><li>第一次：数据 ＋ 模版 =&gt; 生成真实Dom</li><li>第二次：数据 ＋ 模版 =&gt; 生成真实Dom，不直接替换原始Dom，而是和原来的Dom进行<code>Diff</code>比对，找出变化元素，替换变化元素</li><li>-&gt; 性能提升不明显</li></ul></li><li>=&gt; 进一步，引入<code>Virtual Dom</code>, eg:<ul><li>真实Dom: <code>&lt;div id=&#39;abc&#39;&gt;&lt;span&gt;Hello World&lt;/span&gt;&lt;/div&gt;</code></li><li>虚拟Dom(本质是JS对象): <code>[&#39;div&#39;,{&#39;id&#39;:&#39;abc&#39;},[&#39;span&#39;,{},&#39;Hello World&#39;]]</code></li><li>第一次：数据 ＋ 模版 =&gt; 生成虚拟Dom，用虚拟Dom的结构生成真实Dom</li><li>第二次：数据 ＋ 模版 =&gt; 生成新的虚拟Dom，与原来的虚拟Dom进行<code>Diff</code>比对，找出变化部分，改变真实Dom对应的内容</li><li>-&gt; 极大的提升了性能：减少了真实Dom的创建和对比，而使用虚拟Dom（即JS对象）创建和对比损耗小的多</li></ul></li></ul><h3 id="header-25">组件生命周期</h3><p><a href="https://reactjs.org/docs/react-component.html" target="_blank" rel="noopener">React Component Doc</a></p><p><img src="/2019/08/15/component-lifecycle.jpg" alt="Component Lifecycle"><br>(source: <a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noopener">http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/</a>)</p><p><code>react-async-component-lifecycle-hooks</code>: 在某一时刻，组件会自动调用执行的函数</p><p><strong>Mounting生命周期：</strong></p><ol><li><code>constructor()</code><ul><li>用于初始化内部状态(Initialization: setup props and states)</li><li>唯一可以直接修改state的地方(其他地方一般需使用<code>this.setState</code>方法)</li></ul></li><li><code>componentDidMount()</code><ul><li>组件创建渲染完成后调用</li><li>只执行一次</li><li>典型场景：获取外部资源</li></ul></li><li><code>componentWillUnMount()</code><ul><li>组件移除时被调用</li><li>典型场景：资源释放</li></ul></li></ol><p><strong>Updation生命周期</strong></p><ol><li><code>static getDerivedStateFromProps(props, state)</code><ul><li>React 16.3新引入，取代原<code>componentWillReceiveProps</code>应用场景</li><li>用于从props获取值给state</li><li>尽量不要使用：维护两者状态一致性会增加复杂度</li><li>典型场景：表单控件获取默认值</li></ul></li><li><code>shouldComponentUpdate(nextProps, nextState)</code> =&gt; return true/false<ul><li>决定<code>Virtual Dom</code>是否要重绘（是否继续执行后面的Updation生命周期）</li><li>一般可由<code>PureComponent</code>自动实现</li><li>典型场景：性能优化</li></ul></li><li><code>render()</code></li><li><code>getSnapshotBeforeUpdate(prevProps, prevState)</code> =&gt; 返回值会传递给<code>componentDidUpdate</code><ul><li>React 16.3新引入，取代原<code>componentWillUpdate</code>应用场景</li><li>在组件state已更新，React更新D­O­M和refs前被调用</li><li>典型场景：获取更新前DOM状态</li></ul></li><li><code>componentDidUpdate(prevProps, prevState, snapshot)</code><ul><li>React更新D­O­M和refs完成后调用</li><li>典型场景：页面需要根据props变化重新获取数据</li></ul></li></ol><p><strong>Sample:</strong></p><ul><li>props change （父组件重新render时，传递给子组件的属性发生了变化，触发子组件Updation周期）: <ul><li><code>getDerivedStateFromProps</code> </li><li><code>shouldComponentUpdate</code> -&gt; return true/false to continue</li><li><code>render</code><ul><li><code>getSnapshotBeforeUpdate</code></li><li>React 更新 ­D­O­M 和 refs</li><li><code>componentDidUpdate</code></li></ul></li></ul></li><li>states change（组件state发生改变，触发组件Updation周期）:<ul><li><code>shouldComponentUpdate</code> -&gt; return true/false to continue</li><li><code>render</code><ul><li><code>getSnapshotBeforeUpdate</code></li><li>React 更新 ­D­O­M 和 refs</li><li><code>componentDidUpdate</code></li></ul></li></ul></li></ul><h2 id="header-26">样式</h2><h3 id="header-27">CSS3过渡动画</h3><pre><code class="lang-java">import React,{Component,Fragment} from &#39;react&#39;import &#39;./style.css&#39;class ToggleButton extends Component{    constructor(props){        super(props)        this.state={            show:false        }        this.handleToggleBtnClick=this.handleToggleBtnClick.bind(this)    }    render(){        return (            &lt;Fragment&gt;                &lt;div className={this.state.show?&#39;hideArea&#39;:&#39;showArea&#39;}&gt;Hello World&lt;/div&gt;                &lt;button onClick={this.handleToggleBtnClick}&gt;Toggle&lt;/button&gt;            &lt;/Fragment&gt;        )    }    handleToggleBtnClick(){        this.setState(            (preState)=&gt;({                show:!preState.show            })        );    }}export default ToggleButton</code></pre><pre><code class="lang-css">.hideArea{    opacity: 0;    color: red;    transition: all 1s ease-in;}.showArea{    opacity: 1;    color: green;    transition: all 1s ease-in;}</code></pre><p>or</p><pre><code class="lang-css">.hideArea{    /*opacity: 0;    color: red;    transition: all 1s ease-in;*/    animation: hide-item 2s ease-in forwards;}.showArea{    /*opacity: 1;    color: green;    transition: all 1s ease-in;*/    animation: show-item 2s ease-in forwards;}@keyframes hide-item{    0% {        opacity: 1;        color: red;    }    50% {        opacity: 0.5;        color: green;    }    100% {        opacity: 0;        color: blue;    }}@keyframes show-item{    0% {        opacity: 0;        color: blue;    }    50% {        opacity: 0.5;        color: green;    }    100% {        opacity: 1;        color: red;    }}</code></pre><h3 id="header-28">react-transition-group</h3><p>使用第三方模块<code>react-transition-group</code>，方便实现更复杂动画</p><p><a href="https://github.com/reactjs/react-transition-group" target="_blank" rel="noopener">Github</a> | <a href="https://reactcommunity.org/react-transition-group/" target="_blank" rel="noopener">Doc</a></p><ol><li><p>install:</p><pre><code class="lang-bash"> # npm $ npm install react-transition-group --save # yarn $ yarn add react-transition-group</code></pre></li><li><p>CSSTransaction</p><pre><code class="lang-java"> import React,{Component,Fragment} from &#39;react&#39; import { CSSTransition } from &#39;react-transition-group&#39; import &#39;./style.css&#39; class ToggleButtonCSSTransition extends Component{     constructor(props){         super(props)         this.state={             show:true         }         this.handleToggleBtnClick=this.handleToggleBtnClick.bind(this)     }     render(){         return (             &lt;Fragment&gt;                 &lt;button onClick={this.handleToggleBtnClick}&gt;CSSTransition&lt;/button&gt;                 &lt;CSSTransition                     in={this.state.show}                     timeout={1000}                     classNames=&#39;node&#39;   // note: It&#39;s `classNames`,not `className`, for css style class prefix                     appear={true}        // also use the animation when first load                     unmountOnExit       // if set,the dom will be removed when hide                     onEntered={(el)=&gt;{el.style.color=&#39;blue&#39;}} // hock func, trigger when enter finished                 &gt;                     &lt;div&gt;Hello World&lt;/div&gt;                 &lt;/CSSTransition&gt;             &lt;/Fragment&gt;         )     }     handleToggleBtnClick(){         this.setState(             (preState)=&gt;({                 show:!preState.show             })         );     } } export default ToggleButtonCSSTransition</code></pre></li><li><p>TransactionGroup (for batch components)</p><pre><code class="lang-java"> import React,{Component,Fragment} from &#39;react&#39; import { CSSTransition,TransitionGroup } from &#39;react-transition-group&#39; import &#39;./style.css&#39; class ToggleButtonTransitionGroup extends Component{     constructor(props){         super(props)         this.state={             list:[&#39;Hello&#39;]         }         this.handleToggleBtnClick=this.handleToggleBtnClick.bind(this)     }     render(){         return (             &lt;Fragment&gt;                 &lt;button onClick={this.handleToggleBtnClick}&gt;TransitionGroup&lt;/button&gt;                 &lt;TransitionGroup&gt;                     {                         this.state.list.map((item,index)=&gt;{                             return (                                 &lt;CSSTransition key={index}                                      timeout={1000}                                      classNames=&#39;node&#39;                                      appear={true}                                     onEntered={(el)=&gt;{el.style.color=&#39;blue&#39;}}                                 &gt;                                     &lt;div&gt;{item}&lt;/div&gt;                                 &lt;/CSSTransition&gt;                             )                         })                     }                 &lt;/TransitionGroup&gt;             &lt;/Fragment&gt;         )     }     handleToggleBtnClick(){         this.setState(             (preState)=&gt;({                 list:[...preState.list,&quot;item&quot;]             })         );     } } export default ToggleButtonTransitionGroup</code></pre></li><li><p>css style class:</p><pre><code class="lang-css"> /* enter &amp; appear lifecycle*/ .node-enter,.node-appear {     opacity: 0; }  .node-enter-active,.node-appear-active{     opacity: 1;     transition: opacity 1s ease-in; }  .node-enter-done,.node-appear-done {     opacity: 1; }  /* exit lifecycle*/ .node-exit{     opacity: 1; }   .node-exit-active{     opacity: 0;     transition: opacity 1s ease-in; } .node-exit-done {     opacity: 0; }</code></pre></li></ol><h3 id="header-29">styled-components</h3><p>不管是哪个子组件，直接import一个css文件，<br>该文件中的样式会作用于所有组件，即是一个全局的样式，无法区分区别<br>=&gt; <code>styled-components</code>库：css模块化（css =&gt; js）</p><p><a href="https://github.com/styled-components/styled-components" target="_blank" rel="noopener">Github</a><br><a href="https://www.styled-components.com/docs" target="_blank" rel="noopener">Docs</a></p><p>install： <code>yarn add styled-components</code></p><p><strong>Sample: 全局Style</strong></p><ol><li><p>style.js</p><pre><code class="lang-javascript"> import { createGlobalStyle } from &#39;styled-components&#39;; // 全局样式 const GlobalStyle = createGlobalStyle`     // reset.css: 让各标签的默认样式在所有浏览器上的显示统一     html, body, div, span, applet, object, iframe,     h1, h2, h3, h4, h5, h6, p, blockquote, pre,     a, abbr, acronym, address, big, cite, code,     del, dfn, em, img, ins, kbd, q, s, samp,     small, strike, strong, sub, sup, tt, var,     b, u, i, center,     dl, dt, dd, ol, ul, li,     fieldset, form, label, legend,     table, caption, tbody, tfoot, thead, tr, th, td,     article, aside, canvas, details, embed,      figure, figcaption, footer, header, hgroup,      menu, nav, output, ruby, section, summary,     time, mark, audio, video {         margin: 0;         padding: 0;         border: 0;         font-size: 100%;         font: inherit;         vertical-align: baseline;     }     /* HTML5 display-role reset for older browsers */     article, aside, details, figcaption, figure,      footer, header, hgroup, menu, nav, section {         display: block;     }     body {         line-height: 1;     }     ol, ul {         list-style: none;     }     blockquote, q {         quotes: none;     }     blockquote:before, blockquote:after,     q:before, q:after {         content: &#39;&#39;;         content: none;     }     table {         border-collapse: collapse;         border-spacing: 0;     } `; export { GlobalStyle }</code></pre></li><li><p>App.js</p><pre><code class="lang-java"> import React, { Fragment } from &#39;react&#39;; import { GlobalStyle } from &#39;./style.js&#39;; function App() {   return (     &lt;Fragment&gt;         &lt;GlobalStyle/&gt;         &lt;div&gt; Hello World &lt;/div&gt;     &lt;/Fragment&gt;   ); } export default App;</code></pre></li></ol><p><strong>Sample:局部style</strong></p><ol><li><p>style.js</p><pre><code class="lang-javascript"> import styled from &#39;styled-components&#39;; import logoPic from &#39;../../statics/logo.png&#39;  // import pic! export const HeaderWrapper = styled.div`     height: 58px;     border-bottom: 1px solid #f0f0f0; ` // export const Logo = styled.a.attrs({ href:&#39;/&#39; })` export const Logo = styled.a`     position: absolute;     top: 0;     left: 0;     display: block;     width: 100px;     height: 56px;     background: url(${logoPic});    // use imported pic !     background-size: contain; ` export const NavItem = styled.div`     line-height: 56px;     padding: 0 15px;     font-size: 17px;     &amp;.left{         float: left;     }     &amp;.active{         color: #ea6f5a;     } `</code></pre></li><li><p>SimpleHeader.js:</p><pre><code class="lang-java"> import React from &#39;react&#39;; import { HeaderWrapper,Logo,NavItem} from &#39;./style&#39;; const SimpleHeader=(props)=&gt;{     return (         &lt;HeaderWrapper&gt;             &lt;Logo href=&#39;/&#39;/&gt;                 &lt;NavItem className=&quot;right&quot;&gt;登陆&lt;/NavItem&gt;                 &lt;NavItem className=&quot;right&quot;&gt;注册&lt;/NavItem&gt;         &lt;/HeaderWrapper&gt;     ) }; export default SimpleHeader;</code></pre></li></ol><h3 id="header-30">iconfont</h3><p>素材下载：<a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里</a></p><p>使用<code>styled-components</code> ＋ <code>iconfont</code>:</p><ol><li><p>全局样式IconGlobalStyle: src/statics/iconfont/icon.js</p><pre><code class="lang-javascript"> import { createGlobalStyle } from &#39;styled-components&#39;; const IconGlobalStyle = createGlobalStyle`   @font-face {font-family: &quot;iconfont&quot;;     /* Note: 更新路径 */     src: url(&#39;./iconfont.eot?t=1566970427492&#39;); /* IE9 */     src: url(&#39;./iconfont.eot?t=1566970427492#iefix&#39;) format(&#39;embedded-opentype&#39;), /* IE6-IE8 */     url(&#39;data:application/x-font-woff2;charset=utf-8;base64,d09GMgABAAAAAAR4AAsAAAAACVAAAAQsAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHEIGVgCDMgqFaIUsATYCJAMUCwwABCAFhG0HTxs/CMieA25rTF6pQqUmQ7qib3Y+H2JT/x0HLTummpp7ks1pcmQ0QkeY2VezifsXsfBQ3f5te5NlgQR6wAF+gaIoSjALwJIwcMixXU7QlltiNehs8L+LS9PU8YDVtbOIZSIe0Fq6FcoEsBWgWKyVLx2/U2nA//rC9sPYTcRhXA8EwNikImN9ay9kIrCJAMihe1TIMS2xpJCQEWE5xxaQGxK5uVHYDbjd/X3yoYYMCKQE2Nm517lR+cZ+btA1oTWYRVHg9WcGIJ0EUEAqQARy5lp9qB9NRTFjvqgSwMgEQl/T8j8v+9wITShckZzBf3gAQQlEIC2AdCiHr4yJ8HksRoDA5/kIUPi8DAEBPjf4N0YqcesZoBlwFkhllLF9zqBEFV14uDIMME+WxynkZWKW37Q90XK6Fr/8Njl69OolzKGgJNbGM0+fo9ResXZdwZYjwxOuo0eXY8fWI0fmw4cnCbN9dpyd89BLb0q2v7R23c1JfS+u+WQEsw/tZV5l+oz7bOyRiU71Y+VmgAVbz27aS9Y6HGvdP17a984LWDPl5k2ELFcA40tQ7nmO9W3KOXq4Z6UO4ds5Xt+UcP7LTZl5zxHH84cyjh6uMU2x23laTm12dm1Gvv2WWFIza2Z0T9ydUTk5UXc+9bTzsXGVD61b99Zrba3fv/ba98KFpyrr6kQdG0ufpieOJyE8deKEiIpsVvR0is2mLBeeflpYBkVP+w66jMosfuHUGNvEkdu3R3pMxijn7aOxXms4kFh7gA8P1aMD5R19QnW/Xn5M/IegtaUwg0hV6UaSXR82W2mpLL48x2HtmjTun8lxP8XZQP/YAL1pNn6ig2LYCt9NW3bDtj7npDF/9Ix8SKla/EnX9JEVZo3gZiNj1pR1DOUflt8w6dRyZ0LpW8miN+qa+L//+KJ31MNDsd+3DEl30CYgVK6jlUDoPAUQgp6n836yVdgul1bNHVH6m6xc3b4Tt+SUuO4QIupJ8afIUJv3S/Fq1ommAOikoldjrp4rUVXAi+H/PRU/knO0s/3Ix9XOBwjZuBAE4aYBJYtFi/hUkChyIYysApgUDScrxjBRpAwBkOxaBoiRXgfBcOuAGmkPWsSfAcl430GYkUGBsceYcyriQ2c1Jlct7o7sXxqpu4yAhgwW8wq7uWehTzWjApdo52ZQD0RmpWcmEw08wM0+9gQXebItS4vUTMMfWc/cjPt8RuSgaQxwl5U+37IGizMytLxnSncZfjA1TJzKwrlF6rdUJJ2LIUCjzS0s9fPdOI+FfFRmSU2D1o4zBemTR8qSLrMGukEaqFVzLvODFvHIZrFo/DqNyeAXqZ41cz4YNUQazF82gHOxpJvfIjyoWAbXSKsrTR9f7r/GYwAMWCyFQCgRiUTCoOz8ziC3MrNyCpimBjxudUCni4QqVVqwUPf5AA==&#39;) format(&#39;woff2&#39;),     url(&#39;./iconfont.woff?t=1566970427492&#39;) format(&#39;woff&#39;),     url(&#39;./iconfont.ttf?t=1566970427492&#39;) format(&#39;truetype&#39;), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */     url(&#39;./iconfont.svg?t=1566970427492#iconfont&#39;) format(&#39;svg&#39;); /* iOS 4.1- */   }   .iconfont {     font-family: &quot;iconfont&quot; !important;     font-size: 16px;     font-style: normal;     -webkit-font-smoothing: antialiased;     -moz-osx-font-smoothing: grayscale;   } ` export { IconGlobalStyle }</code></pre></li><li><p>App.js导入IconGlobalStyle</p><pre><code class="lang-java"> import React, { Fragment } from &#39;react&#39;; import { IconGlobalStyle } from &#39;./statics/iconfont/icon.js&#39; function App() {   return (     &lt;Fragment&gt;         &lt;IconGlobalStyle/&gt;         &lt;SimpleHeader/&gt;       &lt;/Fragment&gt;   ); } export default App;</code></pre></li><li><p>SimpleHeader.js使用icon</p><pre><code class="lang-java"> import React from &#39;react&#39;; const SimpleHeader=(props)=&gt;{     return (         &lt;div&gt;             &lt;a href=&quot;#&quot;&gt;&lt;span className=&quot;iconfont&quot;&gt;&amp;#xe66f;&lt;/span&gt;写文章&lt;/a&gt;         &lt;/div&gt;     ) }; export default SimpleHeader;</code></pre></li></ol><h3 id="header-31">UI组件库</h3><ul><li>AntD(Ant Design): React UI 组件库 =&gt; recommend!</li><li>Material UI</li><li>Semantic UI</li></ul><p><strong>Sample:AntD</strong></p><p><code>yarn add antd</code></p><pre><code class="lang-java">import React,{ Component } from &#39;react&#39;;import &#39;antd/dist/antd.css&#39;;import { Input,Button,List,Icon } from &#39;antd&#39;;class AntdTodoList extends Component {    render(){        return (            &lt;div style={{margin:'20px auto',maxWidth:'600px'}}&gt;                &lt;div style={{padding:'20px 0px',textAlign:'center'}}&gt;                    &lt;h2&gt;TodoList(with Antd UI):&lt;/h2&gt;                    &lt;Input                         placeholder=&#39;Enter todo item here&#39;                         style={{width:'500px',marginRight:'10px'}}                    /&gt;                    &lt;Button type=&quot;primary&quot;}&gt;Submit&lt;/Button&gt;                &lt;/div&gt;                &lt;List                   bordered                   dataSource={this.state.list}                  renderItem={(item,index) =&gt; (                    &lt;List.Item&gt;{item}&lt;/List.Item&gt;                  )}                /&gt;            &lt;/div&gt;        )    }}</code></pre><h2 id="header-32">Redux</h2><blockquote><p>独立于UI框架的通用JS状态管理框架，即数据层框架</p><p>不依赖于React，可单独使用:</p><p>  React: 本身实际上只是个视图层框架;<br>  Redux = Reducer + Flux</p><p><a href="https://css-tricks.com/learning-react-redux/" target="_blank" rel="noopener">Refer: Leveling Up with React: Redux</a>  </p></blockquote><pre><code>Flux架构（单项数据流）：Action -&gt; Store -&gt; View  ^                 |  |_________________|</code></pre><p><strong>Redux特性：</strong></p><ul><li>所有状态放在唯一的一个Store中（Single Source of Truth）</li><li>可预测性（state &amp; action =&gt; new state）</li><li>纯函数更新Store（reducer函数）</li></ul><p><img src="https://css-tricks.com/wp-content/uploads/2016/03/redux-article-3-03.svg" alt="without and with redux"></p><h3 id="header-33">使用</h3><ul><li>安装：<code>yarn add redux</code></li><li>Chrome 辅助调试插件：redux Devtools</li><li>设计理念<ul><li>将组件中的数据都放到一个公用的存储区Store存储管理</li><li>当某个组件改变数据，其他组件会感知到Store中数据的变化，从而进行更新，以此实现组件间的数据传递问题</li><li><img src="/2019/08/15/redux_flow.jpg" alt="Redux Flow"></li></ul></li><li>核心API:<ul><li>创建 store: <ul><li><code>import { createStore } from &#39;redux&#39;;</code></li><li><code>export default createStore(reducer)</code></li></ul></li><li>创建reducer: <ul><li><code>export default (state=defaultState,action) =&gt; { /* ... */ return state}</code></li></ul></li><li>组件中使用:<ul><li>获取store中数据: <code>store.getState()</code></li><li>派发action给store: <code>store.dispatch(action)</code></li><li>订阅store的改变，触发回调函数: <code>store.subscribe(callbackFunc)</code></li></ul></li></ul></li><li>注意：<ul><li>整个应用<code>store</code>是唯一的</li><li>只有<code>store</code>能改变自己的内容(即state),<code>reducer</code>只是返回一个state给store，最终由store来更新</li><li><code>reducer</code>必须是一个纯函数(确定的输入输出，即没有跟时间有关的操作／异步操作等；且不会有任何副作用，如不会对接收的参数做修改)</li></ul></li></ul><h3 id="header-34">Sample:TodoList</h3><ol><li><p>Store (store/index.js)</p><pre><code class="lang-javascript"> import { createStore } from &#39;redux&#39;; import reducer from &#39;./reducer&#39;; const store = createStore(reducer); export default store;</code></pre></li><li><p>Reducer (store/reducer.js)</p><pre><code class="lang-javascript"> const defaultState={     inputValue: &#39;&#39;,     list: [] } export default (state=defaultState,action) =&gt; {     // console.log(state,action)     if (action.type === &#39;change_input_value&#39;){         /*              reducer可以接收state，但不可以修改state，所以深拷贝了一份             将新的state返回给Store，由Store更新Store中的state         */         const newState = JSON.parse(JSON.stringify(state));         newState.inputValue = action.value;         return newState;     }     if (action.type === &#39;submit_input_value&#39;){         const newState = JSON.parse(JSON.stringify(state));         newState.list.push(newState.inputValue);         newState.inputValue=&#39;&#39;;         return newState     }     if (action.type === &#39;delete_list_item&#39;){         const newState = JSON.parse(JSON.stringify(state));         newState.list.splice(action.value,1);         return newState     }     return state; }</code></pre></li><li><p>Component (AntdTodoList.js)</p><pre><code class="lang-java"> import React,{ Component } from &#39;react&#39;; import &#39;antd/dist/antd.css&#39;; import { Input,Button,List,Icon } from &#39;antd&#39;; import store from &#39;./store/index&#39; class AntdTodoList extends Component {     constructor(props){         super(props);         this.state=store.getState();         // this.handleInputChange=this.handleInputChange.bind(this);         // this.handleBtnClick=this.handleBtnClick.bind(this);         this.handleStoreChange=this.handleStoreChange.bind(this);         store.subscribe(this.handleStoreChange);     }     render(){         return (             &lt;div style={{margin:'20px auto',maxWidth:'600px'}}&gt;                 &lt;div style={{padding:'20px 0px',textAlign:'center'}}&gt;                     &lt;h2&gt;TodoList(with Antd UI):&lt;/h2&gt;                     &lt;Input                          placeholder=&#39;Enter todo item here&#39;                          style={{width:'500px',marginRight:'10px'}}                         value={this.state.inputValue}                         onChange={this.handleInputChange}                     /&gt;                     &lt;Button type=&quot;primary&quot; onClick={this.handleBtnClick}&gt;Submit&lt;/Button&gt;                 &lt;/div&gt;                 &lt;List                    bordered                    dataSource={this.state.list}                   renderItem={(item,index) =&gt; (                     &lt;List.Item                          actions={[                             &lt;Icon type=&quot;delete&quot; theme=&quot;filled&quot;                              onClick={this.handleItemDelete.bind(this,index)}/&gt;                         ]}                     &gt;                         {item}                     &lt;/List.Item&gt;                   )}                 /&gt;             &lt;/div&gt;         )     }     handleInputChange(e){         // console.log(e.target.value)         const action = {             type: &#39;change_input_value&#39;,             value: e.target.value         }         store.dispatch(action)     }     handleBtnClick(){         const action = {             type: &#39;submit_input_value&#39;         }         store.dispatch(action)     }     handleItemDelete(index){         // console.log(index)         const action = {             type: &#39;delete_list_item&#39;,             value: index         }         store.dispatch(action)     }     handleStoreChange(){         // console.log(&#39;store state changed&#39;)         this.setState(store.getState())     } } export default AntdTodoList;</code></pre></li></ol><h3 id="header-35">Sample改进：封装action</h3><ol><li><p>src/actionCreator.js 统一创建action</p><pre><code class="lang-javascript"> import * as actionType from &#39;./actionType&#39; const changeInputValueAction = (value) =&gt; ({     // type: &quot;change_input_value&quot;,     type: actionType.ChangeInputValue,     value: value }); const submitInputValueAction = () =&gt; ({     // type: &quot;submit_input_value&quot;     type: actionType.SubmitInputValue }); const deleteListItemAction = (value) =&gt; ({     // type: &quot;delete_list_item&quot;,     type: actionType.DeleteListItem,     value: value }); export {changeInputValueAction,submitInputValueAction,deleteListItemAction}</code></pre></li><li><p>src/actionType.js</p><pre><code class="lang-javascript"> const ChangeInputValue=&quot;change_input_value&quot;; const SubmitInputValue=&quot;submit_input_value&quot;; const DeleteListItem=&quot;delete_list_item&quot;; export {ChangeInputValue,SubmitInputValue,DeleteListItem}</code></pre></li><li><p>Reducer update: src/reducer.js</p><pre><code class="lang-javascript"> import * as actionType from &#39;./actionType&#39; const defaultState={     inputValue: &#39;&#39;,     list: [] } export default (state=defaultState,action) =&gt; {     //if (action.type === &#39;change_input_value&#39;){     if (action.type === actionType.ChangeInputValue){             const newState = JSON.parse(JSON.stringify(state));             newState.inputValue = action.value;             return newState;         }         // if (action.type === &#39;submit_input_value&#39;){         if (action.type === actionType.SubmitInputValue){             const newState = JSON.parse(JSON.stringify(state));             newState.list.push(newState.inputValue);             newState.inputValue=&#39;&#39;;             return newState         }         // if (action.type === &#39;delete_list_item&#39;){         if (action.type === actionType.DeleteListItem){             const newState = JSON.parse(JSON.stringify(state));             newState.list.splice(action.value,1);             return newState         }         return state;     }</code></pre></li><li><p>Component update: AntdTodoList.js</p><pre><code class="lang-java"> handleInputChange(e){     // console.log(e.target.value)     // const action = {     //     type: &#39;change_input_value&#39;,     //     value: e.target.value     // }     const action = actionCreator.changeInputValueAction(e.target.value)      store.dispatch(action) } handleBtnClick(){     // const action = {     //     type: &#39;submit_input_value&#39;     // }     const action = actionCreator.submitInputValueAction()     store.dispatch(action) } handleItemDelete(index){     // console.log(index)     // const action = {     //     type: &#39;delete_list_item&#39;,     //     value: index     // }     const action = actionCreator.deleteListItemAction(index)     store.dispatch(action) }</code></pre></li></ol><h3 id="header-36">Reducer拆分组合</h3><p>使用<code>redux</code>的<code>combineReducers</code>：组合多个<code>reducer</code>,形成一个组合的<code>state</code><br>(注：<code>dispatch</code>一个<code>action</code>时，所有<code>reducer</code>都会收到)</p><p><strong>Sample:</strong></p><ol><li><p>src/common/header/store/reducer.js:</p><pre><code class="lang-javascript"> const defaultState={     focused: false }; export default (state=defaultState,action)=&gt;{     if (action.type==&#39;HeaderSearchFocus&#39;){         return { focused:true}     }     if (action.type==&#39;HeaderSearchBlur&#39;){         return {focused:false}     }     return state; }</code></pre></li><li><p>src/store/reducer.js:</p><pre><code class="lang-javascript"> import { combineReducers } from &#39;redux&#39;; import headerReducer from &#39;../common/header/store/reducer&#39;; export default combineReducers({     header: headerReducer           // 组合多个reducer })</code></pre></li><li><p>src/common/header/index.js:</p><pre><code class="lang-javascript"> const mapStateToProps=(state)=&gt;{     return {         // focused: state.focused         focused: state.header.focused   // Note!     } }</code></pre></li></ol><h3 id="header-37">Redux中间件: Redux-thunk</h3><ul><li>Redux中间件(Middleware)：在action与store中间，对Dispatch做了一个升级封装<ul><li>在dispatcher中截获action做特殊处理后，再发送出去</li><li>即截获action &amp; 发出action</li></ul></li><li><a href="https://github.com/reduxjs/redux-thunk" target="_blank" rel="noopener">redux-thunk</a>: <ul><li>将异步请求或复杂逻辑放到action中处理</li><li>(原本action是一个具体对象，使用thunk后，action还可以是一个函数，然后在这个函数中发送异步请求 =&gt; 异步action)</li><li>install: <code>yarn add redux-thunk</code></li></ul></li></ul><p><strong>Sample:组件获取初始化数据（componentDidMount时触发）</strong></p><ul><li><p>不使用redux-thunk：直接发送异步请求，响应后再发送action给store通知进行后续处理</p><pre><code class="lang-javascript">  // 1. src/actionCreator.js  const initialListItemAction = (value) =&gt; ({      type: actionType.InitialListItem,      value: value  })  // 2. src/actionType.js  const InitialListItem=&quot;initialListItem&quot;;  export {ChangeInputValue,SubmitInputValue,DeleteListItem,InitialListItem}  // 3. src/reducer.js  // ...  if (action.type === actionType.InitialListItem){      const newState = JSON.parse(JSON.stringify(state));      newState.list=action.value;      return newState;  }  // ...  // 4. AntdTodoList.js  import axios from &#39;axios&#39;  // ...  componentDidMount(){      // axios.get(&#39;/todoItems.json&#39;).then((response)=&gt;{      axios.get(&#39;/api/todoItems.json&#39;).then((response)=&gt;{          const data = response.data;          const action = actionCreator.initialListItemAction(data);          store.dispatch(action)      });  }</code></pre></li><li><p>使用redux-thunk: 发送异步action，响应后再发送一个action给store通知进行后续处理</p><pre><code class="lang-javascript">  // 1. store中增加这个中间件: src/index.js  import { createStore, applyMiddleware } from &#39;redux&#39;;  import reducer from &#39;./reducer&#39;;  import thunk from &#39;redux-thunk&#39;;  const store = createStore(reducer,applyMiddleware(thunk));  export default store;  // 2. src/actionCreator.js  import axios from &#39;axios&#39;  const initialListItemAction = (value) =&gt; ({      type: actionType.InitialListItem,      value: value  })  const getListItems = ()=&gt;{      return (dispatch)=&gt;{          // axios.get(&#39;/todoItems.json&#39;).then((response)=&gt;{          axios.get(&#39;/api/todoItems.json&#39;).then((response)=&gt;{                  const data=response.data;              // console.log(data);              const action=initialListItem(data);              dispatch(action);          }).catch((err)=&gt;{              // console.log(err);              const data=[&quot;Load Initial Items Fail!:&quot;+err]              const action=initialListItemAction(data);              dispatch(action);          })      }  }  export {changeInputValueAction,submitInputValueAction,deleteListItemAction,      initialListItemAction,getListItems}  // 3. src/actionType.js &amp; src/reducer.js 同上  // 4. AntdTodoList.js  componentDidMount(){      // axios.get(&#39;/todoItems.json&#39;).then((response)=&gt;{      // axios.get(&#39;/api/todoItems.json&#39;).then((response)=&gt;{      //     const data = response.data;      //     const action = actionCreator.initialListItemAction(data);      //     store.dispatch(action)      // });      const action = actionCreator.getListItems();      store.dispatch(action)  }</code></pre></li></ul><p><strong>注：</strong></p><p>测试时，对于通过<code>create-react-app</code>创建启动的项目，可临时在项目的<code>public</code>目录下临时做个可访问数据,<br>例如：<code>public/api/todoItems.json</code>，可通过<code>http://localhost:3000/api/todoItems.json</code>直接访问文件内容</p><pre><code class="lang-json">[&quot;Reading&quot;,&quot;Watching&quot;]</code></pre><p>也可使用Charles实现本地数据mock</p><h3 id="header-38">Redux中间件: Redux-saga</h3><p><a href="https://github.com/redux-saga/redux-saga" target="_blank" rel="noopener">redux-saga</a></p><ul><li>也是做异步代码拆分的一个中间件，可代替<code>redux-thunk</code></li><li>相较于<code>redux-thunk</code>要复杂的多，有较多的API，可将异步代码完全的拆分到一个单独的文件中，在处理大型项目中，可能要优于<code>redux-thunk</code> (redux-thunk要简单的多，只是让action不仅仅是一个对象，还可以是一个函数)</li><li>install: <code>yarn add redux-saga</code></li></ul><p><strong>Sample:</strong></p><ol><li><p>store中增加这个中间件: src/index.js</p><pre><code class="lang-javascript"> import { createStore, applyMiddleware } from &#39;redux&#39;; import reducer from &#39;./reducer&#39;; import createSagaMiddleware from &#39;redux-saga&#39; import sagas from &#39;./sagas&#39; const sagaMiddleware = createSagaMiddleware() const store = createStore(reducer,applyMiddleware(sagaMiddleware)); sagaMiddleware.run(sagas) export default store;</code></pre></li><li><p>src/sagas.js: 截获指定action，发送异步请求，有响应后再发送action给store通知处理 &lt;= generator &amp; yield （协程）</p><pre><code class="lang-javascript"> import { takeEvery,put } from &#39;redux-saga/effects&#39; import * as actionType from &#39;./actionType&#39; import * as actionCreator from &#39;./actionCreator&#39; import axios from &#39;axios&#39; // 注：必须是generator函数 function* mySaga() {          yield takeEvery(actionType.GetSagaListItems, getListItems); } function* getListItems(){     console.log(&quot;saga: getListItems&quot;)     try{         // const response = yield axios.get(&#39;/todoItems.json&#39;);         const response = yield axios.get(&#39;/api/todoItems.json&#39;);         const data = response.data;         const action=actionCreator.initialListItemAction(data);         yield put(action);     }catch(err){         const data=[&quot;Load Initial Items Fail!:&quot;+err]         const action=actionCreator.initialListItemAction(data);         yield put(action);     } } export default mySaga;</code></pre></li><li>AntTodoList.js : 发送一个action给store（会被中间件saga截获到处理）<pre><code class="lang-javascript"> componentDidMount(){     const action = actionCreator.getSagaListItems();     store.dispatch(action) }</code></pre></li><li><p>src/actionCreator.js</p><pre><code class="lang-javascript"> const initialListItemAction = (value) =&gt; ({     type: actionType.InitialListItem,     value: value || [] }) const getSagaListItems=() =&gt; ({     type: actionType.GetSagaListItems }); export {changeInputValueAction,submitInputValueAction,deleteListItemAction,     initialListItemAction, getSagaListItems}</code></pre></li><li><p>src/actionType.js</p><pre><code class="lang-javascript"> const GetSagaListItems=&quot;getSagaListItems&quot;;    // for redux-saga export {ChangeInputValue,SubmitInputValue,DeleteListItem,         InitialListItem,GetSagaListItems}</code></pre></li></ol><h3 id="header-39">React-redux</h3><p>React中使用Redux</p><ul><li>一个第三方模块(帮助在react中更加方便地使用redux),内部使用了<code>React</code>的<code>Context API</code></li><li><code>Provider</code>(使用<code>Context.Provider</code>): 将store提供给Provider下的所有组件</li><li><code>connect</code>(使用<code>Context.Consumer</code>): 连接作用，映射store信息给Component，工作原理：高阶组件，重新封装返回新的Component</li><li>( <code>Component</code> + <code>store</code> =&gt; <code>new Component</code> )</li></ul><p><strong>Sample：分离业务逻辑和组件</strong></p><ul><li>通过<code>react-redux</code>的<code>Provider</code>传递<code>store</code>给Component</li><li>将TodoList优化为UI Component </li><li>定义store的state和dispatch映射组件props的规则</li><li>通过<code>react-redux</code>的<code>connect</code>, 获取<code>store</code>, 结合定义的连接规则，封装组件和业务逻辑，返回一个新的组件</li><li>(<code>UI Component</code> + <code>mapStateToProps,mapDispatchToProps</code> =&gt; <code>Container Component</code>)</li></ul><ol><li><p><code>Provider</code>提供器: 将store提供给Provider下的所有组件</p><pre><code class="lang-java"> import { Provider } from &#39;react-redux&#39; import store from &#39;./store/index&#39; import TodoListRd from &#39;./TodoListRd&#39; function App() {     return (         {/* store和Provider做了关联，则Provider下的组件都有能力获取到store */}         &lt;Provider store={store}&gt;             &lt;TodoListRd/&gt;         &lt;/Provider&gt;     ) }</code></pre></li><li><p>TodoList优化为UI Component </p><pre><code class="lang-javascript"> import React,{Component} from &#39;react&#39; import &#39;antd/dist/antd.css&#39;; import { Input,Button,List,Icon } from &#39;antd&#39;; // UI组件： const TodoListRd = (props)=&gt;{     const { inputValue, list, handleInputChange, handleBtnClick, handleItemDelete } = props;     return (         &lt;div style={{margin:'20px auto',maxWidth:'600px'}}&gt;             &lt;div style={{padding:'20px 0px',textAlign:'center'}}&gt;                 &lt;h2&gt;TodoList(with Antd UI):&lt;/h2&gt;                 &lt;Input                      placeholder=&#39;Enter todo item here&#39;                      style={{width:'500px',marginRight:'10px'}}                     value={inputValue}                     onChange={handleInputChange}                 /&gt;                 &lt;Button type=&quot;primary&quot; onClick={handleBtnClick}&gt;Submit&lt;/Button&gt;             &lt;/div&gt;             &lt;List                bordered                dataSource={list}               renderItem={(item,index) =&gt; (                 &lt;List.Item                      actions={[                         &lt;Icon                              type=&quot;delete&quot; theme=&quot;filled&quot;                              onClick={()=&gt;{                                 // console.log(&quot;del:&quot;,index,list[index])                                 handleItemDelete(index)                             }}                         /&gt;                     ]}                 &gt;                     {item}                 &lt;/List.Item&gt;               )}             /&gt;         &lt;/div&gt;     ) }</code></pre></li><li><p>定义连接规则，使用<code>connect</code>将UI组件与业务逻辑相结合，返回一个<code>Container</code>组件</p><pre><code class="lang-javascript"> import { connect } from &#39;react-redux&#39; import * as actionCreator from &#39;./store/actionCreator&#39; // 定义连接规则 // 规则1: Map store state to Component props (将store的state映射给组件的props) const mapStateToProps=(state)=&gt;{     return {         inputValue: state.inputValue,         list: state.list     } } // 规则2: Map store dispatch to Component props (将store的dispatch方法挂载给组件的props) const mapDispatchToProps=(dispatch)=&gt;{     return {         handleInputChange(e){             const action = actionCreator.changeInputValueAction(e.target.value)              dispatch(action)         },         handleBtnClick(){             const action = actionCreator.submitInputValueAction()             dispatch(action)         },         handleItemDelete(index){             const action = actionCreator.deleteListItemAction(index)             dispatch(action)         }     } } // 使用connect将UI组件与业务逻辑相结合，返回一个Container组件 export default connect(mapStateToProps,mapDispatchToProps)(TodoList)</code></pre></li></ol><h3 id="header-40">redux-immutable</h3><ul><li>统一数据格式</li><li>install: <code>yarn add redux-immutable</code></li><li>使用<code>redux-immutable</code>中的<code>combineReducers</code>组合reducer =&gt; 将store的state变成immutable对象</li></ul><p><strong>Sample</strong></p><ol><li><p>src/store/index.js</p><pre><code class="lang-javascript"> // import { combineReducers } from &#39;redux&#39;; import { combineReducers } from &#39;redux-immutable&#39;; // 使用redux-immutable中的combineReducers,会将state封装成immutable对象 // import headerReducer from &#39;../common/header/store/reducer&#39;; import { reducer as headerReducer} from &#39;../common/header/store&#39;; export default combineReducers({     header: headerReducer })</code></pre></li><li><p>src/common/header/index.js</p><pre><code class="lang-javascript"> const mapStateToProps=(state)=&gt;{     return {         // focused: state.focused         // focused: state.header.focused         // focused: state.header.get(&#39;focused&#39;)     // Note：这里state.header是一个immutable对象         focused: state.get(&quot;header&quot;).get(&#39;focused&#39;) // Note: 这里state就是一个immutable对象，也可写成 state.getIn([&#39;header&#39;,&#39;focused&#39;])     } }</code></pre></li></ol><h3 id="header-41">组织Action和Reducer</h3><ul><li><p>标准方式：action和reducer分开</p><ul><li>同类action放在一个文件，会无限扩展</li><li>action和reducer分开，实现业务逻辑时需来回切换</li><li>系统有哪些action不够直观</li></ul></li><li><p>新的方式：单个action和reducer放在同一个文件</p><ul><li>以action命名 =&gt; 更直观</li><li>每个action文件都很小，只包括一个action和reducer =&gt; 不用在action和reducer间来回切换，易维护</li></ul></li></ul><p><strong>Sample:Counter</strong></p><ol><li><p>reducer.js &amp; actionCreator.js &amp; store.js:</p><ul><li><code>const store = createStore(reducer)</code> 创建store</li><li><code>.getState()</code> 获取store中state数据</li><li><code>.dispatch(action)</code> 将action分发给reducers</li><li><p><code>.subscribe(callbackListener)</code> 监听store变化，触发回调函数</p><pre><code class="lang-javascript">// 1. reducer: const counter = (state={count:0},action)=&gt;{  switch(action.type){      case &quot;PLUS_ONE&quot;:          return {count:state.count+1}      case &quot;MINUS_ONE&quot;:          return {count:state.count-1}      default:          break;  }  return state;};// 2. actionCreator,return an action objfunction plusCnt(){  return {      type: &#39;PLUS_ONE&#39;  }};function minusOne(){  return {      type: &#39;MINUS_ONE&#39;  }}// 3. storeconst store = createStore(counter)// usage sample:// store.subscribe(//     ()=&gt;{console.log(store.getState())}// )// store.dispatch(plusOne())</code></pre></li></ul></li><li><p>改进：使用工具函数 <code>combineReducers</code>: 组合多个reducer,形成一个组合的state (注：dispatch一个action时，所有reducer都会收到)</p><pre><code class="lang-javascript"> // reducer: import {combineReducers} from &#39;redux&#39;; const counter = (state={count:0},action)=&gt;{     switch(action.type){         case &quot;PLUS_ONE&quot;:             return {count:state.count+1}         case &quot;MINUS_ONE&quot;:             return {count:state.count-1}         default:             break;     }     return state; }; const todos = (state={},action)=&gt;{     return state; }; // store: // const store = createStore(counter) const store = createStore(     combineReducers({         counter,         todos     }) ) // =&gt; state: { //     counter: {count:1}, //     todos:{} // }</code></pre></li><li><p>改进：使用工具函数 <code>bindActionCreators</code>: 重新封装actionCreator，自动调用dispatch</p><pre><code class="lang-javascript"> // action: import {bindActionCreators} from &#39;redux&#39;; // action creator function, return an action obj function plusOne(){     return {         type: &#39;PLUS_ONE&#39;     } }; // bindActionCreators: ()=&gt;{ store.dispatch(plusOne()) } plusOne = bindActionCreators(plusOne,store.dispatch); // previous usage: dispatch(plusOne());  // now could directly use:  // plusOne();</code></pre></li><li><p>App.js &amp; Counter.js: 使用<code>react-redux</code>分离UI&amp;逻辑</p><pre><code class="lang-java"> // 1. App.js: import React,{Component} from &#39;react&#39; import { Provider } from &#39;react-redux&#39; import Counter from &#39;./Counter&#39; export default class CounterSample extends Component {   render() {     return (       &lt;Provider store={store}&gt;         &lt;Counter /&gt;       &lt;/Provider&gt;     );   }</code></pre><pre><code class="lang-java"> // 2. Counter.js: import { connect } from &#39;react-redux&#39;; class Counter extends Component{     render(){         const {count,plusOne,minusOne} = this.props;         return (             &lt;div&gt;                 &lt;div&gt;{count}&lt;/div&gt;                 &lt;button onClick={plusOne}&gt;Plus&lt;/button&gt;                 &lt;button onClick={minusOne}&gt;Minus&lt;/button&gt;             &lt;/div&gt;         )     } } const mapStateToProps=(state)=&gt;{     return {         count: state.count     } }; const mapDispatchToProps=(dispatch)=&gt;{     // return {     //     plusOne     //     ,minusOne     // }     return bindActionCreators({ plusOne, minusOne }, dispatch); }; export default connect(mapStateToProps,mapDispatchToProps)(Counter);</code></pre></li></ol><p><strong>使用新的组织方式组织action &amp; reducer(一个action文件中包括一个action &amp; reducer)</strong></p><ol><li><p>actions/counterPlusOne.js</p><pre><code class="lang-javascript"> // action creator export const counterPlusOne = ()=&gt;{     return {         type: &#39;COUNTER_PLUS_ONE&#39;     } }; // reducer export const reducer = (state,action)=&gt;{     switch(action.type){         case:&#39;COUNTER_PLUS_ONE&#39;:             return {count:state.count+1};         default:             return state;     } }</code></pre></li><li><p>actions/counterMinusOne.js</p><pre><code class="lang-javascript"> // action creator export const counterMinusOne = ()=&gt;{     return {         type: &#39;COUNTER_MINUS_ONE&#39;     } }; // reducer export const reducer = (state,action)=&gt;{     switch(action.type){         case:&#39;COUNTER_MINUS_ONE&#39;:             return {count:state.count-1};         default:             return state;     } }</code></pre></li><li>actions.js<pre><code class="lang-javascript"> export {counterPlusOne} from &#39;./counterPlusOne&#39; export {counterMinusOne} from &#39;./counterMinusOne&#39;</code></pre></li><li>reducer.js<pre><code class="lang-javascript"> export {reducer as counterPlusOneReducer} from &#39;./counterPlusOne&#39; export {reducer as counterMinusOneReducer} from &#39;./counterMinusOne&#39;</code></pre></li></ol><h2 id="header-42">React Router</h2><ul><li>install: <code>yarn add react-router-dom</code></li><li>特性：<ul><li>声明式的路由定义（React组件，可像Tag一样去定义使用）</li><li>动态路由（页面render时实时解析）</li><li>基于路由配置进行资源组织<ul><li>实现业务逻辑的松耦合</li><li>易于扩展，重构和维护</li><li>路由层面实现Lazy Load</li></ul></li></ul></li><li>注：路由不只是页面切换，更是代码组织方式<ul><li>单页应用也需要进行页面切换</li><li>通过URL可以定位到页面</li><li>更有语义的组织资源</li></ul></li><li>应用：管理登录和授权（区分受保护路由和公开路由，访问未授权路由时重定向到登录页面）</li></ul><h3 id="header-43">路由</h3><ul><li><code>Link</code> : 普通链接，不会出发浏览器刷新(用a标签的话，浏览器会刷新)<pre><code class="lang-javascript">  &lt;Link to=&#39;/home&#39;&gt;Home&lt;/Link&gt;</code></pre></li><li><code>NavLink</code> : 类似Link，但是会添加当前选中状态(多了一个css样式设置)<pre><code class="lang-html">  &lt;NavLink to=&quot;/faq&quot; activeClassName=&quot;selected&quot;&gt; FAQs&lt;/NavLink&gt;</code></pre></li><li><code>Prompt</code> : 满足条件时提示用户是否里来当前页面<pre><code class="lang-html">  &lt;Prompt when={formIsHalfFilledOut} message=&quot;Are you sure you want to leave?&quot; /&gt;</code></pre></li><li><code>Redirect</code> : 重定向当前页面，例如：登录判断<pre><code class="lang-html">  &lt;Route exact path=&quot;/&quot; render={()=&gt;(      loggedIn? (&lt;Redirect to=&#39;/dashboard&#39;/&gt;):(&lt;LoginPage/&gt;)  )} /&gt;</code></pre></li><li><code>Route</code> : 路由配置的核心标记，路径匹配时显示对应组件(不排他，多个匹配，则显示多个)<pre><code class="lang-html">  &lt;Route exact path=&quot;/home&quot; component={Home}/&gt;</code></pre></li><li><code>Switch</code> : 只显示第一个匹配的路由(排他，只显示第一个匹配的)<pre><code class="lang-html">  &lt;Switch&gt;      &lt;Route exact path=&quot;/&quot; component={Home}/&gt;      &lt;Route exact path=&quot;/about&quot; component={About}/&gt;      &lt;Route exact path=&quot;/:user&quot; component={User}/&gt;      &lt;Route component={NoMatch}/&gt;  &lt;/Switch&gt;</code></pre></li></ul><h3 id="header-44">路由容器</h3><ul><li><code>BrowserRouter</code> : 使用URL路径 <code>/xxx</code> </li><li><code>HashRouter</code> : 使用Hash路由 <code>#xxx</code></li><li><code>MemoryRouter</code> : 内存路由, 不会反应到URL上</li></ul><pre><code class="lang-java">import React from &#39;react&#39;;import {Route,Link} from &#39;react-router-dom&#39;;import {BrowserRouter as Router} from &#39;react-router-dom&#39;; // import {HashRouter as Router} from &#39;react-router-dom&#39;;// import {MemoryRouter as Router} from &#39;react-router&#39;;     // 与dom无关const RouterSample=(props)=&gt;{    return (        &lt;Router&gt;            &lt;div&gt;                &lt;ul id=&quot;menu&quot;&gt;                    &lt;li&gt;&lt;Link to=&#39;/home&#39;&gt;Home&lt;/Link&gt;&lt;/li&gt;                    &lt;li&gt;&lt;Link to=&#39;/hello&#39;&gt;Home&lt;/Link&gt;&lt;/li&gt;                    &lt;li&gt;&lt;Link to=&#39;/about&#39;&gt;Home&lt;/Link&gt;&lt;/li&gt;                &lt;/ur&gt;            &lt;/div&gt;            &lt;div&gt;                &lt;ul id=&quot;page-container&quot;&gt;                    &lt;Route path=&quot;/home&quot; component={Home}/&gt;                    &lt;Route path=&quot;/hello&quot; component={Hello}/&gt;                    &lt;Route path=&quot;/about&quot; component={About}/&gt;                &lt;/ur&gt;            &lt;/div&gt;        &lt;/Router&gt;    )};export default RouterSample;</code></pre><h3 id="header-45">参数传递</h3><p>通过URL传递参数:</p><ul><li>rule: <code>&lt;Route path=&quot;/topic/:id&quot; component={Topic} /&gt;</code> (<a href="https://github.com/pillarjs/path-to-regexp" target="_blank" rel="noopener">More path rules</a>)</li><li>trigger: <code>&lt;Link to=&quot;/topic/15&gt;Topic_15&lt;/Link&gt;</code></li><li>get params(in the Topic Component): <code>this.props.match.params</code></li><li>注：页面状态尽量通过URL参数传递</li></ul><h3 id="header-46">嵌套路由</h3><p>嵌套路由：每个React组件都可以是路由容器，声明式语法可以很方便的定义嵌套路由</p><pre><code class="lang-java">import { BrowserRouter as Router, Route, Link } from &quot;react-router-dom&quot;;const Category = (props)=&gt; {    return (      &lt;Router&gt;        &lt;div&gt;          &lt;ul id=&quot;menu&quot;&gt;            &lt;li&gt;&lt;Link to=&quot;/category/1&quot;&gt;Category 1&lt;/Link&gt;&lt;/li&gt;            &lt;li&gt;&lt;Link to=&quot;/category/2&quot;&gt;Category 2&lt;/Link&gt;&lt;/li&gt;            &lt;li&gt;&lt;Link to=&quot;/category/3&quot;&gt;Category 3&lt;/Link&gt;&lt;/li&gt;          &lt;/ul&gt;          &lt;div id=&quot;page-container&quot;&gt;            &lt;Route path=&quot;/category/:id&quot; component={SubCategory}/&gt;          &lt;/div&gt;        &lt;/div&gt;      &lt;/Router&gt;    )};const SubCategory = (props)=&gt;{    const categoryId=props.match.params.id    return (        &lt;div&gt;            &lt;h1&gt;Category {categoryId}&lt;/h1&gt;            &lt;ul id=&quot;menu&quot;&gt;              &lt;li&gt;&lt;Link to={`/category/${categoryId}/1`}&gt;Sub Category 1&lt;/Link&gt;&lt;/li&gt;              &lt;li&gt;&lt;Link to={`/category/${categoryId}/2`}&gt;Sub Category 2&lt;/Link&gt;&lt;/li&gt;            &lt;/ul&gt;            &lt;div id=&quot;page-container-2&quot;&gt;              &lt;Route path=&quot;/category/:id/:subId&quot; component={Detail}/&gt;            &lt;/div&gt;          &lt;/div&gt;    )}const Detail = (props) =&gt; (  &lt;h1&gt;Sub Category {props.match.params.subId} Detail&lt;/h1&gt;);export default Category;</code></pre><p><strong>注：</strong></p><pre><code class="lang-java">// 没有使用exact精确匹配// =&gt; Link `/category` 时     , 显示 Category// =&gt; Link `/category/1` 时   , 显示 SubCategory// =&gt; Link `/category/1/2` 时 , 显示Category,SubCategory,Detail&lt;Route path=&quot;/category/:id&quot; component={SubCategory}/&gt;&lt;Route path=&quot;/category/:id/:subId&quot; component={Detail}/&gt;</code></pre><h3 id="header-47">Sample</h3><ol><li><p>App:</p><pre><code class="lang-java"> import React, { Fragment } from &#39;react&#39;; import { BrowserRouter, Route } from &#39;react-router-dom&#39;; import Header from &#39;./common/header&#39;; import Home from &#39;./pages/home&#39;; import Detail from &#39;./pages/detail&#39;; function App() {   return (     &lt;Fragment&gt;          &lt;Header/&gt;         {/*         &lt;BrowserRouter&gt;           &lt;Route path=&#39;/&#39; exact render={()=&gt;(&lt;div&gt;Home&lt;/div&gt;)}&gt;&lt;/Route&gt;           &lt;Route path=&#39;/detail&#39; exact render={()=&gt;(&lt;div&gt;Detail&lt;/div&gt;)}&gt;&lt;/Route&gt;         &lt;/BrowserRouter&gt;         */}         &lt;BrowserRouter&gt;           &lt;Route path=&#39;/&#39; exact component={Home}&gt;&lt;/Route&gt;           &lt;Route path=&#39;/detail/:id&#39; exact component={Detail}&gt;&lt;/Route&gt;         &lt;/BrowserRouter&gt;     &lt;/Fragment&gt;   ); } export default App;</code></pre></li><li><p>Home:</p><pre><code class="lang-java"> import React from &#39;react&#39;; import {Link} from &#39;react-router-dom&#39;; const Home = (props) =&gt; {     return (         &lt;div&gt;             &lt;h1&gt;Home&lt;/h1&gt;             {/*&lt;a href=&quot;/detail&quot;&gt;Detail&lt;/a&gt;*/}             &lt;ul&gt;                 &lt;li&gt;&lt;Link to=&quot;/detail/1&quot;&gt;Go Detail_1&lt;/Link&gt;&lt;/li&gt;                 &lt;li&gt;&lt;Link to=&quot;/detail/2&quot;&gt;Go Detail_2&lt;/Link&gt;&lt;/li&gt;                 &lt;li&gt;&lt;Link to=&quot;/detail/3&quot;&gt;Go Detail_3&lt;/Link&gt;&lt;/li&gt;             &lt;/ul&gt;         &lt;/div&gt;     ) } export default Home;</code></pre></li><li><p>Detail:</p><pre><code class="lang-java"> import React from &#39;react&#39;; import { Link } from &#39;react-router-dom&#39;; const Detail=(props)=&gt;{     // console.log(&quot;props.match&quot;,&quot;eg: /details/1&quot;,props.match)  // props.match.params     // console.log(&quot;props.location&quot;,&quot;eg: /details?id=1&quot;,props.location) // props.location.search     return (         &lt;div&gt;             &lt;h1&gt;Detail:{props.match.params.id}&lt;/h1&gt;             {/*&lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;*/}             &lt;Link to=&quot;/&quot;&gt;Back Home&lt;/Link&gt;         &lt;/div&gt;     ) } export default Detail;</code></pre></li></ol><h2 id="header-48">More</h2><h3 id="header-49">react-loadable</h3><p><a href="https://github.com/jamiebuilds/react-loadable" target="_blank" rel="noopener">react-loadable</a> 异步加载组件</p><ul><li>原本一个<code>bundle.js</code>大包了所有组件，第一次加载会比较慢</li><li><code>react-loadable</code>使用时再加载对应组件js =&gt; <code>1.chunk.js</code>,<code>2.chunk.js</code>,…</li><li>install <code>yarn add react-loadable</code></li></ul><p><strong>Sample:</strong></p><ol><li><p>App:</p><pre><code class="lang-java"> import React, { Fragment } from &#39;react&#39;; import { BrowserRouter, Route } from &#39;react-router-dom&#39;; import Header from &#39;./common/header&#39;; import Home from &#39;./pages/home&#39;; // import Detail from &#39;./pages/detail&#39;; import Detail from &#39;./pages/detail/loadable&#39;;  // 使用loadable.js封装的Detail组件 function App() {   return (     &lt;Fragment&gt;          &lt;Header/&gt;         {/*         &lt;BrowserRouter&gt;           &lt;Route path=&#39;/&#39; exact render={()=&gt;(&lt;div&gt;Home&lt;/div&gt;)}&gt;&lt;/Route&gt;           &lt;Route path=&#39;/detail&#39; exact render={()=&gt;(&lt;div&gt;Detail&lt;/div&gt;)}&gt;&lt;/Route&gt;         &lt;/BrowserRouter&gt;         */}         &lt;BrowserRouter&gt;           &lt;Route path=&#39;/&#39; exact component={Home}&gt;&lt;/Route&gt;           &lt;Route path=&#39;/detail/:id&#39; exact component={Detail}&gt;&lt;/Route&gt;         &lt;/BrowserRouter&gt;     &lt;/Fragment&gt;   ); } export default App;</code></pre></li><li><p>Detail组件：</p><pre><code class="lang-java"> import React from &#39;react&#39;; import { Link, withRouter } from &#39;react-router-dom&#39;; const Detail=(props)=&gt;{     return (         &lt;div&gt;             &lt;h1&gt;Detail:{props.match.params.id}&lt;/h1&gt;             {/*&lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;*/}             &lt;Link to=&quot;/&quot;&gt;Back Home&lt;/Link&gt;         &lt;/div&gt;     ) } export default withRouter(Detail); // 使用withRouter，否则props.match无法获取到值</code></pre></li><li><p>封装Detail组件：detail/loadable.js</p><pre><code class="lang-java"> import React from &#39;react&#39;; import Loadable from &#39;react-loadable&#39;; const LoadableComponent = Loadable({   loader: () =&gt; import(&#39;./&#39;),           // import component: `Detail`   loading: ()=&gt; &lt;div&gt;Loading...&lt;/div&gt;  // loading component  }); export default ()=&gt;{ return (&lt;LoadableComponent/&gt;) } // 直接返回一个无状态组件</code></pre></li></ol><p><strong>注:<code>react-loadable</code>会使用已经被重命名的react方法<code>componentWillMount</code></strong></p><p>Warning: componentWillMount has been renamed, and is not recommended for use.<br>See <a href="https://fb.me/react-async-component-lifecycle-hooks" target="_blank" rel="noopener">https://fb.me/react-async-component-lifecycle-hooks</a> for details.</p><ul><li>Move code with side effects to componentDidMount, and set initial state in the constructor.</li><li>Rename componentWillMount to UNSAFE<em>componentWillMount to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE</em> name will work. To rename all deprecated lifecycles to their new names, you can run <code>npx react-codemod rename-unsafe-lifecycles</code> in your project source folder.</li></ul><p>Please update the following components: LoadableComponent</p><h3 id="header-50">Next.js 创建同构应用</h3><ol><li><p>同构应用</p><ul><li>第一次发送请求，服务端渲染，返回页面给客户端呈现（客户端不需要再花时间执行js渲染页面)</li><li>后续仍由客户端执行操作</li></ul></li><li><p>使用 Next.js 实现服务器端渲染（无缝同步到客户端）</p><ul><li>install: <code>npm install --save next react react-dom</code></li><li><code>package.json</code>: add cmd<pre><code class="lang-json">  {      &quot;scripts&quot;:{          &quot;dev&quot;:&quot;next&quot;,          &quot;build&quot;:&quot;next build&quot;,          &quot;start&quot;:&quot;next start&quot;      }  }</code></pre></li><li>run: <code>npm run dev</code></li><li>visit: <code>http://localhost:3000</code></li><li>注：<ul><li><code>pages</code>目录: <ul><li>每个文件对应页面路由导航，文件中可定义使用组件</li><li>页面也是标准的node模块，可使用其他React组件</li><li>页面会针对性打包，仅包含其引入的组件</li><li>page具有特殊静态方法<code>getInitialProps</code></li></ul></li><li><code>static</code>目录: 映射静态文件</li></ul></li></ul></li><li><p>使用<code>next/link</code>实现同构路由</p><ul><li><code>next/link</code>定义的链接，点击时页面不会刷新</li><li><code>prefetch</code>属性: 预加载目标资源(但不会加载服务器端API数据)</li><li><p><code>replace</code>属性: 替换URL(配置后当前链接不会包含在浏览器的history中，即无法后退到当前页面)</p><pre><code class="lang-java">import Link from &#39;next/link&#39;;export default ()=&gt;(  &lt;div&gt;      &lt;Link href=&#39;/hello&#39;&gt;&lt;a&gt;Hello&lt;/a&gt;&lt;/Link&gt;      &lt;Link href=&#39;/about&#39; prefetch&gt;&lt;a&gt;About&lt;/a&gt;&lt;/Link&gt;  &lt;/div&gt;)</code></pre></li></ul></li><li><p>使用<code>next/dynamic</code>实现动态加载页面（Lazy Load）</p><pre><code class="lang-java"> import dynamic from &#39;next/dynamic&#39;; const DynamicHello = dynamic(     import(&#39;../components/hello&#39;),{loading:()=&gt;(&lt;p&gt;...&lt;/p&gt;)} ) export default () =&gt; (     &lt;div&gt;         &lt;Header/&gt;         &lt;DynamicHello /&gt;         &lt;p&gt; Home Page &lt;/p&gt;     &lt;/div&gt; )</code></pre></li></ol><h3 id="header-51">单元测试工具</h3><ul><li><p>React让前端单元测试变的容易：</p><ul><li>React应用很少需要访问浏览器API</li><li>虚拟Dom可以再NodeJS环境运行和测试</li><li>Redux隔离了状态管理，纯数据层单元测试</li></ul></li><li><p>单元测试涉及的工具：</p><ul><li><code>Jest</code>: Facebook开源的JS单元测试框架</li><li><code>JS Dom</code>: NodeJS环境中模拟浏览器API</li><li><code>Enzyme</code>: React组件渲染和测试（可直接在NodeJS环境中渲染虚拟Dom和测试）</li><li><code>nock</code>: 模拟HTTP请求</li><li><code>sinon</code>: 函数模拟和调用跟踪</li><li><code>Istanbul</code>: 单元测试覆盖率</li></ul></li></ul><p><strong>Sample: Jest + Enzme</strong></p><pre><code class="lang-javascript">import React from &#39;react&#39;import { shallow } from &#39;enzyme&#39;import CommentItem from &#39;./commentItem&#39;describe(&#39;测试评论列表项组件&#39;, () =&gt; {  // 这是mocha的玩法，jest可以直接兼容  it(&#39;测试评论内容小于等于200时不出现展开收起按钮&#39;, () =&gt; {    const propsData = {      name: &#39;hj&#39;,      content: &#39;测试标题&#39;    }    const item = shallow(&lt;CommentItem {...propsData} /&gt;)    // 这里的断言实际上和chai的expect是很像的    expect(item.find(&#39;.btn-expand&#39;).length).toBe(0);  })  // 这是jest的玩法，推荐用这种  test(&#39;两数相加结果为两个数字的和&#39;, () =&gt; {    expect(3).toBe(3);  });}</code></pre><h3 id="header-52">拆分复杂度: 按领域模型(feature)组织代码</h3><ul><li>按业务逻辑拆分成高内聚松耦合的模块<ul><li>按feature组织component,action,reducer</li><li>使用root loader加载feature下的各个资源</li></ul></li><li>文件夹结构<ul><li>按feature组织源文件</li><li>组件和样式文件同一级</li><li>Redux单独文件夹</li><li>单元测试保持同样目录结构，放在tests文件夹</li></ul></li><li>在每个feature中单独定义自己的路由<ul><li>使用JSON定义顶层路由</li><li>解析JSON配置到React Router语法</li></ul></li></ul><p><strong>Sample:</strong></p><pre><code class="lang-javascript">\src    \commons        configStore.js        rootReducer.js              // combine all features reducers        routeConfig.js                   \features        \commons        \home            \redux                actions.js          // export all below reducers                reducer.js          // export all below actions                constances.js       // export all below constances (use feature name as prefix,eg: HOME_xxx)                counterPlusOne.js   // name as action, include one action,one reducer                counterMinusOne.js            index.js                // export all below components            route.js            style.css               // import all below css            PageNotFound.js            PageNotFound.css            SidePanel.js            SidePanel.css            Counter.js            Counter.css        \about        \article    index.js    logo.svg\tests    \features        \commons        \home        \about        \article</code></pre>]]></content>
    
    <summary type="html">
    
      ReactJS 16
    
    </summary>
    
    
      <category term="ReactJs" scheme="http://sixdegree.github.io/tags/ReactJs/"/>
    
  </entry>
  
</feed>
