<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SixDegree</title>
  <subtitle>host by chenjin</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://sixdegree.github.io/"/>
  <updated>2016-05-13T08:09:50.042Z</updated>
  <id>http://sixdegree.github.io/</id>
  
  <author>
    <name>Chen Jin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hadoop Basic</title>
    <link href="http://sixdegree.github.io/2016/05/01/Hadoop-Basic.html"/>
    <id>http://sixdegree.github.io/2016/05/01/Hadoop-Basic.html</id>
    <published>2016-04-30T16:00:00.000Z</published>
    <updated>2016-05-13T08:09:50.042Z</updated>
    
    <content type="html">&lt;ol&gt;
&lt;li&gt;Hadoop概述，版本说明，环境搭建；&lt;/li&gt;
&lt;li&gt;HDFS特性，各进程介绍，Shell Cmd,JavaAPI使用；&lt;/li&gt;
&lt;li&gt;RPC原理，HDFS和MapReduce中使用到的通讯协议类介绍；&lt;/li&gt;
&lt;li&gt;MapReduce特性，执行流程，计算模型介绍；&lt;/li&gt;
&lt;li&gt;MapReduce应用示例（例如：统计，排序，连接，迭代，图等）；&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;header-1&quot;&gt;Hadoop&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Nobody wants data,what they want are the answers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;header-2&quot;&gt;概述&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;适合&lt;code&gt;大数据&lt;/code&gt;的，&lt;code&gt;分布式&lt;/code&gt;，&lt;code&gt;存储（HDFS）&lt;/code&gt;与&lt;code&gt;计算（MapReduce）&lt;/code&gt;平台&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;HDFS&lt;/code&gt;: Hadoop Distributed File System 分布式文件系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;思想&lt;ul&gt;
&lt;li&gt;单次写入，多次读取 （不支持并发写，可追加，不可原内容修改）&lt;/li&gt;
&lt;li&gt;以Block存储，多副本&lt;/li&gt;
&lt;li&gt;面向大文件存储（小文件不合适）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主从结构&lt;ul&gt;
&lt;li&gt;namenode(1) – 管理（接收请求，存储元数据）&lt;/li&gt;
&lt;li&gt;secondNamenode(1) – 辅助管理（存储元数据快照）&lt;/li&gt;
&lt;li&gt;datanode(n) – 存储数据（block）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;MapReduce&lt;/code&gt;: Engine+Logic 并行计算框架，处理计算HDFS中的数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;思想&lt;ul&gt;
&lt;li&gt;分而治之&lt;/li&gt;
&lt;li&gt;mapper（Data-Local，尽可能移动计算到数据端）+ reducer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主从结构&lt;ul&gt;
&lt;li&gt;jobTracker(1) – 管理（接收、分配、监控任务）&lt;/li&gt;
&lt;li&gt;taskTracker(n)– 执行任务（mapper或reducer）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;YARN&lt;/code&gt;: Yet Another Resource Negotiator 资源管理调度系统 (Hadoop2.x加入)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;特点（分布式特点）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扩容能力（Scalable）&lt;ul&gt;
&lt;li&gt;能可靠地存储和处理千兆字节（PB）数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;成本低（Economical）&lt;ul&gt;
&lt;li&gt;可以通过普通机器组成的服务器群来分发以及处理数据&lt;/li&gt;
&lt;li&gt;服务器群可达数千个节点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高效率（Efficient）&lt;ul&gt;
&lt;li&gt;可在的节点上并行地处理数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可靠性（Reliable）&lt;ul&gt;
&lt;li&gt;自动维护数据的多份副本&lt;/li&gt;
&lt;li&gt;在任务失败后能自动地重新部署计算任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header-3&quot;&gt;版本说明&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Apache Hadoop&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0.20.2 =&amp;gt; hadoop     1.x&lt;/li&gt;
&lt;li&gt;0.23.0 =&amp;gt; hadoop 2.x&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hadoop 1.x&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HDFS （分布式文件系统）&lt;/li&gt;
&lt;li&gt;MapReduce （离线计算框架）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hadoop 2.x&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HDFS （支持NameNode横向扩展）&lt;/li&gt;
&lt;li&gt;MapReduce （运行在YARN上）&lt;/li&gt;
&lt;li&gt;YARN （资源管理系统）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/2016/05/01/version.png&quot; alt=&quot;Hadoop version&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;header-4&quot;&gt;生态系统&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Hadoop1.x 生态系统&lt;br&gt;  &lt;img src=&quot;/2016/05/01/ecosystem-1.x.png&quot; alt=&quot;Hadoop 1.x Ecosystem&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hadoop2.x 生态系统&lt;br&gt;  &lt;img src=&quot;/2016/05/01/ecosystem-2.x.png&quot; alt=&quot;Hadoop 2.x Ecosystem&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header-5&quot;&gt;安装部署&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;本地模式&lt;ul&gt;
&lt;li&gt;本地运行&lt;/li&gt;
&lt;li&gt;只负责存储，没有计算功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;伪分布模式&lt;ul&gt;
&lt;li&gt;在一台机器上模拟分布式部署&lt;/li&gt;
&lt;li&gt;方便学习和调试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;集群模式&lt;ul&gt;
&lt;li&gt;在多个机器上配置 hadoop&lt;/li&gt;
&lt;li&gt;是真正的“分布式”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;部署进程说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DataNode&lt;/code&gt;(HDFS)与&lt;code&gt;TaskTracker&lt;/code&gt;(MapReduce)，共享一个节点（&lt;code&gt;Slave&lt;/code&gt;，可多个）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NameNode&lt;/code&gt;(HDFS)与&lt;code&gt;JobTracker&lt;/code&gt;(MapReduce)，可在同一个或两个不同的节点（&lt;code&gt;Master&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;NameNode&lt;/code&gt;(HDFS)与&lt;code&gt;SecondaryNameNode&lt;/code&gt;(HDFS)，尽量安排在两个不同的节点（&lt;code&gt;Master&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;部署逻辑图&lt;br&gt;  &lt;img src=&quot;/2016/05/01/hdfs-mapreduce.png&quot; alt=&quot;Hadoop Hdfs-MapReduce &quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;集群的物理分布&lt;br&gt;  &lt;img src=&quot;/2016/05/01/cluster.png&quot; alt=&quot;Hadoop Cluster &quot;&gt;&lt;/li&gt;
&lt;li&gt;单个节点中的物理结构&lt;br&gt;  &lt;img src=&quot;/2016/05/01/master-slave.png&quot; alt=&quot;Hadoop Master-Slave &quot;&gt;&lt;/li&gt;
&lt;li&gt;Hadoop 组件依赖关系&lt;br&gt;  &lt;img src=&quot;/2016/05/01/setup.png&quot; alt=&quot;Hadoop Master-Slave &quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;header-6&quot;&gt;环境准备&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Linux环境设置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关闭iptables : &lt;code&gt;service iptables stop&lt;/code&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; service iptables status
&amp;gt; service iptables stop
&amp;gt; chkconfig iptables off
&amp;gt; chkconfig --list | grep iptables
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;设置hostname：&lt;code&gt;/etc/sysconfig/network&lt;/code&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; hostname cj
&amp;gt; vi /etc/sysconfig/network
NETWORKING=yes
HOSTNAME=cj
&amp;gt; restart
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置静态ip：&lt;code&gt;/etc/sysconfig/network-scripts/ifcfg-eth0&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; vi /etc/sysconfig/network-scripts/ifcfg-eth0
...
BOOTPROTO=static
IPADDR=10.40.33.100
NETMASK=255.255.255.0
...
&amp;gt; service network restart
&amp;gt; ifconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置DNS（绑定hostname &amp;amp; ip ）: &lt;code&gt;/etc/hosts&lt;/code&gt; (windows下：&lt;code&gt;C:\windows\system32\drivers\etc\hosts&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; vi /etc/hosts
10.40.33.100  cj.storm cj
... # 其他节点
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JVM 安装&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rpm安装    &lt;code&gt;rpm -ivh xxx.rpm&lt;/code&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; rpm -ivh jdk-8u45-linux-x64.rpm     # 默认安装到/usr/java
&amp;gt; rpm -q --whatprovides java
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;配置环境变量（JAVA_HOME，PATH）： &lt;code&gt;/etc/profile&lt;/code&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; vi /etc/profile
export JAVA_HOME=/usr/java/jdk1.8.0_45
export PATH=$PATH:$JAVA_HOME/bin
export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
&amp;gt; source /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;测试是否安装成功 &lt;code&gt;javac&lt;/code&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; java -version
&amp;gt; javac -version
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hadoop 用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;gt; groupadd hadoop
 &amp;gt; useradd -g hadoop hadoop
 &amp;gt; passwd hadoop
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SSH 免密码登录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切换用户: &lt;code&gt;su xxx&lt;/code&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; su hadoop
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;生成两个钥匙（公有，私有）: &lt;code&gt;ssh-keygen -t rsa&lt;/code&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; mkdir .ssh
&amp;gt; cd .ssh
&amp;gt; ssh-keygen -t rsa
&amp;gt; ls
id_rsa,id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;将公有钥匙添加到authorized_keys：&lt;code&gt;cp id_rsa.pub &amp;gt;&amp;gt; authorized_keys&lt;/code&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; cp id_rsa.pub &amp;gt;&amp;gt; authorized_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;权限修改：&lt;code&gt;chmod&lt;/code&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; chmod 744 /home/hadoop
&amp;gt; chmod 700 /home/hadoop/.ssh
&amp;gt; chmod 644 /home/hadoop/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;验证（第一次需要输入密码，以后就不用了）： &lt;code&gt;ssh localhost&lt;/code&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; ssh localhost
&amp;gt; ssh -v localhost  # ouput debug infomation
&amp;gt; exit
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;注意：如果&lt;code&gt;authorized_keys&lt;/code&gt;文件、&lt;code&gt;$HOME/.ssh&lt;/code&gt;目录 或 $HOME目录让本用户之外的用户有写权限，那么sshd都会拒绝使用 &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;文件中的key来进行认证的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;header-7&quot;&gt;Hadoop1.x 安装&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装Hadoop&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上传并解压&lt;pre&gt;&lt;code&gt;&amp;gt; tar -zxvf hadoop-1.2.1.tar.gz -C /home/hadoop/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;配置环境变量（HADOOP_INSTALL，PATH）： &lt;code&gt;/etc/profile&lt;/code&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; vi /etc/profile
export HADOOP_INSTALL=/home/hadoop/hadoop-1.2.1
export PATH=$PATH:$HADOOP_INSTALL/bin
&amp;gt; source /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hadoop-env.sh&lt;/code&gt; （配置JAVA_HOME）&lt;pre&gt;&lt;code class=&quot;nullshell&quot;&gt;export JAVA_HOME=/usr/java
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;core-site.xml&lt;/code&gt;&lt;pre&gt;&lt;code class=&quot;nullxml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 指定hadoop运行时产生文件的存放目录 --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;hadoop.tmp.dir&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;/home/hadoop/tmp&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 指定HDFS的namenode的通信地址 --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;fs.default.name&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;hdfs://cj.storm:9000&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 指定HDFS的secondNamenode的存放目录 --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;fs.checkpoint.dir&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;/home/hadoop/data1/namesecondary&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hdfs-site.xml&lt;/code&gt;&lt;pre&gt;&lt;code class=&quot;nullxml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- HDFS 元数据存放目录--&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;dfs.name.dir&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;/home/hadoop/data1/hdfs/name&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- HDFS Block存放目录--&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;dfs.data.dir&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;/home/hadoop/data1/hdfs/data&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- HDFS Block Size 默认为64M--&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;dfs.block.size&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;8388608&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- HDFS block 副本数，伪分布式下必须为1 --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;dfs.replication&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- HDFS 文件系统权限控制--&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;dfs.permissions&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;false&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mapred-site.xml&lt;/code&gt;&lt;pre&gt;&lt;code class=&quot;nullxml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 指定jobtracker地址 --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;mapred.job.tracker&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;cj.storm:9001&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启用进程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化（namenode格式化，第一次时）: &lt;code&gt;hadoop namenode -format&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动所有：&lt;code&gt;start-all.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;退出安全模式： &lt;code&gt;hadoop dfsadmin -safemode leave&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动某个进程：&lt;code&gt;hadoop-daemon.sh start xxx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;关闭所有：&lt;code&gt;stop-all.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;关闭某个进程：&lt;code&gt;hadoop-daemon.sh stop xxx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;验证&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程查看：&lt;code&gt;jps&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;web访问&lt;ul&gt;
&lt;li&gt;HDFS （NameNode: &lt;a href=&quot;http://cj.storm:50070，SecondNameNode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cj.storm:50070，SecondNameNode&lt;/a&gt;: &lt;a href=&quot;http://cj.storm:50090）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cj.storm:50090）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MapReduce （JobTracker: &lt;a href=&quot;http://cj.storm:50030，TaskTracker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cj.storm:50030，TaskTracker&lt;/a&gt;: &lt;a href=&quot;http://cj.storm:50060）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cj.storm:50060）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;注意：在windows下需维护linux主机名和IP的映射关系（&lt;code&gt;C:\Windows\System32\drivers\etc&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HDFS查看 : &lt;code&gt;hadoop fs -lsr /&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;MapReduce测试 : &lt;code&gt;hadoop jar $HADOOP_HOME/hadoop-examples-1.2.1.jar pi 10 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;日志查看 : &lt;code&gt;ls $HADOOP_HOME/logs/*-cj.log&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;header-8&quot;&gt;Hadoop2.x 安装&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装Hadoop&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上传并解压&lt;pre&gt;&lt;code&gt;&amp;gt; tar -zxvf hadoop-2.7.2.tar.gz -C /home/hadoop/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;配置环境变量（HADOOP_INSTALL，PATH）： &lt;code&gt;/etc/profile&lt;/code&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; vi /etc/profile
export HADOOP_INSTALL=/home/hadoop/hadoop-2.7.2
export PATH=$PATH:$HADOOP_INSTALL/bin:$HADOOP_INSTALL/sbin
&amp;gt; source /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hadoop-env.sh&lt;/code&gt; （配置JAVA_HOME）&lt;pre&gt;&lt;code class=&quot;nullshell&quot;&gt;export JAVA_HOME=/usr/java
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;core-site.xml&lt;/code&gt; (同Hadoop1.x)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hdfs-site.xml&lt;/code&gt;  (同Hadoop1.x)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mapred-site.xml&lt;/code&gt;&lt;pre&gt;&lt;code class=&quot;nullxml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 指定mr运行在yarn上 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;mapreduce.framework.name&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;yarn&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yarn-site.xml&lt;/code&gt;&lt;pre&gt;&lt;code class=&quot;nullxml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 指定YARN的老大（ResourceManager）的地址 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.hostname&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;cj.storm&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- reducer获取数据的方式 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.aux-services&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;mapreduce_shuffle&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启用进程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先启动HDFS：&lt;code&gt;start-dfs.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;再启动YARN：&lt;code&gt;start-yarn.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;验证&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程查看：&lt;code&gt;jps&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;web访问&lt;ul&gt;
&lt;li&gt;HDFS （&lt;a href=&quot;http://cj.storm:50070）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cj.storm:50070）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MapReduce （&lt;a href=&quot;http://cj.storm:8088）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cj.storm:8088）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;注意：在windows下需维护linux主机名和IP的映射关系（&lt;code&gt;C:\Windows\System32\drivers\etc&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;header-9&quot;&gt;集群模式部署&lt;/h4&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;3个节点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Master：NameNode,SecondeNameNode,JobTracker – cj.storm&lt;/li&gt;
&lt;li&gt;Slave1：DataNode,TaskTracker – user1.storm&lt;/li&gt;
&lt;li&gt;Slave2：DataNode,TaskTracker – user2.storm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;某个hadoop节点配置master和slave信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vi masters&lt;/code&gt; 配置secondnamenode host&lt;pre&gt;&lt;code&gt;#localhost
cj.storm
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vi slaves&lt;/code&gt; 配置datanode/tasktracker host&lt;pre&gt;&lt;code&gt;#localhost
user1.storm
user2.storm
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNS配置&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vi /etc/hosts&lt;/code&gt;&lt;pre&gt;&lt;code&gt;10.40.33.100  cj.storm cj
10.40.33.101 user1.storm user1
10.40.33.102 user2.storm user2
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同步到其他节点 &lt;code&gt;scp&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;同步DNS信息&lt;/li&gt;
&lt;li&gt;同步SSH &lt;code&gt;authorized_keys&lt;/code&gt;（注意权限问题）&lt;/li&gt;
&lt;li&gt;同步hadoop&lt;pre&gt;&lt;code&gt;&amp;gt; scp -rp /home/hadoop/hadoop-1.2.1 hadoop@user1.storm:~
&amp;gt; scp -rp /home/hadoop/hadoop-1.2.1 hadoop@user2.storm:~
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header-10&quot;&gt;日志&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;存放配置：【hadoop-env.sh】（默认在hadoop安装目录的logs下）&lt;pre&gt;&lt;code&gt;  &amp;gt; vi $HADOOP_HOME/conf/hadoop-env.sh
  export HADOOP_LOG_DIR=${HADOOP_HOME}/logs
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;命名规则：【hadoop-用户名-进程名-主机名-日志格式后缀】&lt;br&gt;  &lt;img src=&quot;/2016/05/01/log.png&quot; alt=&quot;Hadoop Log &quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.log&lt;/code&gt;：通过log4j记录，日滚动，内容比全&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.out&lt;/code&gt;：记录标准输出和错误的日志，默认情况系统保留最新5个日志文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header-11&quot;&gt;配置文件说明&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;优先级：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;core&lt;/code&gt; &amp;lt;  &lt;code&gt;hdfs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;core&lt;/code&gt;&amp;lt; &lt;code&gt;mapred&lt;/code&gt; &amp;lt; &lt;code&gt;yarn&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;core-site.xml （默认：&lt;code&gt;core-default.xml&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;hdfs-site.xml （默认：&lt;code&gt;hdfs-default.xml&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;mapred-site.xml （默认：&lt;code&gt;mapred-default.xml&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;yarn-site.xml (Hadoop2.x)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;header-12&quot;&gt;HDFS&lt;/h2&gt;
&lt;p&gt;把客户端的&lt;code&gt;大文件&lt;/code&gt;存放在&lt;code&gt;很多节点&lt;/code&gt;的&lt;code&gt;数据块&lt;/code&gt;中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2016/05/01/hdfs.png&quot; alt=&quot;Hadoop hdfs &quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;header-13&quot;&gt;各进程说明&lt;/h3&gt;
&lt;h4 id=&quot;header-14&quot;&gt;Namenode &amp;amp; Secondary&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Namenode&lt;/code&gt; 负责管理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收用户的操作请求&lt;/li&gt;
&lt;li&gt;管理数据节点和文件目录结构&lt;/li&gt;
&lt;li&gt;始终在内存中维护&lt;code&gt;metadata&lt;/code&gt; （元数据）&lt;ul&gt;
&lt;li&gt;内容：&lt;code&gt;FileName, replicas, block-ids,id2host,...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;eg: &lt;code&gt;/test/a.log, 3 ,{blk_1,blk_2}, [{blk_1:[h0,h1,h3]},{blk_2:[h0,h2,h4]}],...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Namenode&lt;/code&gt; 主要维护的文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fsimage&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;元数据镜像文件，即namenode中metedata的镜像（存放位置配置&lt;code&gt;dfs.name.dir&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;文件目录与数据块之间的关系（&lt;code&gt;name &amp;lt;=&amp;gt; block&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;静态&lt;/code&gt;：&lt;ul&gt;
&lt;li&gt;不随时与namenode内存中的metedata保持一致&lt;/li&gt;
&lt;li&gt;每隔一段时间由SecondNamenode合并fsimage和edits，推送给Namenode更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;edits&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;操作日志文件（存放位置配置&lt;code&gt;dfs.name.edit.dir&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;数据块与节点之间的关系（&lt;code&gt;block &amp;lt;=&amp;gt; node&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;动态变化&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;每次Namenode启动时rebuilt到内存中&lt;/li&gt;
&lt;li&gt;写请求到来时，namenode先向edits文件中写日志，成功后更新内存中的metadata，向客户端返回&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fstime&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;保存最近一次checkpoint的时间&lt;/li&gt;
&lt;li&gt;checkpiont 时机设置&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fs.checkpoint.period&lt;/code&gt; ：指定两次checkpoint的最大时间间隔（默认3600秒）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.checkpoint.size&lt;/code&gt; ：规定edits文件的最大值，超过则强制checkpoint（默认64M）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;SecondaryNamenode&lt;/code&gt; 辅助Namenode :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HA的一个解决方案，但不支持热备&lt;/li&gt;
&lt;li&gt;监控HDFS状态的辅助后台程序&lt;/li&gt;
&lt;li&gt;每隔一段时间获取HDFS元数据的快照&lt;ul&gt;
&lt;li&gt;通知Namenode切换edits&lt;/li&gt;
&lt;li&gt;从Namenode下载fsimage和edits&lt;/li&gt;
&lt;li&gt;合并生成新的fsimage，推送至NameNode&lt;/li&gt;
&lt;li&gt;NameNode替换旧的fsimage&lt;br&gt;&lt;img src=&quot;/2016/05/01/namenode-meta.png&quot; alt=&quot;Hadoop NameNode Metadata &quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;header-15&quot;&gt;Datanode&lt;/h4&gt;
&lt;p&gt;负责存储：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储位置：${hadoop.tmp.dir}/dfs/data&lt;/li&gt;
&lt;li&gt;文件块数据（block）&lt;ul&gt;
&lt;li&gt;HDFS 最基本的存储单位&lt;/li&gt;
&lt;li&gt;文件被分成block存储在磁盘上&lt;/li&gt;
&lt;li&gt;为保证数据安全，block会有多个副本，存放在不同物理机上（默认为3个，配置&lt;code&gt;dfs.replication&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;块数据的校验和（meta）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个文件小于一个Block的大小时，只占用一个block，占有磁盘空间为文件实际大小（与普通文件系统不同）&lt;/li&gt;
&lt;li&gt;HDFS适合存储大文件，不适合小文件&lt;ul&gt;
&lt;li&gt;每个文件占用的block在namenode内存中都有管理&lt;/li&gt;
&lt;li&gt;多个小文件也许只占用一个block，对存储并不影响，但对namenode有影响（会增加namenode的内存压力）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Block也不易太大，会增加读写复制移动重传等操作压力&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header-16&quot;&gt;HDFS 的web 接口&lt;/h3&gt;
&lt;p&gt;HDFS 对外提供了可供访问的http server，开放了很多端口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;core-site.xml,hdfs-site.xml&lt;ul&gt;
&lt;li&gt;Namenode：dfs.http.address&lt;/li&gt;
&lt;li&gt;Datanode：dfs.datanode.http.address&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mapred-site.xml&lt;ul&gt;
&lt;li&gt;JobTracker：mapred.job.tracker.http.addresss&lt;/li&gt;
&lt;li&gt;TaskTracker：mapred.task.tracker.http.address&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header-17&quot;&gt;Shell Cmd&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; hadoop fs -ls                              # list  /home/&amp;lt;currentUser&amp;gt;
&amp;gt; hadoop fs -ls /                            # list HDFS根目录下的内容
&amp;gt; hadoop fs -ls hdfs://cj.storm:9000/        # list HDFS根目录下的内容
&amp;gt; hadoop fs -lsr hdfs://cj.storm:9000/       # list HDFS as tree
&amp;gt; hadoop fs -mkdir hdfs://cj.storm:9000/dl
&amp;gt; hadoop fs -put /usr/local/tomcat1/logs/localhost_access_log.2015-07-15.txt hdfs://cj.storm:9000/dl
&amp;gt; hadoop fs -text hdfs://cj.storm:9000/dl/localhost_access_log.2015-07-15.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;hadoop fs&lt;/code&gt;命令选项列表：&lt;/p&gt;
&lt;table class=&quot;table&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选项名称&lt;/th&gt;
&lt;th&gt;使用格式&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-ls&lt;/td&gt;
&lt;td&gt;-ls &amp;lt;路径&amp;gt;&lt;/td&gt;
&lt;td&gt;查看指定路径的当前目录结构&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-lsr&lt;/td&gt;
&lt;td&gt;-lsr &amp;lt;路径&amp;gt;&lt;/td&gt;
&lt;td&gt;递归查看指定路径的目录结构&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-du&lt;/td&gt;
&lt;td&gt;-du &amp;lt;路径&amp;gt;&lt;/td&gt;
&lt;td&gt;统计目录下个文件大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-dus&lt;/td&gt;
&lt;td&gt;-dus &amp;lt;路径&amp;gt;&lt;/td&gt;
&lt;td&gt;汇总统计目录下文件(夹)大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-count&lt;/td&gt;
&lt;td&gt;-count [-q]&lt;/td&gt;
&lt;td&gt;&amp;lt;路径&amp;gt; 统计文件(夹)数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-mv&lt;/td&gt;
&lt;td&gt;-mv &amp;lt;源路径&amp;gt; &amp;lt;目的路径&amp;gt;&lt;/td&gt;
&lt;td&gt;移动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-cp&lt;/td&gt;
&lt;td&gt;-cp &amp;lt;源路径&amp;gt;&lt;/td&gt;
&lt;td&gt;&amp;lt;目的路径&amp;gt; 复制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-rm&lt;/td&gt;
&lt;td&gt;-rm [-skipTrash] &amp;lt;路径&amp;gt;&lt;/td&gt;
&lt;td&gt;删除文件/空白文件夹&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-rmr&lt;/td&gt;
&lt;td&gt;-rmr [-skipTrash] &amp;lt;路径&amp;gt;&lt;/td&gt;
&lt;td&gt;递归删除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-put&lt;/td&gt;
&lt;td&gt;-put &amp;lt;多个linux 上的文件&amp;gt; &lt;hdfs 路径=&quot;&quot;&gt;&lt;/hdfs&gt;&lt;/td&gt;
&lt;td&gt;上传文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-copyFromLocal&lt;/td&gt;
&lt;td&gt;-copyFromLocal &amp;lt;多个linux 上的文件&amp;gt; &lt;hdfs 路径=&quot;&quot;&gt;&lt;/hdfs&gt;&lt;/td&gt;
&lt;td&gt;从本地复制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-moveFromLocal&lt;/td&gt;
&lt;td&gt;-moveFromLocal &amp;lt;多个linux 上的文件&amp;gt; &lt;hdfs 路径=&quot;&quot;&gt;&lt;/hdfs&gt;&lt;/td&gt;
&lt;td&gt;从本地移动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-getmerge&lt;/td&gt;
&lt;td&gt;-getmerge &amp;lt;源路径&amp;gt; &lt;linux 路径=&quot;&quot;&gt;&lt;/linux&gt;&lt;/td&gt;
&lt;td&gt;合并到本地&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-cat&lt;/td&gt;
&lt;td&gt;-cat &lt;hdfs 路径=&quot;&quot;&gt;&lt;/hdfs&gt;&lt;/td&gt;
&lt;td&gt;查看文件内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-text&lt;/td&gt;
&lt;td&gt;-text &lt;hdfs 路径=&quot;&quot;&gt;&lt;/hdfs&gt;&lt;/td&gt;
&lt;td&gt;查看文件内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-copyToLocal&lt;/td&gt;
&lt;td&gt;-copyToLocal [-ignoreCrc] [-crc] [hdfs 源路径] [linux 目的路径]&lt;/td&gt;
&lt;td&gt;从本地复制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-moveToLocal&lt;/td&gt;
&lt;td&gt;-moveToLocal [-crc] &lt;hdfs 源路径=&quot;&quot;&gt; &lt;linux目的路径&gt;&lt;/linux目的路径&gt;&lt;/hdfs&gt;&lt;/td&gt;
&lt;td&gt;从本地移动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-mkdir&lt;/td&gt;
&lt;td&gt;-mkdir &lt;hdfs 路径=&quot;&quot;&gt;&lt;/hdfs&gt;&lt;/td&gt;
&lt;td&gt;创建空白文件夹&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-setrep&lt;/td&gt;
&lt;td&gt;-setrep [-R] [-w] &amp;lt;副本数&amp;gt; &amp;lt;路径&amp;gt;&lt;/td&gt;
&lt;td&gt;修改副本数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-touchz&lt;/td&gt;
&lt;td&gt;-touchz &amp;lt;文件路径&amp;gt;&lt;/td&gt;
&lt;td&gt;创建空白文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-stat&lt;/td&gt;
&lt;td&gt;-stat [format] &amp;lt;路径&amp;gt;&lt;/td&gt;
&lt;td&gt;显示文件统计信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-tail&lt;/td&gt;
&lt;td&gt;-tail [-f] &amp;lt;文件&amp;gt;&lt;/td&gt;
&lt;td&gt;查看文件尾部信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-chmod&lt;/td&gt;
&lt;td&gt;-chmod [-R] &amp;lt;权限模式&amp;gt; [路径]&lt;/td&gt;
&lt;td&gt;修改权限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-chown&lt;/td&gt;
&lt;td&gt;-chown [-R] [属主][:[属组]]&lt;/td&gt;
&lt;td&gt;路径修改属主&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-chgrp&lt;/td&gt;
&lt;td&gt;-chgrp [-R]&lt;/td&gt;
&lt;td&gt;属组名称路径修改属组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-help&lt;/td&gt;
&lt;td&gt;-help [命令选项]&lt;/td&gt;
&lt;td&gt;帮助&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;header-18&quot;&gt;Java API&lt;/h3&gt;
&lt;h4 id=&quot;header-19&quot;&gt;URL&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;String HDFS_PATH=&lt;span class=&quot;string&quot;&gt;&quot;hdfs://cj.storm:9000&quot;&lt;/span&gt;;
&lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testURL&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException&lt;/span&gt;{
    URL.setURLStreamHandlerFactory(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FsUrlStreamHandlerFactory());
    URL url=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; URL(HDFS_PATH+&lt;span class=&quot;string&quot;&gt;&quot;/dl/localhost_access_log.2015-07-15.txt&quot;&lt;/span&gt;);
    InputStream in=url.openStream();
    IOUtils.copyBytes(in, System.out, &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;header-20&quot;&gt;FileSystem&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;nullxml&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- hdfs-site.xml --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;dfs.block.size&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;8388608&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;dfs.replication&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;String HDFS_PATH=&lt;span class=&quot;string&quot;&gt;&quot;hdfs://cj.storm:9000&quot;&lt;/span&gt;;
&lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testFileSystem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, URISyntaxException&lt;/span&gt;{
    FileSystem fileSystem=FileSystem.get(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; URI(HDFS_PATH),&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Configuration());

    &lt;span class=&quot;comment&quot;&gt;// create dir&lt;/span&gt;
    fileSystem.mkdirs(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(&lt;span class=&quot;string&quot;&gt;&quot;/t1&quot;&lt;/span&gt;));

    &lt;span class=&quot;comment&quot;&gt;//upload file&lt;/span&gt;
    FileInputStream in1=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileInputStream(&lt;span class=&quot;string&quot;&gt;&quot;D:/input/012.txt&quot;&lt;/span&gt;);
    FSDataOutputStream out=fileSystem.create(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(&lt;span class=&quot;string&quot;&gt;&quot;/t1/012.txt&quot;&lt;/span&gt;));
    IOUtils.copyBytes(in1,out,&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);

    &lt;span class=&quot;comment&quot;&gt;//file status -- upload by eclipse client (depends on project classpath:hdfs-site.xml)&lt;/span&gt;
    FileStatus status=fileSystem.getFileStatus(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(&lt;span class=&quot;string&quot;&gt;&quot;/t1/012.txt&quot;&lt;/span&gt;));
    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;012.txt&quot;&lt;/span&gt;);
    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;BlockSize:&quot;&lt;/span&gt;+status.getBlockSize());
    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Length:&quot;&lt;/span&gt;+status.getLen());
    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Replication:&quot;&lt;/span&gt;+status.getReplication());
    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;----------------------------&quot;&lt;/span&gt;);

    &lt;span class=&quot;comment&quot;&gt;//file status -- upload by hdfs cmd (depends on server conf/hdfs-site.xml)&lt;/span&gt;
    status=fileSystem.getFileStatus(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(&lt;span class=&quot;string&quot;&gt;&quot;/dl/localhost_access_log.2015-07-15.txt&quot;&lt;/span&gt;));
    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;localhost_access_log.2015-07-15.txt:&quot;&lt;/span&gt;);
    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;BlockSize:&quot;&lt;/span&gt;+status.getBlockSize());
    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Length:&quot;&lt;/span&gt;+status.getLen());
    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Replication:&quot;&lt;/span&gt;+status.getReplication());
    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;----------------------------&quot;&lt;/span&gt;);

    &lt;span class=&quot;comment&quot;&gt;//download file&lt;/span&gt;
    FSDataInputStream in2=fileSystem.open(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(&lt;span class=&quot;string&quot;&gt;&quot;/t1/012.txt&quot;&lt;/span&gt;));
    IOUtils.copyBytes(in2,System.out,&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);

    &lt;span class=&quot;comment&quot;&gt;// delete file or dir&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//boolean result=fileSystem.delete(new Path(&quot;/t1&quot;),true);&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//System.out.println(&quot;Delete:&quot;+result);&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：上传文件时，报&lt;code&gt;AccessControlException&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法1：set master server hdfs-site.xml dfs.permissions false&lt;/li&gt;
&lt;li&gt;方法2：hadoop fs -chmod 777 xxx&lt;/li&gt;
&lt;li&gt;方法3：change windows user to server user&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;header-21&quot;&gt;RPC&lt;/h2&gt;
&lt;h3 id=&quot;header-22&quot;&gt;概述&lt;/h3&gt;
&lt;p&gt;RPC：Remote Procedure Call&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;远程过程（对象方法）调用协议&lt;/li&gt;
&lt;li&gt;Client端触发，Server端运行，返回结果给Client&lt;/li&gt;
&lt;li&gt;不同java进程间对象方法的调用，Server端提供对象供Client端调用，被调用对象的方法执行发生在Server端&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header-23&quot;&gt;RPC示例&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Server端：&lt;ul&gt;
&lt;li&gt;Object：&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IStudent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;VersiondPrototocol&lt;/span&gt;&lt;/span&gt;{
   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; VERSION=&lt;span class=&quot;number&quot;&gt;2343L&lt;/span&gt;;
   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IStudent&lt;/span&gt;&lt;/span&gt;{
   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
       System.out.printIn(&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;); 
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;
   }
   &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getProtocolVersion&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String protocol,&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; clientVersion)&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException&lt;/span&gt;{
       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; IStudent.VERSION;
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;发布服务：&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;String Server_Address=&lt;span class=&quot;string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; Port=&lt;span class=&quot;number&quot;&gt;12345&lt;/span&gt;;
Server server=RPC.getServer(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Student,Server_Address,Port,&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Configuration());
server.start();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Client端:&lt;ul&gt;
&lt;li&gt;Object Interface：&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IStudent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;VersiondPrototocol&lt;/span&gt;&lt;/span&gt;{
   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; VERSION=&lt;span class=&quot;number&quot;&gt;2343L&lt;/span&gt;;
   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;调用服务：&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;IStudent proxy=(IStudent)RPC.waitForProxy(IStudent.class,IStudent.VERSION,&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; InetSocketAddress(Server_Address,Server_Port),&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Configuration());
&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; result=proxy.sayHi();
System.out.print(result);
RPC.stopProxy(proxy);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header-24&quot;&gt;Hadoop RPC&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hadoop的整个体系结构就是构建在RPC之上的(见org.apache.hadoop.ipc)&lt;/li&gt;
&lt;li&gt;Namenode/JobTracker 实际就是RPC Server＋WebServer(Jetty)&lt;/li&gt;
&lt;li&gt;各节点间的通讯协议  &lt;code&gt;extends VersionedProtocol&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;header-25&quot;&gt;HDFS 提供的通讯协议&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ClientProtocol&lt;/code&gt; （&lt;code&gt;Client &amp;lt;=&amp;gt; Namenode&lt;/code&gt;）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Client端与NameNode（Server端）的通讯接口&lt;/li&gt;
&lt;li&gt;在Client端实际不能直接调用&lt;code&gt;ClientProtocol&lt;/code&gt;提供的方法，而是使用&lt;code&gt;FileSystem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;传送文件时，是直接传送到&lt;code&gt;Datanode&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;（NameNode记录相关信息，指定传送到哪个Datanode中）&lt;/li&gt;
&lt;li&gt;注意：文件不是传送到NameNode后由NameNode再向Datanode传送的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ClientDatanodeProtocol&lt;/code&gt; （&lt;code&gt;Client &amp;lt;=&amp;gt; Datanode&lt;/code&gt;）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Client端与DataNode（Server端）的通讯接口&lt;/li&gt;
&lt;li&gt;for block recovery&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;DatanodeProtocol&lt;/code&gt; （&lt;code&gt;Datanode &amp;lt;=&amp;gt; Namenode&lt;/code&gt;）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Datanode（Client端）与NameNode（Server端）的通讯接口&lt;/li&gt;
&lt;li&gt;主动向NameNode发送心跳(setHeartbeat)&lt;ul&gt;
&lt;li&gt;发送给Namenode的心跳中包含Datanode自身的一些信息&lt;/li&gt;
&lt;li&gt;NameNode返回回来的是下发给Datanode的命令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;NamenodeProtocol&lt;/code&gt; （&lt;code&gt;SecondaryNamenode &amp;lt;=&amp;gt; Namenode&lt;/code&gt;）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SecondaryNameNode（Client端）与NameNode（Server端）的通讯接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;Client端通过&lt;code&gt;DFSClient对象&lt;/code&gt;与NameNode，Datanode通讯&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DFSClient&lt;/code&gt;内部：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用&lt;code&gt;ClientProtocol&lt;/code&gt;对象方法与NameNode通讯&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;DataStreamer&lt;/code&gt;在对应Datanode上写入或删除block&lt;br&gt;  （&lt;code&gt;DataStreamer&lt;/code&gt;内部会调用&lt;code&gt;DatanodeProtocol&lt;/code&gt;对象方法向NameNode确定blockId和block所写位置）&lt;/li&gt;
&lt;li&gt;例如：上传文件到HDFS&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//upload file&lt;/span&gt;
FileInputStream in1=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileInputStream(&lt;span class=&quot;string&quot;&gt;&quot;D:/input/012.txt&quot;&lt;/span&gt;);
FSDataOutputStream out=fileSystem.create(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(&lt;span class=&quot;string&quot;&gt;&quot;/t1/012.txt&quot;&lt;/span&gt;));
IOUtils.copyBytes(in1,out,&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&quot;/2016/05/01/hdfs-rpc.png&quot; alt=&quot;Hadoop rpc &quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;header-26&quot;&gt;MapReduce 提供的通讯协议&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;JobSubmissionProtocol&lt;/code&gt; （&lt;code&gt;Client &amp;lt;=&amp;gt; JobTracker&lt;/code&gt;）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用JobSubmissionProtocol的submitJob，即执行是JobTracker（Server端）的submitJob&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;InterTrackerProtocol&lt;/code&gt; （&lt;code&gt;TaskTracker &amp;lt;=&amp;gt; JobTracker&lt;/code&gt;）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用了heartbeat将tasktracker的状态通过RPC机制发送给jobTracker，返回值就是JobTracker的指令（方式同HDFS中的DatanodeProtocol）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;header-27&quot;&gt;MapReduce&lt;/h2&gt;
&lt;p&gt;MapReduce框架: 提供了统一的计算框架，为程序员隐藏了绝大多数系统层面的处理（数据存储、划分、分发、结果收集、错误恢复等）细节&lt;/p&gt;
&lt;p&gt;MR 思想：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分而治之，化整为零&lt;/li&gt;
&lt;li&gt;排序优化，降低内存&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header-28&quot;&gt;版本说明&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;hadoop 0.x 一般使用包 mapred&lt;ul&gt;
&lt;li&gt;mapper: extends MapReduceBase implements Mapper&lt;k, v,=&quot;&quot; k,=&quot;&quot; v=&quot;&quot;&gt;&lt;/k,&gt;&lt;/li&gt;
&lt;li&gt;reducer: extends MapReduceBase implements Reducer&lt;k, v,=&quot;&quot; k,=&quot;&quot; v=&quot;&quot;&gt;&lt;/k,&gt;&lt;/li&gt;
&lt;li&gt;job: JobConf,JobClient.runJob(jobConf)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;hadoop 1.x 一般使用包 mapreduce&lt;ul&gt;
&lt;li&gt;mapper: extends Mapper&lt;keyin, valuein,=&quot;&quot; keyout,=&quot;&quot; valueout=&quot;&quot;&gt;&lt;/keyin,&gt;&lt;/li&gt;
&lt;li&gt;reducer: extends Reducer&lt;keyin,valuein,keyout,valueout&gt;&lt;/keyin,valuein,keyout,valueout&gt;&lt;/li&gt;
&lt;li&gt;job: Job,job.waitForComplete(true);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;header-29&quot;&gt;各进程说明&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;JobTracker&lt;/code&gt; 负责管理 （master，只有一个）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收用户提交的计算任务&lt;/li&gt;
&lt;li&gt;分配计算任务给TaskTrackers执行&lt;/li&gt;
&lt;li&gt;监控TaskTracker的执行情况&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;TaskTracker&lt;/code&gt; 负责具体计算任务（slave，可有多个）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行JobTracker分配的计算任务&lt;/li&gt;
&lt;li&gt;管理各个任务在每个节点上的执行情况&lt;/li&gt;
&lt;li&gt;可负责MapTask或ReduceTask&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;header-30&quot;&gt;执行流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;客户端提交一个mr的jar包给JobClient(提交方式：hadoop jar …)&lt;/li&gt;
&lt;li&gt;JobClient通过RPC和JobTracker进行通信，返回一个存放jar包的地址（HDFS）和jobId&lt;/li&gt;
&lt;li&gt;client将jar包写入到HDFS当中(path = hdfs上的地址 + jobId)&lt;/li&gt;
&lt;li&gt;开始提交任务(任务的描述信息，不是jar, 包括jobid，jar存放的位置，配置信息等等)&lt;/li&gt;
&lt;li&gt;JobTracker进行初始化任务&lt;/li&gt;
&lt;li&gt;读取HDFS上的要处理的文件，开始计算输入分片，每一个分片对应一个MapperTask&lt;/li&gt;
&lt;li&gt;TaskTracker通过心跳机制领取任务（任务的描述信息）&lt;/li&gt;
&lt;li&gt;下载所需的jar，配置文件等&lt;/li&gt;
&lt;li&gt;TaskTracker启动一个java child子进程，用来执行具体的任务（MapperTask或ReducerTask）&lt;/li&gt;
&lt;li&gt;将结果写入到HDFS当中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/2016/05/01/mapreduce.png&quot; alt=&quot;Hadoop MapReduce &quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;header-31&quot;&gt;并行计算模型&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/2016/05/01/map-reduce.png&quot; alt=&quot;Hadoop MapReduce &quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;InputFormat&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InputFormat&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;K&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;V&lt;/span&gt;&amp;gt; &lt;/span&gt;{
 InputSplit[] getSplits(JobConf job, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; numSplits) &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException;
 &lt;span class=&quot;function&quot;&gt;RecordReader&amp;lt;K, V&amp;gt; &lt;span class=&quot;title&quot;&gt;getRecordReader&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(InputSplit split,JobConf job, Reporter reporter)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;InputSplit：分片（逻辑上）&lt;/li&gt;
&lt;li&gt;RecordReader：分片读取器&lt;ul&gt;
&lt;li&gt;break data into &lt;code&gt;key-value pairs&lt;/code&gt; for input to the mapper (byte-oriented view =&amp;gt; record-oriented view)&lt;/li&gt;
&lt;li&gt;processing &lt;code&gt;record boundaries&lt;/code&gt; (eg：LineRecordReader 对每个Split会多读取一行)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mapper (&lt;code&gt;byte-oriented=&amp;gt;&amp;lt;k1,v1&amp;gt;=&amp;gt;&amp;lt;k2,v2&amp;gt;&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{
 setup(context);
 &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
   &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (context.nextKeyValue()) {
     map(context.getCurrentKey(), context.getCurrentValue(), context);
   }
 } &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; {
   cleanup(context);
 }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Context extends MapContext extends TaskInputOutputContext&lt;ul&gt;
&lt;li&gt;InputSplit split&lt;/li&gt;
&lt;li&gt;RecordReader&lt;keyin,valuein&gt; reader&lt;/keyin,valuein&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shuffle&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3.1 Mapper端&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Partitioner&lt;/code&gt; – 分区（逻辑上，将key-value pairs 划分到不同reducer的标记）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sort&lt;/code&gt; – 本地Mapper的数据，在不同分区中，按key排序&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Combiner&lt;/code&gt; (optional) – 按key分组后进行规约（本地的reduce &lt;code&gt;&amp;lt;k,v&amp;gt;=&amp;gt;&amp;lt;k,{v1,v2,...}&amp;gt;&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;CompressionCode (optional) – 压缩&lt;/li&gt;
&lt;li&gt;Mapper output (on HDFS)  – 物理上Partition输出（eg: part-r-00000,part-r-00001,…）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3.2 Reducer端&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Copy&lt;/code&gt; – 从各个Mapper端copy对应分区的数据到Reducer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sort &amp;amp; Merge&lt;/code&gt; – 各个Mapper来的数据，按key合并排序 (&lt;code&gt;&amp;lt;k,v&amp;gt; =&amp;gt; &amp;lt;k,{v1,v2,...}&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reducer (&lt;code&gt;&amp;lt;k,{v1,v2,...}&amp;gt; =&amp;gt; &amp;lt;k,v&amp;gt;&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{
 setup(context);
 &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
   &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (context.nextKey()) {
     reduce(context.getCurrentKey(), context.getValues(), context);
   }
 } &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; {
   cleanup(context);
 }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Context extends ReduceContext extends TaskInputOutputContext&lt;ul&gt;
&lt;li&gt;RawKeyValueIterator input&lt;/li&gt;
&lt;li&gt;RawComparator&lt;keyin&gt; comparator&lt;/keyin&gt;&lt;/li&gt;
&lt;li&gt;Deserializer&lt;keyin&gt; keyDeserializer&lt;/keyin&gt;&lt;/li&gt;
&lt;li&gt;Deserializer&lt;valuein&gt; valueDeserializer&lt;/valuein&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OutputFormat&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OutputFormat&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;K&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;V&lt;/span&gt;&amp;gt; &lt;/span&gt;{
 &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; RecordWriter&amp;lt;K, V&amp;gt; &lt;span class=&quot;title&quot;&gt;getRecordWriter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TaskAttemptContext context )&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException&lt;/span&gt;;
 &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;checkOutputSpecs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JobContext context)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException&lt;/span&gt;;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; OutputCommitter &lt;span class=&quot;title&quot;&gt;getOutputCommitter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TaskAttemptContext context)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;RecordWriter 将key-value paris 输出到output file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MapTask&lt;/code&gt;： Mapper+Shuffle（Mapper端）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReduceTask&lt;/code&gt;：Reducer+Shuffle（Reducer端）&lt;/li&gt;
&lt;li&gt;Mapper数量=InputSplit数量&lt;ul&gt;
&lt;li&gt;由conf参数&lt;code&gt;mapred.min.split.size&lt;/code&gt;,&lt;code&gt;mapred.max.split.size,&lt;/code&gt;blockSize` 共同决定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;splitSize = max{minSize, min{maxSize, blockSize}}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一般为BlockSize，即有BlockNum个Split&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reducer数量=Partition数量&lt;ul&gt;
&lt;li&gt;由&lt;code&gt;job.setNumReduceTasks(..)&lt;/code&gt;设&lt;/li&gt;
&lt;li&gt;默认为1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Spill&lt;/code&gt; 溢出&lt;ul&gt;
&lt;li&gt;每个map有一个环形内存缓冲区，用于存储任务的输出&lt;/li&gt;
&lt;li&gt;一旦达到阀值，后台线程把内容写到一个溢出写文件（partition，sort，combiner-optional 后再写入）&lt;/li&gt;
&lt;li&gt;Mapper完成后，合并全部溢出写文件为各个分区且排序的文件，供Reducer使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io.sort.mb&lt;/code&gt; 设置缓冲区大小（默认100M）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io.sort.spill.percent&lt;/code&gt;设置阀值（默认0.8）&lt;br&gt;&lt;img src=&quot;/2016/05/01/map-reduce2.png&quot; alt=&quot;Hadoop MapReduce &quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header-32&quot;&gt;Partitioner&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Partition作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负载均衡 （对Mapper产生的中间结果进行分区，以便交给各个Reducer并行处理，提高效率）&lt;/li&gt;
&lt;li&gt;如何分区是关键：要快，且尽量均匀&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;abstract Partitioner&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public abstract int getPartition(KEY key, VALUE value, int numPartitions);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回&lt;code&gt;[0,numPartitions-1]&lt;/code&gt;的数字，即分区标识&lt;/li&gt;
&lt;li&gt;Job默认使用&lt;code&gt;HashPartitioner&lt;/code&gt;，按key分区（相同key会划分到同一个reducer）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实现类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于hash分区的实现：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;which reducer=(hash &amp;amp; Integer.MAX_VALUE) % numReduceTasks&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HashPartitioner&lt;/code&gt; （默认）: hash为key.hashCode()&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BinaryPatitioner&lt;/code&gt;：对键值K的[rightOffset，leftOffset]这个区间取hash&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KeyFieldBasedPartitioner&lt;/code&gt;：提供了多个区间用于计算hash&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不基于hash分区的实现：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TotalOrderPartitioner&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;通过 trie 树，按照大小将数据分成若干个区间（分片）&lt;/li&gt;
&lt;li&gt;且保证后一个区间的所有数据均大于前一个区间数据&lt;/li&gt;
&lt;li&gt;通常用在数据&lt;code&gt;全排序&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;典型的应用实例：TeraSort，HBase批量数据导入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;header-33&quot;&gt;LocalAggregation&lt;/h3&gt;
&lt;p&gt;本地聚合，减少传输到reducer的数据量（注意处理不要影响最终结果）&lt;/p&gt;
&lt;p&gt;示例：计算平均值（输入文件每行记录：string,count）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;方式一： out-mapper Combiner （extends Reducer）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; /* 注意：mapper的输出键值对和reducer的输入键值对类型要匹配
 class Mapper
     method map(string word,integer count)
         Emit(word,count)
 */
 class Mapper
     method map(string word,integer count)
         Emit(word,pair(count,1))

 class Combiner
     method reduce(string word,integer-list [c1,c2,...])
         sum := 0
         cnt := 0
         foreach integer c in [c1,c2,...]
             sum := sum+c
             cnt := cnt+1
         Emit(word,pair(sum,cnt))

 class Reducer
     method reduce(string word,pairs[(s1,c1),(s2,c2),...])
         sum := 0
         cnt := 0
         foreach pair(s,c) in pairs[(s1,c1),(s2,c2),...]
             sum := sum+s
             cnt := cnt+c
         avg := sum/cnt
         Emit(word,avg)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方案二：in-mapper Combiner （map时统计，cleanup时emit）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; class Mapper
     method setup
         S := new AssociativeArray
         C := new AssociativeArray
     method map(string word,integer count)
         S{word} := S{word}+count
         C{word} := C{word}+1
     method cleanup
         foreach word in S
             Emit(word,pair(S{word},C{word}))

 //class Reducer 同上
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;注：&lt;ul&gt;
&lt;li&gt;方案二更高效（方案一并没有减少在mapper产生的key-value对数量）&lt;/li&gt;
&lt;li&gt;方案二需注意内存溢出问题，可通过周期性的“flush“内存中的数据来解决&lt;/li&gt;
&lt;li&gt;例如修改为：&lt;pre&gt;&lt;code&gt;/* mapper读入K条时，就flush H （emit &amp;amp; clear）*/
class Mapper
  method setup
      S := new AssociativeArray
      C := new AssociativeArray
      limit:=100
  method map(string word,integer count)
      S{word} := S{word}+count
      C{word} := C{word}+1
      if(S.size()&amp;gt;100)
             foreach word in S
                    Emit(word,pair(S{word},C{word}))
      else
             S.clear();
             C.clear();
  method cleanup
      foreach word in S
          Emit(word,pair(S{word},C{word}))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;header-34&quot;&gt;Key-Value 数据类型&lt;/h3&gt;
&lt;p&gt;MapReduce中的Key-Value：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Key：必须实现&lt;code&gt;interface WritableComparable&lt;/code&gt; （一般需要重写toString,hashCode,equals方法）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WritableComparable&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Writable&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Comparable&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;{
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;内部可另外实现一个比较优化器&lt;code&gt;WritableComparator&lt;/code&gt;（implements RawComparator），实现直接比较数据流中的数据（无需反序列化为对象后比较）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Value：必须实现&lt;code&gt;interface Writable&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Writable&lt;/span&gt; &lt;/span&gt;{
      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(DataOutput out)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException&lt;/span&gt;;    &lt;span class=&quot;comment&quot;&gt;//Serialize&lt;/span&gt;
      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;readFields&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(DataInput in)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//Deserialize&lt;/span&gt;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接口说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Writable&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据 java.io 的&lt;code&gt;DataInput&lt;/code&gt; 和 &lt;code&gt;DataOutput&lt;/code&gt; 实现的简单、有效的序列化对象&lt;/li&gt;
&lt;li&gt;用于进程间通信，永久存储&lt;/li&gt;
&lt;li&gt;Hadoop中一些Java类型对应的Writable封装&lt;table class=&quot;table&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Java类型&lt;/th&gt;
&lt;th&gt;WritableComparable&lt;/th&gt;
&lt;th&gt;序列化后长度&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;BooleanWritable&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;byte&lt;/td&gt;
&lt;td&gt;ByteWritable&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;IntWritable&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;VIntWritable&lt;/td&gt;
&lt;td&gt;1～5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;td&gt;LongWritable&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;td&gt;VLongWritable&lt;/td&gt;
&lt;td&gt;1～9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;FloatWritable&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;DoubleWritable&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;NullWritable&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;eg:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;  Text text = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Text(&lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;);
  text.toString();
  text.set(&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);

  IntWritable one = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IntWritable(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
  one.get();
  one.set(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;RawComparator&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优化比较，允许直接比较流中的记录，省去反序列化对象的开销&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RawComparator&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Comparator&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;{
    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] b1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l1, &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] b2, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s2, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l2)&lt;/span&gt;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WritableComparator&lt;/code&gt;是&lt;code&gt;RawComparator&lt;/code&gt;对&lt;code&gt;WritableComparable&lt;/code&gt;类的一个通用实现&lt;ul&gt;
&lt;li&gt;compare默认实现：从数据流中反序列化出对象，使用对象的compareTo方法比较&lt;/li&gt;
&lt;li&gt;充当了RawComparator实例的一个工厂方法&lt;/li&gt;
&lt;li&gt;可通过静态方法注册比较器：&lt;code&gt;WritableComparator.define(Class c,WritableComparator comparator)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;例如：IntWritable 中注册使用了RawComparator&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Comparator&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WritableComparator&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(IntWritable.class);
  }
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] b1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l1,
                     &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] b2, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s2, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l2)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; thisValue = readInt(b1, s1);
    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; thatValue = readInt(b2, s2);
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (thisValue&amp;lt;thatValue ? -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : (thisValue==thatValue ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));
  }
}
&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; {     &lt;span class=&quot;comment&quot;&gt;// register this comparator&lt;/span&gt;
  WritableComparator.define(IntWritable.class, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Comparator());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;在Job中，也可通过&lt;code&gt;job.setCombinerClass(cls)&lt;/code&gt;设置key的比较器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;header-35&quot;&gt;Input &amp;amp; Output&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;InputFormat&lt;/code&gt; 负责处理MapReduce的输入部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有三个作用:&lt;ul&gt;
&lt;li&gt;验证作业的输入是否规范（例如输入路径是否存在等）&lt;/li&gt;
&lt;li&gt;把输入文件按照一定规则切分成&lt;code&gt;InputSplit&lt;/code&gt;（逻辑上），每个InputSplit 由一个Mapper执行&lt;ul&gt;
&lt;li&gt;InputSplit 接口方法：&lt;code&gt;getLength&lt;/code&gt;，&lt;code&gt;getLocations&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提供&lt;code&gt;RecordReader&lt;/code&gt; 的实现类，把InputSplit读到Mapper中进行处理&lt;ul&gt;
&lt;li&gt;RecordReader接口方法：&lt;code&gt;nextKeyValue&lt;/code&gt;,&lt;code&gt;getCurrentKey&lt;/code&gt;,&lt;code&gt;getCurrentValue&lt;/code&gt;等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;抽象方法：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;InputSplit[] getSplits(JobConf job, int numSplits) throws IOException;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RecordReader&amp;lt;K, V&amp;gt; getRecordReader(InputSplit split,JobConf job,Reporter reporter) throws IOException;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实现类:&lt;ul&gt;
&lt;li&gt;FileInputFormat&lt;table class=&quot;table&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;FileInputFormat&lt;/th&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TextInputFormat&lt;/td&gt;
&lt;td&gt;the byte offset of line&lt;/td&gt;
&lt;td&gt;line contents&lt;/td&gt;
&lt;td&gt;按行读取（默认）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NLineInputFormat&lt;/td&gt;
&lt;td&gt;the byte offset of line&lt;/td&gt;
&lt;td&gt;line contents&lt;/td&gt;
&lt;td&gt;可以控制在每个split中数据的行数，默认为1行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;KeyValueTextInputFormat&lt;/td&gt;
&lt;td&gt;first tab character&lt;/td&gt;
&lt;td&gt;the remainder of line&lt;/td&gt;
&lt;td&gt;按行读，第一列为key，其余为value （以tab区分列）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SequenceFileInputFormat&lt;/td&gt;
&lt;td&gt;user-defined&lt;/td&gt;
&lt;td&gt;user-defined&lt;/td&gt;
&lt;td&gt;二进制方式读取（一般为压缩文件）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CombineFileInputFormat&lt;/td&gt;
&lt;td&gt;user-defined&lt;/td&gt;
&lt;td&gt;user-defined&lt;/td&gt;
&lt;td&gt;将多个小文件合成一个split作为输入&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;RandomInputFormat&lt;/li&gt;
&lt;li&gt;DBInputFormat&lt;/li&gt;
&lt;li&gt;EmptyInputFormat&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;注意：FileInputFormat对于每个小于splitSize的文件当做一个split，并分配一个map任务，效率底下，可考虑使用CombineFileInputFormat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;OutputFormat&lt;/code&gt; 负责处理MapReduce的输出部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三个作用：&lt;ul&gt;
&lt;li&gt;验证作业的输出是否规范（例如输出路径是否已存在等）&lt;/li&gt;
&lt;li&gt;提供&lt;code&gt;RecordWriter&lt;/code&gt; 的实现类，把数据按某个格式写出&lt;/li&gt;
&lt;li&gt;提供&lt;code&gt;OutputCommitter&lt;/code&gt;实现类，维护管理side-effect file（临时存放结果数据的文件）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;抽象方法：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;void checkOutputSpecs(JobContext context)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RecordWriter&amp;lt;K, V&amp;gt; getRecordWriter(TaskAttemptContext context)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OutputCommitter getOutputCommitter(TaskAttemptContext context)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实现类：&lt;ul&gt;
&lt;li&gt;FileOutputFormat&lt;ul&gt;
&lt;li&gt;TextOutputFormat： “key /t value /n“格式输出（默认）&lt;/li&gt;
&lt;li&gt;SequenceFileOutputFormat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FilterOutputFormat&lt;ul&gt;
&lt;li&gt;LazyOutputFormat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DBOutputFormat&lt;/li&gt;
&lt;li&gt;NullOutputFormat&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header-36&quot;&gt;Counter&lt;/h3&gt;
&lt;p&gt;计数器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方便以全局的视角来审查程序的运行情况以及各项指标，及时做出错误诊断并进行相应处理&lt;/li&gt;
&lt;li&gt;例如: 一个MapReduce任务的输出&lt;pre&gt;&lt;code&gt;   Counters: 19                        // 共有19个计数器
     File Output Format Counters       // 【FileOutputFormat 组】
       Bytes Written=19                // reduce输出到hdfs的字节数
     FileSystemCounters                // 【FileSystem 组】
       FILE_BYTES_READ=481
       HDFS_BYTES_READ=38
       FILE_BYTES_WRITTEN=81316
       HDFS_BYTES_WRITTEN=19
     File Input Format Counters         // 【FileInputFormat 组】
       Bytes Read=19                    // map从hdfs读取的字节数
     Map-Reduce Framework               // 【MapReduce 组】
       Map output materialized bytes=49
       Map input records=2              // map读入的记录行数
       Reduce shuffle bytes=0
       Spilled Records=8
       Map output bytes=35
       Total committed heap usage (bytes)=266469376
       SPLIT_RAW_BYTES=105
       Combine input records=0
       Reduce input records=4            // reduce从map端接收的记录行数
       Reduce input groups=3             // reduce函数接收的key数量，即归并后的k2数量
       Combine output records=0
       Reduce output records=3           // reduce输出的记录行数
       Map output records=4              // map输出的记录行数
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Counter&lt;/code&gt; (implements Writable)&lt;ul&gt;
&lt;li&gt;成员变量：&lt;ul&gt;
&lt;li&gt;String name&lt;/li&gt;
&lt;li&gt;String displayName&lt;/li&gt;
&lt;li&gt;long value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;声明一个计数器&lt;ul&gt;
&lt;li&gt;&lt;code&gt;context.getCounter(Enum enum)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;context.getCounter(String groupName,String counterName)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设置计数器的值&lt;ul&gt;
&lt;li&gt;设置值：&lt;code&gt;counter.setValue(long value);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;增加计数：&lt;code&gt;counter.increment(long incr);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header-37&quot;&gt;全局数据&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;全局作业参数：保存在&lt;code&gt;Configuration&lt;/code&gt;中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;conf.setXxx(&amp;quot;...&amp;quot;,...);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;context.getConfiguration().getXxx(&amp;quot;...&amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;全局数据文件：使用&lt;code&gt;DistributedCache&lt;/code&gt;文件传递机制（适合小文件，可完整读取到内存中）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将文件传送到DistributedCache中,各节点从DistributedCache中将文件复制到本地的文件系统中使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DistributedCache.addCacheFile(uri, conf)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DistributedCache.getCacheFiles(conf)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;header-38&quot;&gt;MapReduce 应用示例&lt;/h2&gt;
&lt;p&gt;计数 去重 排序 TopKey 选择 投影 分组 多表连接 单表连接&lt;br&gt;倒排索引 Inverted index | 页面排序 PageRank | 词频统计分析 | 同现关系 （矩阵算法）&lt;br&gt;动态规划 | 快速排序 | 堆排序&lt;br&gt;图算法 | 聚类 | 推荐系统 | 机器学习 | 数据挖掘&lt;/p&gt;
&lt;h3 id=&quot;header-39&quot;&gt;统计&lt;/h3&gt;
&lt;p&gt;示例：文本单词数量统计&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;input:&lt;pre&gt;&lt;code&gt;ABC DEF AED
DIE EIL ABC
JFIE ABC DEF
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;output:&lt;pre&gt;&lt;code&gt;ABC 3
AED 1
DEF 2
DIE 1
EIL 1
JFIE 1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;最简版：map+reduce&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mapper&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WordCountMapper&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Mapper&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;LongWritable&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;IntWritable&lt;/span&gt;&amp;gt;&lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Text word=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Text();
      &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; IntWritable one=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IntWritable(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
      &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LongWritable key, Text value, Context context)&lt;/span&gt;
              &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{
          StringTokenizer itr=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringTokenizer(value.toString());
          &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(itr.hasMoreTokens()){
              word.set(itr.nextToken());
              context.write(word, one);
          }
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Reducer&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WordCountReducer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Reducer&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;IntWritable&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;IntWritable&lt;/span&gt;&amp;gt;&lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; IntWritable result=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IntWritable();
      &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Text key, Iterable&amp;lt;IntWritable&amp;gt; values,Context context)&lt;/span&gt;
              &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{
          &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sum=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
          &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(IntWritable val:values){
              sum+=val.get();
          }
          result.set(sum);
          context.write(key,result);
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优化版：map+local aggregation（in-mapper combiner）+reduce&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Mapper&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WordCountMapper&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Mapper&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;LongWritable&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;IntWritable&lt;/span&gt;&amp;gt;&lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Map&amp;lt;String,Integer&amp;gt; temp=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String,Integer&amp;gt;();
  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; limit=&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;;
  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException,
          InterruptedException &lt;/span&gt;{
      limit=context.getConfiguration().getInt(&lt;span class=&quot;string&quot;&gt;&quot;flush.limit&quot;&lt;/span&gt;, limit);
      i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
  }

  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LongWritable key, Text value, Context context)&lt;/span&gt;
          &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{
      StringTokenizer itr=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringTokenizer(value.toString());
      String word=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;
      Integer sum=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
      &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(itr.hasMoreTokens()){
          sum=temp.get(word);
          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sum==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)
              temp.put(word, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
          &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;
              temp.put(word,sum+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
          i++;
          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i==limit){
              cleanup(context);
              temp.clear();
              i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
          }
      }
  }

  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt;
          &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{
      Text word=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Text();
      IntWritable count=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IntWritable();
      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(String key:temp.keySet()){
          word.set(key);
          count.set(temp.get(key));
          context.write(word,count);
      }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Reducer&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WordCountReducer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Reducer&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;IntWritable&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;IntWritable&lt;/span&gt;&amp;gt;&lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; IntWritable result=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IntWritable();
  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Text key, Iterable&amp;lt;IntWritable&amp;gt; values,Context context)&lt;/span&gt;
          &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sum=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(IntWritable val:values){
          sum+=val.get();
      }
      result.set(sum);
      context.write(key,result);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Job&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, ClassNotFoundException, InterruptedException &lt;/span&gt;{
 Configuration conf=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Configuration();
 String[] otherArgs = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; GenericOptionsParser(conf, args).getRemainingArgs();
 &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (otherArgs.length != &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) {
   System.err.println(&lt;span class=&quot;string&quot;&gt;&quot;Usage: SimpleWordCount &amp;lt;in&amp;gt; &amp;lt;out&amp;gt;&quot;&lt;/span&gt;);
   System.exit(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);
 }

 &lt;span class=&quot;comment&quot;&gt;// delete exist output path&lt;/span&gt;
 FileSystem fs=FileSystem.get(conf);
 Path outputPath=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(otherArgs[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);
 &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fs.exists(outputPath)){
     fs.delete(outputPath, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);
 }

 Job job=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Job(conf,&lt;span class=&quot;string&quot;&gt;&quot;WordCount&quot;&lt;/span&gt;);
 job.setJarByClass(WordCount.class);
 &lt;span class=&quot;comment&quot;&gt;//1.Input&lt;/span&gt;
 FileInputFormat.addInputPath(job, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(otherArgs[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]));
 job.setInputFormatClass(TextInputFormat.class);
 &lt;span class=&quot;comment&quot;&gt;//2.Mapper&lt;/span&gt;
 job.setMapperClass(WordCountMapper.class);
 job.setMapOutputKeyClass(Text.class);
 job.setMapOutputValueClass(IntWritable.class);
 &lt;span class=&quot;comment&quot;&gt;//job.setCombinerClass(WordCountReducer.class);    // Optional&lt;/span&gt;
 &lt;span class=&quot;comment&quot;&gt;//3.Reducer&lt;/span&gt;
 job.setNumReduceTasks(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);
 job.setReducerClass(WordCountReducer.class);
 job.setOutputKeyClass(Text.class);
 job.setOutputValueClass(IntWritable.class);
 &lt;span class=&quot;comment&quot;&gt;//4.Output&lt;/span&gt;
 FileOutputFormat.setOutputPath(job,&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(otherArgs[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]));
 job.setOutputFormatClass(TextOutputFormat.class);

 &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; result=job.waitForCompletion(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);
 System.exit(result ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;header-40&quot;&gt;按值排序&lt;/h3&gt;
&lt;p&gt;示例：SecondarySort – first column desc ; second column asc&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;input:&lt;pre&gt;&lt;code&gt;A 1 r1994
B 2 r1995
C 1 r1998
B 1 r1992
A 3 r1994
C 2 r1992
A 2 r1995
C 3 r1996
B 3 r1998
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;output:&lt;pre&gt;&lt;code&gt;C (1,r1998) (2,r1992) (3,r1996)
B (1,r1992) (2,r1995) (3,r1998)
A (1,r1994) (2,r1995) (3,r1994)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现方案：用复合键让系统完成排序 (pairs)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在map和reduce阶段进行排序时，比较的是key&lt;/li&gt;
&lt;li&gt;value是不参与排序比较的&lt;/li&gt;
&lt;li&gt;想让value部分也进行排序，将value中需要排序的部分加入到key中形成复合键pairs&lt;/li&gt;
&lt;li&gt;此时分区，分组时也是按照新的复合键pairs&lt;/li&gt;
&lt;li&gt;可以自定义Partitioner仅对pair中原来的k进行散列，以保证原来同一key的键值对分区到同一个Reduce节点上&lt;/li&gt;
&lt;li&gt;可自定义Comparator仅对pair中原来的k进行比较分组，以保证原来同一key的键值对分到同一组&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Composite Key&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewK&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WritableComparable&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;NewK&lt;/span&gt;&amp;gt;&lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Text first;
  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; second;

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewK&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Text first,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; second)&lt;/span&gt;&lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.first=first;
      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.second=second;
  }

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Text &lt;span class=&quot;title&quot;&gt;getFirst&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; first;
  }
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setFirst&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Text first)&lt;/span&gt; &lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.first = first;
  }
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;title&quot;&gt;getSecond&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; second;
  }
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setSecond&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; second)&lt;/span&gt; &lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.second = second;
  }

  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(DataOutput out)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{
      first.write(out);
      out.writeInt(second);
  }
  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;readFields&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(DataInput in)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{
      first.readFields(in);
      second=in.readInt();
  }
  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(NewK o)&lt;/span&gt; &lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cmp=first.compareTo(o.first);
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cmp==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;?&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.second-o.second:cmp;
  }
  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.first.hashCode()+&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.second;
  }
  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object obj)&lt;/span&gt; &lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(obj &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; NewK){
          NewK o=(NewK)obj;
          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.first.equals(o.getFirst()) &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.second==o.getSecond();
      }
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;
  }
  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;[&quot;&lt;/span&gt;+&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.first+&lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;+&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.second+&lt;span class=&quot;string&quot;&gt;&quot;]&quot;&lt;/span&gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Mapper&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SecondarySortMapper&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Mapper&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;LongWritable&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;NewK&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;&amp;gt;&lt;/span&gt;{
  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LongWritable key, Text value, Context context)&lt;/span&gt;
          &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{
      StringTokenizer itr=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringTokenizer(value.toString());
      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(itr.countTokens()&amp;gt;=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;){
          NewK newK=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NewK(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Text(itr.nextToken()),Integer.parseInt(itr.nextToken()));
          context.write(newK, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Text(itr.nextToken()));
      }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shuffler&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Partitioner&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewKPartitioner&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Partitioner&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;NewK&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;&amp;gt;
&lt;/span&gt;{
  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getPartition&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(NewK key, Text value, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; numPartitions)&lt;/span&gt; &lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (key.getFirst().hashCode() &amp;amp; Integer.MAX_VALUE) % numPartitions;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SortComparator&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// first desc ; second asc&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewKSortComparator&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WritableComparator&lt;/span&gt;&lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Text.Comparator TEXT_COMPARATOR = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Text.Comparator();

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewKSortComparator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(NewK.class);
  }

  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] b1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l1, &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] b2, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s2,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l2)&lt;/span&gt; &lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
          &lt;span class=&quot;comment&quot;&gt;// 字节流中的Text字段：Len+Content=VInt+byte[]&lt;/span&gt;
          &lt;span class=&quot;comment&quot;&gt;// VInt:第一个byte描述VInt的长度，例如为n，则后面n-1个byte的内容为Text Content的长度&lt;/span&gt;
          &lt;span class=&quot;comment&quot;&gt;// 获取VInt的长度：WritableUtils.decodeVIntSize(b1[s1])&lt;/span&gt;
          &lt;span class=&quot;comment&quot;&gt;// 获取Content的长度（即VInt的值）：readVInt(b1, s1)&lt;/span&gt;
           &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; firstLen1=WritableUtils.decodeVIntSize(b1[s1])+readVInt(b1, s1);
           &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; firstLen2=WritableUtils.decodeVIntSize(b1[s1])+readVInt(b2,s2);
           &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cmp=TEXT_COMPARATOR.compare(b1, s1, firstLen1, b2, s2, firstLen2);
           &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(cmp!=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -cmp;
          &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; secondValue1=readInt(b1,s1+firstLen1);
          &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; secondValue2=readInt(b2,s2+firstLen2);
          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; secondValue1-secondValue2;
      } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
          &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(e);
      }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;GroupComparator&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewKGroupingComparator&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WritableComparator&lt;/span&gt;&lt;/span&gt;{
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewKGroupingComparator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(NewK.class);
  }
  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] b1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l1, &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] b2, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s2,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l2)&lt;/span&gt; &lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
          &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n1=WritableUtils.decodeVIntSize(b1[s1]);
          &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n2=WritableUtils.decodeVIntSize(b2[s2]);
          &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; firstContentLen1=readVInt(b1, s1);
          &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; firstContentLen2=readVInt(b2,s2);
          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; compareBytes(b1,s1+n1,firstContentLen1,b2,s2+n2,firstContentLen2);
      } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
          &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(e);
      }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reducer&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SecondarySortReducer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Reducer&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;NewK&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;&amp;gt;&lt;/span&gt;{
  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(NewK key, Iterable&amp;lt;Text&amp;gt; values,Context context)&lt;/span&gt;
          &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(Text val:values){
          context.write(key.getFirst(), &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Text(&lt;span class=&quot;string&quot;&gt;&quot;(&quot;&lt;/span&gt;+key.getSecond()+&lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;+val.toString()+&lt;span class=&quot;string&quot;&gt;&quot;)&quot;&lt;/span&gt;));
      }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Job&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, ClassNotFoundException, InterruptedException &lt;/span&gt;{
  Configuration conf=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Configuration();
  String[] otherArgs = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; GenericOptionsParser(conf, args).getRemainingArgs();
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (otherArgs.length != &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) {
    System.err.println(&lt;span class=&quot;string&quot;&gt;&quot;Usage: SecondarySort &amp;lt;in&amp;gt; &amp;lt;out&amp;gt;&quot;&lt;/span&gt;);
    System.exit(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);
  }

  &lt;span class=&quot;comment&quot;&gt;// delete exist output path&lt;/span&gt;
  FileSystem fs=FileSystem.get(conf);
  Path outputPath=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(otherArgs[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fs.exists(outputPath)){
      fs.delete(outputPath, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);
  }

  Job job=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Job(conf,&lt;span class=&quot;string&quot;&gt;&quot;SecondarySort&quot;&lt;/span&gt;);
  job.setJarByClass(SecondarySort.class);
  &lt;span class=&quot;comment&quot;&gt;//1.Input&lt;/span&gt;
  FileInputFormat.addInputPath(job, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(otherArgs[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]));
  job.setInputFormatClass(TextInputFormat.class);                    &lt;span class=&quot;comment&quot;&gt;//key:column1,value:remaining columns&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;//2.Mapper&lt;/span&gt;
  job.setMapperClass(SecondarySortMapper.class);
  job.setMapOutputKeyClass(NewK.class);
  job.setMapOutputValueClass(Text.class);
  job.setPartitionerClass(NewKShuffle.NewKPartitioner.class);             &lt;span class=&quot;comment&quot;&gt;// partition by NewK.first&lt;/span&gt;
  job.setSortComparatorClass(NewKShuffle.NewKSortComparator.class);        &lt;span class=&quot;comment&quot;&gt;// 确定Key排序策略：NewK.first&amp;amp;NewK.second（默认使用key的实现的compareTo方法）&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;//3.Reducer&lt;/span&gt;
  job.setNumReduceTasks(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);                                                  &lt;span class=&quot;comment&quot;&gt;// only one reducer for all-key sorted&lt;/span&gt;
  job.setGroupingComparatorClass(NewKShuffle.NewKGroupingComparator.class); &lt;span class=&quot;comment&quot;&gt;//确定分组策略：NewK.first相同，则属于同一个组（默认同上面setSortComparatorClass）&lt;/span&gt;
  job.setReducerClass(SecondarySortReducer.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  &lt;span class=&quot;comment&quot;&gt;//4.Output&lt;/span&gt;
  FileOutputFormat.setOutputPath(job,&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(otherArgs[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]));
  job.setOutputFormatClass(TextOutputFormat.class);

  &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; result=job.waitForCompletion(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);
  System.exit(result ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header-41&quot;&gt;TopK&lt;/h3&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;input:&lt;pre&gt;&lt;code&gt;A 39
Hello 34
K 93
B 123
Person 99
D 3023
C 39
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;output(top 3):&lt;pre&gt;&lt;code&gt;Person 99
B 123
D 3023
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reducer(1个): topk(S) = topk(topk(s1), topk(s2), topk(s3), …)&lt;/li&gt;
&lt;li&gt;TreeMap 自动排序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Mapper&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TopKMapper&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Mapper&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;IntWritable&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;IntWritable&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;&amp;gt;&lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; TreeMap&amp;lt;Integer,String&amp;gt; temp=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TreeMap&amp;lt;Integer,String&amp;gt;();
      &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; limitK=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;
      &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;

      &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException,InterruptedException &lt;/span&gt;{
          limitK=context.getConfiguration().getInt(&lt;span class=&quot;string&quot;&gt;&quot;top.k&quot;&lt;/span&gt;, limitK);
          i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
      }
      &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Text key, IntWritable value, Context context)&lt;/span&gt;
              &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{
          temp.put(value.get(), key.toString());
          i++;
          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i==limitK){
              temp.pollFirstEntry();    &lt;span class=&quot;comment&quot;&gt;//temp.remove(temp.firstKey());&lt;/span&gt;
              i--;
          }
      }
      &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException&lt;/span&gt;{
          &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(Integer key:temp.keySet()){
              context.write(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IntWritable(key), &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Text(temp.get(key)));
          }
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reducer&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TopKReducer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Reducer&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;IntWritable&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;IntWritable&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;&amp;gt;&lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; TreeMap&amp;lt;Integer,String&amp;gt; temp=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TreeMap&amp;lt;Integer,String&amp;gt;();
      &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; limitK=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;
      &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;

      &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException,InterruptedException &lt;/span&gt;{
          limitK=context.getConfiguration().getInt(&lt;span class=&quot;string&quot;&gt;&quot;top.k&quot;&lt;/span&gt;, limitK);
          i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
      }
      &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(IntWritable key, Iterable&amp;lt;Text&amp;gt; values,Context context)&lt;/span&gt;
              &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{
          temp.put(key.get(),values.toString());
          i++;
          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i==limitK){
              temp.pollFirstEntry();
              i--;
          }
      }
      &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException&lt;/span&gt;{
          &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(Integer key:temp.keySet()){
              context.write(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IntWritable(key), &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Text(temp.get(key)));
          }
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Job&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;  Job job=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Job(conf,&lt;span class=&quot;string&quot;&gt;&quot;TopK&quot;&lt;/span&gt;);
  job.setJarByClass(TopK.class);
  &lt;span class=&quot;comment&quot;&gt;//1.Input&lt;/span&gt;
  FileInputFormat.addInputPath(job, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(otherArgs[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]));
  job.setInputFormatClass(KeyValueTextInputFormat.class);                    &lt;span class=&quot;comment&quot;&gt;//key:Word,value:Count&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;//2.Mapper&lt;/span&gt;
  job.setMapperClass(TopKMapper.class);
  job.setMapOutputKeyClass(IntWritable.class);
  job.setMapOutputValueClass(Text.class);
  &lt;span class=&quot;comment&quot;&gt;//3.Reducer&lt;/span&gt;
  job.setNumReduceTasks(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);                                                &lt;span class=&quot;comment&quot;&gt;// only one reducer&lt;/span&gt;
  job.setReducerClass(TopKReducer.class);
  job.setOutputKeyClass(IntWritable.class);
  job.setOutputValueClass(Text.class);
  &lt;span class=&quot;comment&quot;&gt;//4.Output&lt;/span&gt;
  FileOutputFormat.setOutputPath(job,&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(otherArgs[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]));
  job.setOutputFormatClass(TextOutputFormat.class);

  &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; result=job.waitForCompletion(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);
  System.exit(result ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header-42&quot;&gt;全排序&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;最简版：归并排序（n个mapper+1个reduce）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Map 阶段：每个 Map Task进行局部排序；&lt;/li&gt;
&lt;li&gt;Reduce 阶段：启动一个 Reduce Task 进行全局排序&lt;/li&gt;
&lt;li&gt;注意： 由于作业只能有一个 Reduce Task，因而 Reduce 阶段会成为作业的瓶颈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优化版：使用TotalOrderPartitioner (Sampler+map+TotalOrderPartitioner+reduce)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Job1: 数据采样（InputSampler 通过采样获取分片的分割点，并写入partition file）&lt;ul&gt;
&lt;li&gt;Sampler：&lt;code&gt;K[] getSample(InputFormat&amp;lt;K,V&amp;gt; inf, Job job) ，&lt;/code&gt;Hadoop 自带了几个采样算法：&lt;ul&gt;
&lt;li&gt;IntervalSampler&lt;/li&gt;
&lt;li&gt;RandomSampler&lt;/li&gt;
&lt;li&gt;SplitSampler&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;writePartitionFile：根据Sampler提供的样本，排序后写入到partition file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Job2：MapReduce （使用TotalOrderpartitioner进行分区）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;优化版具体实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Job1: Sampler&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Sampler Job&lt;/span&gt;
  Job samplerJob=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Job(conf,&lt;span class=&quot;string&quot;&gt;&quot;TotalOrderSampler&quot;&lt;/span&gt;);
  samplerJob.setJarByClass(TotalOrder.class);
  FileInputFormat.addInputPath(samplerJob, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(otherArgs[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]));
  FileOutputFormat.setOutputPath(samplerJob,&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(otherArgs[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]));
  samplerJob.setInputFormatClass(KeyValueTextInputFormat.class);
  samplerJob.setNumReduceTasks(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);
  samplerJob.setOutputFormatClass(TextOutputFormat.class);

  RandomSampler&amp;lt;Text,Text&amp;gt; sampler=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RandomSampler&amp;lt;Text,Text&amp;gt;(&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);
  TotalOrderPartitioner.setPartitionFile(samplerJob.getConfiguration(),&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(otherArgs[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],&lt;span class=&quot;string&quot;&gt;&quot;sampler&quot;&lt;/span&gt;));
  InputSampler.writePartitionFile(samplerJob, sampler);     &lt;span class=&quot;comment&quot;&gt;// 默认使用TextInputFormat的Key取样&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Job2: MapReduce&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// MapReduce Job&lt;/span&gt;
  Job job=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Job(conf,&lt;span class=&quot;string&quot;&gt;&quot;TotalOrder&quot;&lt;/span&gt;);
  job.setJarByClass(TotalOrder.class);
  &lt;span class=&quot;comment&quot;&gt;//2.1 Input&lt;/span&gt;
  FileInputFormat.addInputPath(job, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(otherArgs[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]));
  job.setInputFormatClass(KeyValueTextInputFormat.class);    &lt;span class=&quot;comment&quot;&gt;// key:Word,value:Count&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;//2.2 Mapper&lt;/span&gt;
  job.setMapperClass(Mapper.class);                        &lt;span class=&quot;comment&quot;&gt;// default Mapper&lt;/span&gt;
  job.setMapOutputKeyClass(Text.class);
  job.setMapOutputValueClass(Text.class);
  job.setPartitionerClass(TotalOrderPartitioner.class);    &lt;span class=&quot;comment&quot;&gt;// Use TotalOrderPartitioner&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;//2.3 Reducer&lt;/span&gt;
  job.setNumReduceTasks(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);                                &lt;span class=&quot;comment&quot;&gt;// only one reducer&lt;/span&gt;
  job.setReducerClass(Reducer.class);                      &lt;span class=&quot;comment&quot;&gt;// default Reducer&lt;/span&gt;
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  &lt;span class=&quot;comment&quot;&gt;//2.4 Output&lt;/span&gt;
  FileOutputFormat.setOutputPath(job,&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(otherArgs[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]));
  job.setOutputFormatClass(TextOutputFormat.class);
  &lt;span class=&quot;comment&quot;&gt;//2.5 exec job&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; result=job.waitForCompletion(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);
  System.exit(result ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header-43&quot;&gt;多数据源连接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方案一：用DataJoin类实现Reduce端Join（Repartitioned Join：需加入hadoop-datajoin包）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mapper端: extends DataJoinMapperBase 打标签&lt;/li&gt;
&lt;li&gt;reducer端: extends DataJoinReducerBase 组合&lt;/li&gt;
&lt;li&gt;record: extends TaggedMapOutput 标签+数据&lt;br&gt;&lt;img src=&quot;/2016/05/01/datajoin-1.png&quot; alt=&quot;Hadoop 2.x DataJoin&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2016/05/01/datajoin-2.png&quot; alt=&quot;Hadoop 2.x DataJoin&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方案二：用文件复制实现Map端Join（Replicated Join： 把较小的数据源文件复制到每个Map节点,然后在Map阶段完成Join操作）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Job中：使用distributed cache机制用于将一个或多个文件分布复制到所有节点上&lt;ul&gt;
&lt;li&gt;addCacheFile(URI uri) 将一个文件放到distributed cache file中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mapper端&lt;ul&gt;
&lt;li&gt;setup：读取设置在distributed cache files中的文件（context.getLocalCacheFiles()）并读入内存&lt;/li&gt;
&lt;li&gt;map：join&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注意：即使较小的数据源文件，也可能仍然无法全部保存在内存中处理&lt;/li&gt;
&lt;li&gt;扩展示例：&lt;ul&gt;
&lt;li&gt;设有两个数据集S和 R，较小的数据集R可以被分为R1, R2, R3, ……的子集，且每个子集都足以存放在内存中处理&lt;/li&gt;
&lt;li&gt;则可以对先对每个Ri用Replicated Join进行与S的Join处理，最后将处理结果合并起来(Union)，得到S Join R&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;扩展：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mapper端：过滤，打标签&lt;ul&gt;
&lt;li&gt;过滤数据记录，生成一个仅包含join key(如 CustomerID)的过滤文件，存放在distributed cache file中&lt;/li&gt;
&lt;li&gt;过滤掉不在这个列表中的所有Customer记录和Order记录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;reducer端：join&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以上的多数据源Join只能是具有相同主键/外键的数据源间的连接&lt;/li&gt;
&lt;li&gt;例如：&lt;ul&gt;
&lt;li&gt;有三个数据源：Customers（CustomerID），Orders（CustomerID，ItemID），Products(ItemID)&lt;/li&gt;
&lt;li&gt;在mapReduce中将需要分两个MapReduce作业来完成三个数据源的Join&lt;/li&gt;
&lt;li&gt;第一个MapReduce作业：完成Customers与Orders的Join&lt;/li&gt;
&lt;li&gt;第二个MapReduce作业：完成第一个MapReduce Join的结果与Products的Join&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header-44&quot;&gt;链式任务&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;子任务顺序化执行（前面MapReduce任务的输出作为后面MapReduce的输入：mapreduce1-&amp;gt;mapreduce2-&amp;gt;…-&amp;gt;mapreduceN）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;  // job1
  Configuration jobconf1= new Configuration();
  job1 = new Job(jobconf1, “Job1&amp;quot;);
  job1.setJarByClass(jobclass1);
  ……
  FileInputFormat.addInputPath(job1,  inpath1);
  FileOutputFormat.setOutputPath(job1, outpath1);
  job1.waitForCompletion(true);

  // job2
  Configuration jobconf2= new Configuration();
  job2 = new Job(jobconf2, “Job2&amp;quot;);
  job2.setJarByClass(jobclass2);
  ……
  FileInputFormat.addInputPath(job2,  outpath1);
  FileOutputFormat.setOutputPath(job2, outpath2);
  job2.waitForCompletion(true);

  // job3
  Configuration jobconf3= new Configuration();
  job3 = new Job(jobconf3, “Job3&amp;quot;);
  job3.setJarByClass(jobclass3);
  ……
  FileInputFormat.addInputPath(job3,  outpath2);
  FileOutputFormat.setOutputPath(job3, outpath3);
  job3.waitForCompletion(true);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;子任务间具有数据依赖关系 （1,2并行，join后3：mapreduce1 || mapreduce 2 -&amp;gt; mapreduce3）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljava&quot;&gt;  jobx = new Job(jobxconf, “Jobx&amp;quot;);
  ……
  joby = new Job(jobyconf, “Joby&amp;quot;);
  ……
  jobz = new Job(jobzconf, “Jobz&amp;quot;);
  jobz.addDependingJob(jobx);  // jobz将等待jobx执行完毕
  jobz.addDependingJob(joby);  // jobz将等待joby执行完毕
  JobControl JC = new JobControl（“XYZJob”）；
  JC.addJob(jobx);
  JC.addJob(joby);
  JC.addJob(jobz);
  JC.run();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前处理和后处理步骤的链式执行 ：链式Mapper(ChainMapper)和链式Reducer (ChainReducer)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header-45&quot;&gt;未完待续&lt;/h3&gt;
&lt;p&gt;…&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Hadoop Basic Introduce (HDFS+MapReduce)
    
    </summary>
    
    
      <category term="BigData" scheme="http://sixdegree.github.io/tags/BigData/"/>
    
  </entry>
  
  <entry>
    <title>基于NodeJS解析Markdown</title>
    <link href="http://sixdegree.github.io/2016/01/21/NodeJS-Markdown.html"/>
    <id>http://sixdegree.github.io/2016/01/21/NodeJS-Markdown.html</id>
    <published>2016-01-20T16:00:00.000Z</published>
    <updated>2016-04-17T09:44:58.541Z</updated>
    
    <content type="html">&lt;ol&gt;
&lt;li&gt;使用marked解析markdown文章的基本命令和API介绍；&lt;/li&gt;
&lt;li&gt;从源码分析了marked的处理解析过程，方便以后做扩展；&lt;/li&gt;
&lt;li&gt;加入Highlight和MathJax扩展渲染页面和Issues介绍；&lt;/li&gt;
&lt;li&gt;一些常用markdown编辑器推荐；&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;header-1&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;使用nodejs模块marked解析Markdown文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前后端，不同OS 都可使用&lt;/li&gt;
&lt;li&gt;开源，易扩展&lt;/li&gt;
&lt;li&gt;速度比较快 (通过RegEx匹配解析)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;应用举例：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;作为markdown编辑器&lt;ul&gt;
&lt;li&gt;网上各个markdown编辑器的规则、功能、风格、依赖平台等都有不统一，导出不理想，自定制有局限，无法做扩展&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自由加入各个开发项目中&lt;ul&gt;
&lt;li&gt;static site generator&lt;/li&gt;
&lt;li&gt;online editor&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header-2&quot;&gt;1. 搭建测试环境&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;nullvim&quot;&gt;&amp;gt; &lt;span class=&quot;built_in&quot;&gt;mkdir&lt;/span&gt; node-marked
&amp;gt; &lt;span class=&quot;keyword&quot;&gt;cd&lt;/span&gt; node-marked
&amp;gt; npm init
&amp;gt; npm install marked --save-dev
&amp;gt; npm install &lt;span class=&quot;keyword&quot;&gt;highlight&lt;/span&gt;.js --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;header-3&quot;&gt;2. 使用 Marked Cmd&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;nullvim&quot;&gt;&amp;gt; npm install marked -g
&amp;gt; marked -i articles/01.md
&amp;gt; marked -i articles/01.md -t
&amp;gt; marked -i articles/01.md -o pages/01.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;参数说明&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-o, –output&lt;/strong&gt;: 指定输出文件，默认为当前控制台&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-i, –input&lt;/strong&gt;: 指定输入文件或最后一个参数，默认为当前控制台输入&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-t, –tokens&lt;/strong&gt;: 输出token流代替HTML&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;–pedantic&lt;/strong&gt;: 只解析符合markdown.pl定义的，不修正markdown的错误&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;–gfm&lt;/strong&gt;: 启动Github样式的Markdown，参考 &lt;a href=&quot;http://help.github.com/articles/github-flavored-markdown/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github-flavored-markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;–breaks&lt;/strong&gt;: 支持Github换行符，必须打开gfm选项&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;–tables&lt;/strong&gt;: 支持Github表格，必须打开gfm选项&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;–sanitize&lt;/strong&gt;: 原始输出，忽略HTML标签&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;–smart-lists&lt;/strong&gt;: 优化列表输出&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;–lang-prefix [prefix]&lt;/strong&gt;: 设置前置样式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;–no-etc&lt;/strong&gt;: 选择的反正标识&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;–silent&lt;/strong&gt;: 不输出错误信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-h, –help&lt;/strong&gt;: 帮助信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header-4&quot;&gt;3. 使用 Marked API&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;API&lt;/strong&gt;  具体可参考 &lt;a href=&quot;https://github.com/chjj/marked&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub Marked&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;marked(markdownString [,options] [,callback])
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;header-5&quot;&gt;3.1 Minimal usage&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; marked=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;marked&quot;&lt;/span&gt;);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(marked(&lt;span class=&quot;string&quot;&gt;&quot;I am using marked api!&quot;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;nullvim&quot;&gt;&amp;gt; node &lt;span class=&quot;number&quot;&gt;01&lt;/span&gt;
&lt;span class=&quot;symbol&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;I &lt;span class=&quot;keyword&quot;&gt;am&lt;/span&gt; using marked api!&amp;lt;/&lt;span class=&quot;keyword&quot;&gt;p&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;header-6&quot;&gt;3.2 Setting options example&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; marked=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;marked&quot;&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; highlight=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;highlight.js&quot;&lt;/span&gt;);
marked.setOptions({
    gfm: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,
    tables: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,
    breaks: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,
    pedantic: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,
    sanitize: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,
    smartLists: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,
    smartypants: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,
    codePrefix:&lt;span class=&quot;string&quot;&gt;&quot;hljs&quot;&lt;/span&gt;,
    tableClass:&lt;span class=&quot;string&quot;&gt;&quot;table&quot;&lt;/span&gt;,
    highlight:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;code,lang&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; highlight.highlightAuto(code,[lang]).value;
    }
});
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(marked(markdownString));
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;nullvim&quot;&gt;&amp;gt; node 01
&amp;lt;h3 id=&quot;i-am-using-marked-api-&quot;&amp;gt;I am using marked api!&amp;lt;/h3&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&quot;lang-js&quot;&amp;gt; &amp;lt;span class=&quot;hljs-built_in&quot;&amp;gt;console&amp;lt;/span&amp;gt;.log(&amp;lt;span class=&quot;hljs-string&quot;&amp;gt;&#39;Hello world!&#39;&amp;lt;/span&amp;gt;);
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;header-7&quot;&gt;3.3 Browser&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;nullhtml&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Marked in the browser&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;lib/marked.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;content&#39;&lt;/span&gt;).innerHTML =
      marked(&lt;span class=&quot;string&quot;&gt;&#39;# Marked in browser\n\nRendered by **marked**.&#39;&lt;/span&gt;);
  &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&quot;header-8&quot;&gt;4. Marked 解析说明&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;marked&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;src,opt,callback&lt;/span&gt;)&lt;/span&gt;{
    ...
    opt = merge({}, marked.defaults, opt);
    ...
    tokens = Lexer.lex(src, opt);
    ...
    out=Parser.parse(tokens,opt);
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;header-9&quot;&gt;4.1 解析过程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Lexer&lt;/strong&gt;: Block Level Render =&amp;gt; tokens&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parser&lt;/strong&gt;: Parse tokens =&amp;gt; html&lt;br&gt; each token =&amp;gt; &lt;strong&gt;Render&lt;/strong&gt; &amp;amp;&amp;amp; &lt;strong&gt;InlineLexer&lt;/strong&gt;(Inline Level Render ) =&amp;gt; html&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;header-10&quot;&gt;4.2 核心类介绍&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1. Lexer ( Block Level Render )&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; block={...}        &lt;span class=&quot;comment&quot;&gt;//定义块级解析规则（正则表达式）&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;//newline,code,fences,hr,heading,nptable,lheading,blockquote,list,html,def,table,paragraph,text&lt;/span&gt;

Lexer.rules=block;
Lexer.lex = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;src, options&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; lexer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Lexer(options);
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lexer.lex(src);
};

Lexer.prototype.lex         &lt;span class=&quot;comment&quot;&gt;//调用 Lexer.prototype.token&lt;/span&gt;
Lexer.prototype.token       &lt;span class=&quot;comment&quot;&gt;//根据rules解析返回tokens数组&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. Parser ( Parse Tokens to HTML )&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;Parser.parse = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tokens, options, renderer&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; parser = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Parser(options, renderer);
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; parser.parse(tokens);
};

Parser.prototype.parse    &lt;span class=&quot;comment&quot;&gt;//调用 Parser.prototype.tok 逐个解析token&lt;/span&gt;
Parser.prototype.tok      &lt;span class=&quot;comment&quot;&gt;//根据token.type调用Render的相应方法进行渲染 &lt;/span&gt;
ps: 有些token在调用Render渲染前会预先调用InlineLex进行预处理
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3. Render ( Render Each Token to HTML )&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;Renderer.prototype.code
Renderer.prototype.blockquote
Renderer.prototype.html
Renderer.prototype.heading
Renderer.prototype.hr
Renderer.prototype.list
Renderer.prototype.listitem
Renderer.prototype.paragraph
Renderer.prototype.table 
Renderer.prototype.tablerow
Renderer.prototype.tablecell
Renderer.prototype.strong
Renderer.prototype.em
Renderer.prototype.codespan
Renderer.prototype.br
Renderer.prototype.del
Renderer.prototype.link
Renderer.prototype.image
Renderer.prototype.text
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4. InlineLexer ( Inline Level Renderer )&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; inline={...}     &lt;span class=&quot;comment&quot;&gt;//定义行级解析规则（正则表达式）&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;//escape,autolink,url,tag,link,reflink,nolink,strong,em,code,br,del,text&lt;/span&gt;

InlineLexer.rules = inline;
InlineLexer.output = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;src, links, options&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; inline = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; InlineLexer(links, options);
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; inline.output(src);
};

InlineLexer.prototype.output     &lt;span class=&quot;comment&quot;&gt;//根据rules解析，返回字符串&lt;/span&gt;
ps: 有些匹配项会调用Render的相应方法进行渲染
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&quot;header-11&quot;&gt;5. Marked 扩展&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在了解了marked的解析过程后，&lt;br&gt;对于一些无法通过marked本身提供的配置选项完成的特殊功能，&lt;br&gt;可以自己在上面拓展一些功能（这也是会选择marked的原因之一）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这里列举两个比较常用的拓展:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加&lt;code&gt;TOC(HeaderAnchor)&lt;/code&gt;功能；&lt;/li&gt;
&lt;li&gt;增加解析&lt;code&gt;meta&lt;/code&gt;功能；&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;header-12&quot;&gt;5.1 拓展：增加 TOC 功能 ( HeaderAnchor )&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;nullmarkdown&quot;&gt;[TOC]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1. Lexer&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; block = {
    ...
     toc: &lt;span class=&quot;regexp&quot;&gt;/^\[TOC\]\n/&lt;/span&gt;,
};

Lexer.prototype.token = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;src, top, bq&lt;/span&gt;) &lt;/span&gt;{
    ...
    var tocIndex=&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(src){
        ...
        if(cap=&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.rules.toc.exec(src)){
            &lt;span class=&quot;comment&quot;&gt;//console.log(&quot;token toc&quot;);&lt;/span&gt;
            src = src.substring(cap[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length);
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tokens.push({type:&lt;span class=&quot;string&quot;&gt;&#39;toc&#39;&lt;/span&gt;});
            tocIndex=&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tokens.length&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;
            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;
        }
        ...
    }
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(tocIndex&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;){
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; toc=[];
        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tokens.length;i++){
          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tokens[i].type===&lt;span class=&quot;string&quot;&gt;&#39;heading&#39;&lt;/span&gt;)
            toc.push(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tokens[i]);
        }
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tokens[tocIndex]={type:&lt;span class=&quot;string&quot;&gt;&quot;toc&quot;&lt;/span&gt;,datas:toc};
    }
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tokens;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. Parser&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;Parser.prototype.tok = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.token.type){
    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;toc&#39;&lt;/span&gt;:{
      &lt;span class=&quot;comment&quot;&gt;//console.log(&quot;parse toc&quot;);&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; datas=&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.token.datas;
      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;datas.length;i++){
        datas[i].raw=datas[i].text;
        datas[i].text=&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.inline.output(datas[i].text);
      }
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.renderer.toc(datas);
    }
    ...
  }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3. Render&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;Renderer.prototype.toc = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;datas&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;comment&quot;&gt;//console.log(&quot;render toc&quot;);&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tocStr=&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,indentStr=&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,item=&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;;
  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;datas.length;i++){
    item=datas[i];
    indentStr=&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;j&amp;lt;item.depth&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;j++)
        indentStr+=&lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;nbsp;&amp;amp;nbsp;&#39;&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; id=&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.options.headerPrefix+item.raw.toLowerCase().replace(&lt;span class=&quot;regexp&quot;&gt;/[^\w]+/g&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt;);
    tocStr+=&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;li&amp;gt;&quot;&lt;/span&gt;+indentStr+&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;a href=&#39;#&quot;&lt;/span&gt;+id+&lt;span class=&quot;string&quot;&gt;&quot;&#39;&amp;gt;&quot;&lt;/span&gt;+item.text+&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&quot;&lt;/span&gt;;
  }
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.list(tocStr,&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4. 使用示例&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; marked=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./marked-extend&quot;&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;fs&quot;&lt;/span&gt;);
fs.readFile(&lt;span class=&quot;string&quot;&gt;&quot;articles/01.md&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err,data&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result=marked(data);
    fs.writeFile(&lt;span class=&quot;string&quot;&gt;&quot;pages/01-1.html&quot;&lt;/span&gt;,result);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;header-13&quot;&gt;5.2 拓展：增加解析 MetaHeader&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;nullmarkdown&quot;&gt;--- 
title: 用Middleman搭建静态博客
tags: web, static
&lt;span class=&quot;section&quot;&gt;description: Build Static Blog by Middleman
---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1. Lexer&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; block = {
    ...
    meta:&lt;span class=&quot;regexp&quot;&gt;/^-{3,}\s*?\n([\s\S]*?)\n-{3,}/&lt;/span&gt;, 
    metaItem:&lt;span class=&quot;regexp&quot;&gt;/(\S+)\s*?:\s*([\s\S]*?)(?=$|\n)/g&lt;/span&gt;,
};

Lexer.prototype.token = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;src, top, bq&lt;/span&gt;) &lt;/span&gt;{
    ...
    var tocIndex=&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(src){
        ...
        if(cap=&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.rules.meta.exec(src)){
            src=src.substring(cap[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length);
            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; meta={};
            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;((item=&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.rules.metaItem.exec(cap[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]))!=&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;){
                &lt;span class=&quot;comment&quot;&gt;//console.log(item[1]+&quot;:&quot;+item[2]);&lt;/span&gt;
                meta[item[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]]=item[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];
            }
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tokens.push({type:&lt;span class=&quot;string&quot;&gt;&quot;meta&quot;&lt;/span&gt;,datas:meta});
            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;
        }
        ...
    }
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tokens;
};

Lexer.prototype.getToken=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tokens,type&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; token=&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;tokens.length;i++){
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(tokens[i].type===type){
          token=tokens[i];
          &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;
        }
    }
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; token;
};
&lt;span class=&quot;comment&quot;&gt;// Static Method&lt;/span&gt;
Lexer.getToken=Lexer.prototype.getToken;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. Parser&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;Parser.prototype.tok = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.token.type){
    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;meta&#39;&lt;/span&gt;:{
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;
    }
    ...
  }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3. 使用示例&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; marked=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./marked-extend&quot;&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;fs&quot;&lt;/span&gt;);
fs.readFile(&lt;span class=&quot;string&quot;&gt;&quot;articles/01.md&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err,data&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Lexer=marked.Lexer;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; lexer=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Lexer();
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tokens=lexer.lex(data);

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tocToken=lexer.getToken(tokens,&lt;span class=&quot;string&quot;&gt;&quot;toc&quot;&lt;/span&gt;);
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;toc:&quot;&lt;/span&gt;);
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(tocToken);

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; metaToken=lexer.getToken(tokens,&lt;span class=&quot;string&quot;&gt;&quot;meta&quot;&lt;/span&gt;);
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;meta:&quot;&lt;/span&gt;);
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(metaToken);

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result=marked.parser(tokens);
    fs.writeFile(&lt;span class=&quot;string&quot;&gt;&quot;pages/01-2.html&quot;&lt;/span&gt;,result);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&quot;header-14&quot;&gt;6. HTML 结果页面扩展&lt;/h3&gt;
&lt;h4 id=&quot;header-15&quot;&gt;6.1 使用 Highlight.js 进行语法高亮&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1.Highlight介绍&lt;/strong&gt; ( 参考 &lt;a href=&quot;https://highlightjs.org/static/demo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LiveDemo&lt;/a&gt; | &lt;a href=&quot;https://highlightjs.org/usage/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Usage&lt;/a&gt; | &lt;a href=&quot;http://highlightjs.readthedocs.org/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Doc&amp;amp;API&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用在线Highligh&lt;/strong&gt; ( 可在线定制，参考 &lt;a href=&quot;https://highlightjs.org/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting highlight.js&lt;/a&gt;,&lt;a href=&quot;https://cdnjs.com/libraries/highlight.js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CDN highlight.js&lt;/a&gt; )&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nullhtml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.9.1/styles/default.min.css&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;

&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.9.1/highlight.min.js&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;handlebars&quot;&gt;&lt;span class=&quot;xml&quot;&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.9.1/languages/markdown.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;
    hljs.initHighlightingOnLoad();
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;使用本地构建的Highligh&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nullvim&quot;&gt;&amp;gt; bower install &lt;span class=&quot;keyword&quot;&gt;highlight&lt;/span&gt; --save-dev
&amp;gt; &lt;span class=&quot;keyword&quot;&gt;cd&lt;/span&gt; bower_components/&lt;span class=&quot;keyword&quot;&gt;highlight&lt;/span&gt;

//构建Highligh
&amp;gt; npm install
&amp;gt; node tools/build.js -t &lt;span class=&quot;keyword&quot;&gt;all&lt;/span&gt;    // build &lt;span class=&quot;keyword&quot;&gt;all&lt;/span&gt; [ node cdn  browser]
（或者只构建browser，使用 node tools/build.js -t browser）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; 若执行报类似如下错误，请升级node，或下载highlight#8 ( bower install highlight#8 )&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nullvim&quot;&gt;build     = require(`./${commander.target}`);
                    ^
SyntaxError: Unexpected token ILLEGAL
    at Module._compile (module.js:439:25)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Function.Module.runMain (module.js:497:10)
    at startup (node.js:119:16)
    at node.js:902:3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;nullhtml&quot;&gt;使用构建的browser highlight
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;../bower_components/highlight/build/browser/demo/styles/default.css&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;

&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;../bower_components/highlight/build/browser/highlight.pack.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;
    hljs.initHighlightingOnLoad();
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建出的node highlight 和通过 npm install highlight.js 获取的highlight是一致的&lt;/li&gt;
&lt;li&gt;要在前端网页中使用node highlight，还需通过browserify插件转换 （具体使用可参考gulp篇）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. 在Marked中使用highlight.js&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前端只加载highlight css文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nullhtml&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Marked Highlight&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;../bower_components/highlight/build/browser/demo/styles/tomorrow-night-bright.css&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
    {content}
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;后端调用highlight解析markdown的code内容&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; marked=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./marked-extend&quot;&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;fs&quot;&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; highlight=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;highlight.js&quot;&lt;/span&gt;);

marked.setOptions({
    langPrefix:&lt;span class=&quot;string&quot;&gt;&quot;hljs &quot;&lt;/span&gt;,
    highlight:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;code,lang&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; highlight.highlightAuto(code,[lang]).value;
    }
});

fs.readFile(&lt;span class=&quot;string&quot;&gt;&quot;articles/test.md&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err,data&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result=marked(data);
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tpl=fs.readFileSync(&lt;span class=&quot;string&quot;&gt;&quot;template/highlight-03.html&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;);
    fs.writeFile(&lt;span class=&quot;string&quot;&gt;&quot;pages/highlight-03.html&quot;&lt;/span&gt;,tpl.replace(&lt;span class=&quot;string&quot;&gt;&quot;{content}&quot;&lt;/span&gt;,result));
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3.调用区别&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端调用&lt;code&gt;hljs.initHighlightingOnLoad();&lt;/code&gt;  识别解析&lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;...&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt;块&lt;ul&gt;
&lt;li&gt;若无language设置，则自动识别添加一种languange&lt;br&gt;  &lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;hljs html&amp;quot;&amp;gt;...&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;若有languange设置&lt;ul&gt;
&lt;li&gt;是已注册的languange，则使用相应的languange js进行解析&lt;br&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;hljs javascript&amp;quot;&amp;gt;...&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;是未注册的languange，则不解析&lt;br&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;nohighlight&amp;quot;&amp;gt;...&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;后端marked解析code&lt;ul&gt;
&lt;li&gt;若无languange设置，则不会在&lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt;标签上增加class&lt;/li&gt;
&lt;li&gt;若有languange设置，则会在&lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt;标签上增加class（langPrefix+languange）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;Renderer.prototype.code = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;code, lang, escaped&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.options.highlight) {
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; out = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.options.highlight(code, lang);
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (out != &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; out !== code) {
      escaped = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
      code = out;
    }
  }

  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!lang) {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&#39;&lt;/span&gt;+ (escaped ? code : &lt;span class=&quot;built_in&quot;&gt;escape&lt;/span&gt;(code, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)) + &lt;span class=&quot;string&quot;&gt;&#39;\n&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#39;&lt;/span&gt;;
  }

  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;pre&amp;gt;&amp;lt;code class=&quot;&#39;&lt;/span&gt;
    + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.options.langPrefix
    + &lt;span class=&quot;built_in&quot;&gt;escape&lt;/span&gt;(lang, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)
    + &lt;span class=&quot;string&quot;&gt;&#39;&quot;&amp;gt;&#39;&lt;/span&gt;
    + (escaped ? code : &lt;span class=&quot;built_in&quot;&gt;escape&lt;/span&gt;(code, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;))
    + &lt;span class=&quot;string&quot;&gt;&#39;\n&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;\n&#39;&lt;/span&gt;;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;PS: &lt;/strong&gt; 可以修改前后端以统一两种调用highlight的效果&lt;/p&gt;
&lt;h4 id=&quot;header-16&quot;&gt;6.2 增加 LaTex 公式支持&lt;/h4&gt;
&lt;p&gt;使用 MathJax （参考 &lt;a href=&quot;http://mlworks.cn/posts/introduction-to-mathjax-and-latex-expression/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LaTex&lt;/a&gt;,&lt;a href=&quot;http://mathjax-chinese-doc.readthedocs.org/en/latest/configuration.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MathJax Doc&lt;/a&gt;）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nullhtml&quot;&gt;//从CDN加载MathJax
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
//或加载通过bower install MathJax --save-dev 获取到本地的MathJax
 &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;../bower_components/MathJax/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;

//可添加配置，eg：
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/x-mathjax-config&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;
    MathJax.Hub.Config({
    ...
    });
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&quot;header-17&quot;&gt;7. Issues&lt;/h3&gt;
&lt;h4 id=&quot;header-18&quot;&gt;7.1 Marked TOC heading id 乱码&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;marked中解析出的&lt;code&gt;&amp;lt;hx&amp;gt;&lt;/code&gt;标签id生成规则为：&lt;br&gt;&lt;code&gt;this.options.headerPrefix+ raw.toLowerCase().replace(/[^\w]+/g, &amp;#39;-&amp;#39;)&lt;/code&gt;&lt;br&gt;( 将文本中空格替换为&lt;code&gt;-&lt;/code&gt; )&lt;/p&gt;
&lt;p&gt;若是中文或其他特殊字符会导致难以Anchor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;自定义&lt;code&gt;h&lt;/code&gt;标签的id生成规则：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.Lexer&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;Lexer.prototype.token = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;src, top, bq&lt;/span&gt;) &lt;/span&gt;{
    ...
    while(src){
        ...
    }
     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(tocIndex&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.options.reHeader){
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; toc=[];
        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tokens.length;i++){
          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tokens[i].type===&lt;span class=&quot;string&quot;&gt;&#39;heading&#39;&lt;/span&gt;){
            toc.push(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tokens[i]);
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tokens[i].index=toc.length;   &lt;span class=&quot;comment&quot;&gt;// add heading index&lt;/span&gt;
          }
        }
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tokens[tocIndex]={type:&lt;span class=&quot;string&quot;&gt;&quot;toc&quot;&lt;/span&gt;,datas:toc};
    }
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tokens;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2.Parser&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;Parser.prototype.tok = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
     &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.token.type) {
        ...
        case &lt;span class=&quot;string&quot;&gt;&#39;heading&#39;&lt;/span&gt;: {
          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.renderer.heading(
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.inline.output(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.token.text),
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.token.depth,
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.token.text,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.token.index);  &lt;span class=&quot;comment&quot;&gt;// add heading index&lt;/span&gt;
        }
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3.Render&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;Renderer.prototype.heading = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;text, level, raw, index&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;h&#39;&lt;/span&gt;+ level
    + &lt;span class=&quot;string&quot;&gt;&#39; id=&quot;&#39;&lt;/span&gt;
    + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.options.headerPrefix
    &lt;span class=&quot;comment&quot;&gt;//+ raw.toLowerCase().replace(/[^\w]+/g, &#39;-&#39;)&lt;/span&gt;
    + (index?index:raw.toLowerCase().replace(&lt;span class=&quot;regexp&quot;&gt;/[^\w]+/g&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt;))
    + &lt;span class=&quot;string&quot;&gt;&#39;&quot;&amp;gt;&#39;&lt;/span&gt;
    + text+ &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/h&#39;&lt;/span&gt;+ level+ &lt;span class=&quot;string&quot;&gt;&#39;&amp;gt;\n&#39;&lt;/span&gt;;
};
Renderer.prototype.toc = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;datas&lt;/span&gt;) &lt;/span&gt;{
    ...
    &lt;span class=&quot;comment&quot;&gt;//var id=this.options.headerPrefix+item.raw.toLowerCase().replace(/[^\w]+/g, &#39;-&#39;);&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; id=&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.options.headerPrefix+(item.index?item.index:item.raw.toLowerCase().replace(&lt;span class=&quot;regexp&quot;&gt;/[^\w]+/g&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt;));
    ...
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;header-19&quot;&gt;7.2 Highlight &amp;amp; Markdown Conflict with MathJax&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1.约定markdown中的LaxTex公式&lt;/strong&gt;&lt;br&gt;含有LaxTex公式的包含在&lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt; 标签中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 添加MathJax配置&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nullhtml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/x-mathjax-config&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;actionscript&quot;&gt;
    MathJax.Hub.Config({
          tex2jax: {
              &lt;span class=&quot;comment&quot;&gt;//skipTags remove &#39;pre&#39; entry&lt;/span&gt;
              skipTags: [&lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;noscript&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;style&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;textarea&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;code&#39;&lt;/span&gt;]
        }
    });
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&quot;header-20&quot;&gt;8. 最终版&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;项目源码 &lt;a href=&quot;https://github.com/sixDegree/node-marked&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header-21&quot;&gt;9. 各种Markdown编辑器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windos版，推荐 &lt;a href=&quot;http://pad.haroopress.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Haroopad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OS X 版，推荐 &lt;a href=&quot;http://pad.haroopress.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Haroopad&lt;/a&gt;,&lt;a href=&quot;http://macdown.uranusjr.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MacDown&lt;/a&gt;,&lt;a href=&quot;http://www.textnutwriter.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TextNut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Online版，推荐 &lt;a href=&quot;http://www.jianshu.com/p/b3QtRo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简书&lt;/a&gt;，&lt;a href=&quot;https://maxiang.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;马克飞象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;如果不嫌麻烦，也可以使用sublime+plugin自定制&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header-22&quot;&gt;10. 参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;markdown&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://lutaf.com/markdown-simple-usage.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;markdown 简明语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sspai.com/25137&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;认识与入门 Markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;marked&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chjj/marked&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;chjj/marked&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.fens.me/nodejs-markdown-marked/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Marked高效的Markdown解析器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sentsin.com/web/1151.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;动手开发更好用的markdown编辑器-07扩展语法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;markdown editor&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.williamlong.info/archives/4319.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;好用的Markdown编辑器一览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/6c157af09e84&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mac 下两款 Markdown 编辑器 Mou/MacDown 大 PK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.leanote.com/post/54bfa17b8404f03097000000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;近乎完美的 Markdown 写作体验 - Sublime Text 3 + OmniMarkupPreviewer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;highlight&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/spy19881201/article/details/38866033&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码高亮 highlightjs 使用文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://highlightjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;highlightjs org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://highlightjs.readthedocs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;highlightjs doc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mathJax&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mlworks.cn/posts/introduction-to-mathjax-and-latex-expression/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mathjax与LaTex公式简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mathjax.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mathjax org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.mathjax.org/en/latest/start.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mathjax doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mathjax-chinese-doc.readthedocs.org/en/latest/configuration.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;加载和配置MathJax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      extended functional nodejs marked module to parsing markdown file
    
    </summary>
    
    
      <category term="NodeJs" scheme="http://sixdegree.github.io/tags/NodeJs/"/>
    
  </entry>
  
  <entry>
    <title>ReactJS高阶之Flux</title>
    <link href="http://sixdegree.github.io/2016/01/06/ReactJS-Flux.html"/>
    <id>http://sixdegree.github.io/2016/01/06/ReactJS-Flux.html</id>
    <published>2016-01-05T16:00:00.000Z</published>
    <updated>2016-04-12T08:12:51.028Z</updated>
    
    <content type="html">&lt;ol&gt;
&lt;li&gt;简单介绍了Flux架构；&lt;/li&gt;
&lt;li&gt;通过示例介绍了在Flux思想之上的一些优秀实现库（比如：reflux，redux）；&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sixDegree/react-advance&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;My Demos&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;header-1&quot;&gt;Flux&lt;/h2&gt;
&lt;p&gt;单向数据流的架构模式（在 MVC 中属于M层）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;╔═════════╗       ╔════════╗       ╔═════════════════╗
║ Actions ║──────&amp;gt;║ Stores ║──────&amp;gt;║ View Components ║
╚═════════╝       ╚════════╝       ╚═════════════════╝
     ^                                      │
     └──────────────────────────────────────┘
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;基于单向数据流如何更好的管理数据，在 Views 与数据之间进行解耦 ，Store 是关键&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;View 层 Dispatch actions（分发操作）&lt;/li&gt;
&lt;li&gt;Store 响应事件，触发 change事件&lt;/li&gt;
&lt;li&gt;View 层响应change事件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在flux思想之上，有很多优秀的库，比如：reflux，redux&lt;/p&gt;
&lt;h2 id=&quot;header-2&quot;&gt;Reflux&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/reflux/refluxjs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt; | &lt;a href=&quot;http://segmentfault.com/a/1190000002793786?utm_source=tuicool&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reflux 介绍&lt;/a&gt; | &lt;a href=&quot;http://abruzzi.github.com/2015/11/get-started-with-reflux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sample&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载包：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; npm install reflux --save
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Action：定义方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Reflux=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;reflux&quot;&lt;/span&gt;);
&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports=Reflux.createActions([
 &lt;span class=&quot;string&quot;&gt;&quot;listXxx&quot;&lt;/span&gt;,
 &lt;span class=&quot;string&quot;&gt;&quot;getXxx&quot;&lt;/span&gt;,
 &lt;span class=&quot;string&quot;&gt;&quot;updateXxx&quot;&lt;/span&gt;,
 &lt;span class=&quot;string&quot;&gt;&quot;createXxx&quot;&lt;/span&gt;,
 ...
])
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Store：监听actions&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt; &lt;span class=&quot;comment&quot;&gt;//xxx-store.jsx&lt;/span&gt;
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Reflux=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;reflux&quot;&lt;/span&gt;);
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Api=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;../utils/api&quot;&lt;/span&gt;);
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xxxActions=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;../actions/xxx-action&quot;&lt;/span&gt;);

 &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports=Reflux.createStore({
     listenables:[XxxActions],        &lt;span class=&quot;comment&quot;&gt;// 监听actions&lt;/span&gt;
     data:{},

     &lt;span class=&quot;comment&quot;&gt;//添加Action中定义的同名函数&lt;/span&gt;
     listXxx:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Api.get(&lt;span class=&quot;string&quot;&gt;&quot;...&quot;&lt;/span&gt;)
                 .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;json&lt;/span&gt;)&lt;/span&gt;{
                     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(json &amp;amp;&amp;amp; json.success)
                         &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.data=json.data;
                     &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.trigger(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.data,json);    &lt;span class=&quot;comment&quot;&gt;//触发（监听此Store的Components会接收到）&lt;/span&gt;
                 }.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;));
     },
     ...
     &lt;span class=&quot;comment&quot;&gt;//也可添加Store自己的函数&lt;/span&gt;
 });
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Component: 调用Action（会触发调用相应的Store方法）或Store方法，监听Store变化&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Reflux=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;reflux&quot;&lt;/span&gt;);
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; XxxActions=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;../action/xxx-action&quot;&lt;/span&gt;);
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; XxxStore=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;../stores/receiver-store&quot;&lt;/span&gt;);

 &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports=React.createClass({
     &lt;span class=&quot;comment&quot;&gt;//监听Store，捕获到则调用onChange方法（相当于callback）&lt;/span&gt;
     mixins:[Reflux.listenTo(XxxStore,&lt;span class=&quot;string&quot;&gt;&quot;onChange&quot;&lt;/span&gt;)],
     onChange:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data,result&lt;/span&gt;)&lt;/span&gt;{
         &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState({...});
     },
     componentWillMount:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
         XxxActions.listXxx();
     },
     ...
 });
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;header-3&quot;&gt;Redux&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://camsong.github.io/redux-in-chinese/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文文档&lt;/a&gt; | &lt;a href=&quot;https://segmentfault.com/a/1190000003503338#articleHeader5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redux 介绍&lt;/a&gt; | &lt;a href=&quot;http://zhenhua-lee.github.io/react/redux.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;解读redux工作原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2016/01/06/redux.png&quot; alt=&quot;redux&quot;&gt;&lt;br&gt;（图片来自：&lt;a href=&quot;http://staltz.com/unidirectional-user-interface-architectures.html）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://staltz.com/unidirectional-user-interface-architectures.html）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;store 是一个单一对象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;store.getState()&lt;/code&gt; ：获取reducer的root state&lt;/li&gt;
&lt;li&gt;&lt;code&gt;store.dispatch(action)&lt;/code&gt; ： 向所有reducer分发action&lt;/li&gt;
&lt;li&gt;&lt;code&gt;store.subscribe(listener)&lt;/code&gt; ：注册 state 变化监听器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createStore(reducer, [initialState])&lt;/code&gt; 创建Store&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下载包：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; npm install redux --save
&amp;gt; npm install react-redux --save
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;header-4&quot;&gt;基本使用示例&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Component&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; React=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;);
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ReactDOM=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;react-dom&quot;&lt;/span&gt;);

 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Counter=React.createClass({
     render:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (
           &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;{this.props.value}&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;btn btn-default&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;{this.props.onIncreaseClick}&lt;/span&gt;&amp;gt;&lt;/span&gt;Increase&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
         )
     }
 });
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Store&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; redux=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;redux&quot;&lt;/span&gt;);

 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; countRedux=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state,action&lt;/span&gt;)&lt;/span&gt;{
     &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(action.type){
         &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;INCREASE&#39;&lt;/span&gt;:
             &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state+action.step;
     }
     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state;
 }

 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; store=redux.createStore(countRedux,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);
 store.subscribe(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
     &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(store.getState());
 });
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Action&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; increaseAction={type:&lt;span class=&quot;string&quot;&gt;&#39;INCREASE&#39;&lt;/span&gt;,step:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;};
 &lt;span class=&quot;comment&quot;&gt;//test&lt;/span&gt;
 store.dispatch(increaseAction);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Container&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Provider=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;react-redux&quot;&lt;/span&gt;).Provider;
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; connect=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;react-redux&quot;&lt;/span&gt;).connect;

 &lt;span class=&quot;comment&quot;&gt;//Map Redux state to component props&lt;/span&gt;
 &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mapStateToProps&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state&lt;/span&gt;)&lt;/span&gt;{
     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {count:state}
 }
 &lt;span class=&quot;comment&quot;&gt;//Map Redux dispatch to component props&lt;/span&gt;
 &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mapDispatchToProps&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;dispatch&lt;/span&gt;)&lt;/span&gt;{
     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {
         onIncreaseClick:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{dispatch(increaseAction);}
     }
 }

 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; App=connect(mapStateToProps,mapDispatchToProps)(Counter)

 &lt;span class=&quot;comment&quot;&gt;// render&lt;/span&gt;
 ReactDOM.render(
   &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Provider&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;store&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;{store}&lt;/span&gt;&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;App&lt;/span&gt; /&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Provider&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;,
   &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;app&#39;&lt;/span&gt;)
 );
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;header-5&quot;&gt;高阶使用示例&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/2016/01/06/redux-book.png&quot; alt=&quot;redux&quot;&gt;&lt;br&gt;（图片来自：&lt;a href=&quot;https://www.udemy.com/react-redux/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.udemy.com/react-redux/&lt;/a&gt; 教程）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;要点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reducer:&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bookReducer=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state,action&lt;/span&gt;)&lt;/span&gt;{...};
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; activeBookReducer=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state,action&lt;/span&gt;)&lt;/span&gt;{...};
 &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports=combineReducers({
     books:booksReducer,
     activeBook:activeBookReducer
 })
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Action Creator:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; selectBook=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;book&lt;/span&gt;)&lt;/span&gt;{
         &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Selectd:&quot;&lt;/span&gt;+book.title);
         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {type:&lt;span class=&quot;string&quot;&gt;&quot;BOOK_SELECTED&quot;&lt;/span&gt;,payload:book};
     }
     &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports={
         selectBook:selectBook
     }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Container:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bindActionCreators=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;redux&quot;&lt;/span&gt;).bindActionCreators;

 &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mapDispatchToProps&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;dispatch&lt;/span&gt;)&lt;/span&gt;{
     &lt;span class=&quot;comment&quot;&gt;/*return {
         selectBook:function(book){dispatch({type:&#39;BOOK_SELECTED&#39;,payload:book})}
     }*/&lt;/span&gt;
     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bindActionCreators(BookActions,dispatch);
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt; 可使用middleware实现异步Action &lt;/strong&gt; （例如使用&lt;code&gt;redux-promise&lt;/code&gt; ）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2016/01/06/redux-book-middleware.png&quot; alt=&quot;redux&quot;&gt;&lt;br&gt;（图片来自：&lt;a href=&quot;https://www.udemy.com/react-redux/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.udemy.com/react-redux/&lt;/a&gt; 教程）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;要点：&lt;/strong&gt; 触发action，传递promise对象，使用middleware拦截直到响应，继续传递action到reducers&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载包&lt;code&gt;redux-promise&lt;/code&gt; (Redux Middleware) &amp;amp; &lt;code&gt;axios&lt;/code&gt; (Promise Request)：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; npm install redux-promise --save
&amp;gt; npm install axios --save
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Action：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt; {type:&lt;span class=&quot;string&quot;&gt;&#39;BOOK_LIST&#39;&lt;/span&gt;,payload:axios.get(url);}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reducer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; booksReducer=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state,action&lt;/span&gt;)&lt;/span&gt;{
     &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(action.type){
         &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;BOOK_LIST&#39;&lt;/span&gt;:
             &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(action.payload.status==&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;){
                 &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [action.payload.data];
             }
     }
     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Store&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; applyMiddleware=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;redux&quot;&lt;/span&gt;).applyMiddleware;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ReduxPromise=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;redux-promise&quot;&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; createStoreWithMiddleware=applyMiddleware(ReduxPromise)(createStore);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; store=createStoreWithMiddleware(weatherReducers);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;header-6&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Reflux &lt;a href=&quot;https://github.com/reflux/refluxjs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt; | &lt;a href=&quot;http://segmentfault.com/a/1190000002793786?utm_source=tuicool&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reflux 介绍&lt;/a&gt; | &lt;a href=&quot;http://abruzzi.github.com/2015/11/get-started-with-reflux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sample&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Redux &lt;a href=&quot;https://github.com/rackt/react-redux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt; | &lt;a href=&quot;http://camsong.github.io/redux-in-chinese/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文文档&lt;/a&gt; | &lt;a href=&quot;https://segmentfault.com/a/1190000003503338#articleHeader5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redux 介绍&lt;/a&gt; | &lt;a href=&quot;http://zhenhua-lee.github.io/react/redux.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;解读redux工作原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sixDegree/react-advance&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;My Demos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      introduce react flux
    
    </summary>
    
    
      <category term="ReactJs" scheme="http://sixdegree.github.io/tags/ReactJs/"/>
    
  </entry>
  
  <entry>
    <title>ReactJS高阶之Firebase</title>
    <link href="http://sixdegree.github.io/2016/01/05/ReactJS-Firebase.html"/>
    <id>http://sixdegree.github.io/2016/01/05/ReactJS-Firebase.html</id>
    <published>2016-01-04T16:00:00.000Z</published>
    <updated>2016-04-12T08:10:55.633Z</updated>
    
    <content type="html">&lt;ol&gt;
&lt;li&gt;在ReactJS中使用FireBase提供实时数据云服务；&lt;/li&gt;
&lt;li&gt;介绍两种方式使用方式：直接使用和依赖reactFire；&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sixDegree/react-advance&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;My Demos&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;FireBase 提供实时数据云服务 &lt;a href=&quot;https://www.firebase.com/docs/web/quickstart.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Doc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直接上示例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2016/01/05/firebase.PNG&quot; alt=&quot;my firebase&quot;&gt;&lt;br&gt;（下面示例使用的firebase结构）&lt;/p&gt;
&lt;h3 id=&quot;header-1&quot;&gt;直接使用firebase库&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;nullvim&quot;&gt;&amp;gt; npm install firebase --save

//或前端使用，直接从CDN获取
&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;https://cdn.firebase.com/js/client/2.4.0/firebase.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Firebase=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;firebase&quot;&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; DB_URL=&lt;span class=&quot;string&quot;&gt;&quot;https://&amp;lt;YOUR-FIREBASE-APP&amp;gt;.firebaseio.com/&quot;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Fb=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Firebase(DB_URL);

&lt;span class=&quot;comment&quot;&gt;/*
设置数据，可参考：https://www.firebase.com/docs/web/guide/saving-data.html
set(),update(),push(),transaction( )
push() function that generates a unique ID, or key, for each new child
*/&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;//username is key&lt;/span&gt;
Fb.child(&lt;span class=&quot;string&quot;&gt;&quot;users&quot;&lt;/span&gt;).child(username).set({username:xxx,password:xxx});
Fb.child(&lt;span class=&quot;string&quot;&gt;&quot;users&quot;&lt;/span&gt;).child(username).update({password:xxx});

&lt;span class=&quot;comment&quot;&gt;//generate a uniqueID as key&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; usersRef=Fb.child(&lt;span class=&quot;string&quot;&gt;&quot;users&quot;&lt;/span&gt;).push();
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; id=usersRef.key();
usersRef.push({username:xxx,password:xxx});

&lt;span class=&quot;comment&quot;&gt;/*
获取数据，可参考https://www.firebase.com/docs/web/guide/retrieving-data.html
Get:
    on(&#39;value&#39;,function(snapshot){xxxx})
    once(&#39;value&#39;,function(snapshot){xxxx})
Query:
    orderByChild(&quot;xxx&quot;),orderByKey(),orderByValue(),orderByPriority()
    limitToLast(count),limitToFirst(count)
    startAt(xxx),endAt(xxx),equalTo(xxx)
*/&lt;/span&gt;
Fb.child(&lt;span class=&quot;string&quot;&gt;&quot;users&quot;&lt;/span&gt;).child(username).once(&lt;span class=&quot;string&quot;&gt;&#39;value&#39;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;snapshot&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(snapshot.key());
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(snapshot.val());
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(snapshot.exists())
        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(snapshot.child(&lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;).val());
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;header-2&quot;&gt;通过reactFire使用firebase （在React中）&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ReactFire=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;reactfire&quot;&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Firebase=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;firebase&quot;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Component中：&lt;/span&gt;
componentWillMount:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Question Will Mount...&quot;&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.fb=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Firebase(rootUrl+&lt;span class=&quot;string&quot;&gt;&quot;questions/&quot;&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bindAsArray(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.fb,&lt;span class=&quot;string&quot;&gt;&quot;questions&quot;&lt;/span&gt;);        &lt;span class=&quot;comment&quot;&gt;// =&amp;gt; this.state.questions（当有变化时自动转换为数组，且调用this.setState({questions:xxx})； ）&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.fb.on(&lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.loadDataHandler);
},
loadDataHandler:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Data Loaded&quot;&lt;/span&gt;);
},
addNewQuestion:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;newQuestion&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;comment&quot;&gt;//this.firebaseRefs.questions.push(newQuestion);&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.fb.push(newQuestion);
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState({newQuestion:newQuestion});
},
voteUpdate:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;questionId,voteCount&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.fb.child(questionId).update({voteCount:voteCount});
},
removeItem:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;question&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.fb.child(question[&lt;span class=&quot;string&quot;&gt;&quot;.key&quot;&lt;/span&gt;]).remove();
}
&lt;/code&gt;&lt;/pre&gt;
</content>
    
    <summary type="html">
    
      using firebase in reactJS by reactFire
    
    </summary>
    
    
      <category term="ReactJs" scheme="http://sixdegree.github.io/tags/ReactJs/"/>
    
  </entry>
  
  <entry>
    <title>ReactJS高阶之Router</title>
    <link href="http://sixdegree.github.io/2016/01/04/ReactJS-Router.html"/>
    <id>http://sixdegree.github.io/2016/01/04/ReactJS-Router.html</id>
    <published>2016-01-03T16:00:00.000Z</published>
    <updated>2016-04-12T01:04:05.079Z</updated>
    
    <content type="html">&lt;ol&gt;
&lt;li&gt;使用 react-router 实现前端路由；&lt;/li&gt;
&lt;li&gt;通过一个实例介绍了结合react-router的Isomorphic使用；&lt;/li&gt;
&lt;li&gt;常见Issues&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sixDegree/react-advance&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;My Demos&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;header-1&quot;&gt;使用示例&lt;/h2&gt;
&lt;p&gt;使用 react-router 实现前端路由：建立在history上，方便进行路由管理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nullvim&quot;&gt; &amp;gt; npm install react-router --save
 &amp;gt; npm install &lt;span class=&quot;keyword&quot;&gt;history&lt;/span&gt; --save
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加载&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;//app.js&lt;/span&gt;
     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; React=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;);
     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ReactDOM=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;react-dom&quot;&lt;/span&gt;);

     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ReactRouter=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;react-router&quot;&lt;/span&gt;);
     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Router=ReactRouter.Router;
     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Route=ReactRouter.Route;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用Router&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方式1：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; routes=(
      &amp;lt;Router&amp;gt;
          &amp;lt;Route path=&quot;/&quot; component={App}&amp;gt;
              &amp;lt;Route path=&quot;child/:id&quot; component={Child} /&amp;gt;
              &amp;lt;Route path=&quot;*&quot; component={NoMatch} /&amp;gt;
          &amp;lt;/Route&amp;gt;
      &amp;lt;/Router&amp;gt;
  );
  ReactDOM.render(routes,document.getElementById(&quot;app&quot;));
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方式二：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; routes={
      path:&lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;,
      component:App,
      childRoutes:[
          {path:&lt;span class=&quot;string&quot;&gt;&quot;/child/:id&quot;&lt;/span&gt;,component:Child},
          {path:&lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;,component:NoMatch}
      ]
  };
  ReactDOM.render(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Router&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;routes&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;{routes}&lt;/span&gt; /&amp;gt;&lt;/span&gt;,document.getElementById(&quot;app&quot;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定义Components&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; App=React.createClass({
     render:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (
             &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
                 &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Header&lt;/span&gt;/&amp;gt;&lt;/span&gt;
                 &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
                     {this.props.children || &quot;Welcome !&quot;}
                 &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
         )
     }
 });

 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Header=React.createClass({
     render:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Header&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;)
     }
 })

 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Child=React.createClass({
     render:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (
             &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt; I am Child {this.props.params.id} ! &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
         )
     }
 });

 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; NoMatch=React.createClass({
     render:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;No Match !&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;)
     }
 })
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; 路由的生命周期处理&lt;br&gt;进入时装载组件离开时卸载组件，不会一下把所有的组件都装载进来&lt;/p&gt;
&lt;h2 id=&quot;header-2&quot;&gt;History&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;createHashHistory&lt;/code&gt; (default) : 通过 hash 来实现，可以通过 window.location.hash 读取到 # 后的内容&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt; &lt;span class=&quot;comment&quot;&gt;//has queryKey, eg: ?_k=ckuvup -&amp;gt; remove queryKey:&lt;/span&gt;
 ReactDOM.render(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Router&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;routes&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;{routes}&lt;/span&gt; 
     &lt;span class=&quot;attr&quot;&gt;history&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;{createHashHistory({queryKey:false})}/&lt;/span&gt;&amp;gt;&lt;/span&gt;,
     document.getElementById(&quot;app&quot;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;createMemoryHistory&lt;/code&gt; (test)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;createBrowserHistory&lt;/code&gt;    (production): run on server，HTML5 才有的新 API，可以用来操作浏览器的 session history (会话历史)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; createBrowserHistory =&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;history/lib/createBrowserHistory&quot;&lt;/span&gt;);
 ReactDOM.render(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Router&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;routes&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;{routes}&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;history&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;{createBrowserHistory()}&lt;/span&gt; /&amp;gt;&lt;/span&gt;,
     document.getElementById(&quot;app&quot;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; Run Based on nodeJS (cmd: node app):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; express = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;express&#39;&lt;/span&gt;)
 &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;path&#39;&lt;/span&gt;)
 &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; port = process.env.PORT || &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;
 &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; app = express()

 &lt;span class=&quot;comment&quot;&gt;// serve static assets normally&lt;/span&gt;
 app.use(express.static(__dirname + &lt;span class=&quot;string&quot;&gt;&#39;/public&#39;&lt;/span&gt;))

 &lt;span class=&quot;comment&quot;&gt;// handle every other route with index.html, which will contain&lt;/span&gt;
 &lt;span class=&quot;comment&quot;&gt;// a script tag to your application&#39;s JavaScript file(s).&lt;/span&gt;
 app.get(&lt;span class=&quot;string&quot;&gt;&#39;*&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;request, response&lt;/span&gt;)&lt;/span&gt;{
   response.sendFile(path.resolve(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;public&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;index.html&#39;&lt;/span&gt;))
 })

 app.listen(port)
 &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;server started on port &quot;&lt;/span&gt; + port)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;header-3&quot;&gt;使用Isomorphic&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;routes.jsx&lt;/code&gt; 定义需要同构的React Routes：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Main=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./src/main&quot;&lt;/span&gt;);
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Child=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./src/child&quot;&lt;/span&gt;);

 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; routes={
     path:&lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;,
     component:Main,
     childRoutes:[
         {path:&lt;span class=&quot;string&quot;&gt;&quot;/child/:id&quot;&lt;/span&gt;,component:Child},
         {path:&lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;,component:NoMatch}
     ]
 };
 &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports=routes;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;app.jsx&lt;/code&gt; 实现Client端渲染：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; routes=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./src/routes&quot;&lt;/span&gt;);
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; createBrowserHistory =&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;history/lib/createBrowserHistory&quot;&lt;/span&gt;);
 ReactDOM.render(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Router&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;routes&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;{routes}&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;history&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;{createBrowserHistory()}&lt;/span&gt; /&amp;gt;&lt;/span&gt;,
     document.getElementById(&quot;app&quot;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;app.js&lt;/code&gt; 编译生成的Client端可执行的js文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nullvim&quot;&gt; &amp;gt; browserify app.jsx -t babelify --presets react -o app.js --extension .jsx
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;index.ejs&lt;/code&gt; 定义主页面，加载上面生成的Client的js文件&lt;code&gt;app.js&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nullhtml&quot;&gt; &lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello React-Router &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;

   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;app&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt; %&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;

   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/libs/react/react.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/libs/react/react-dom.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/app.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;

 &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;server.js&lt;/code&gt; 定义Server端响应渲染&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;babel-core/register&#39;&lt;/span&gt;);
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; React=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;);
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ReactDOMServer=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;react-dom/server&quot;&lt;/span&gt;);

 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Router=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;react-router&#39;&lt;/span&gt;);
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; match=Router.match;
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; RoutingContext=Router.RoutingContext;
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; routes = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./src/routes&quot;&lt;/span&gt;);

 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; express=&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;express&quot;&lt;/span&gt;);
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = express();
 app.set(&lt;span class=&quot;string&quot;&gt;&#39;view engine&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ejs&#39;&lt;/span&gt;);
 app.use(express.static(&lt;span class=&quot;string&quot;&gt;&#39;public&#39;&lt;/span&gt;));

 app.use(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res, next&lt;/span&gt;) &lt;/span&gt;{
     &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(req.url);
     match({routes,location:req.url},&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error, redirectLocation, renderProps&lt;/span&gt;)&lt;/span&gt;{
         &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) {
           res.status(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;).send(error.message)
         } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (redirectLocation) {
           res.redirect(&lt;span class=&quot;number&quot;&gt;302&lt;/span&gt;, redirectLocation.pathname + redirectLocation.search)
         } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (renderProps) {
             &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;render react router&quot;&lt;/span&gt;);
             &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; element=React.createFactory(RoutingContext)(renderProps);
             &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; elementStr=ReactDOMServer.renderToString(element);
             &lt;span class=&quot;comment&quot;&gt;//res.status(200).send(elementStr);&lt;/span&gt;
             res.render(&lt;span class=&quot;string&quot;&gt;&quot;index&quot;&lt;/span&gt;,{content:elementStr});
         } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
           res.status(&lt;span class=&quot;number&quot;&gt;404&lt;/span&gt;).send(&lt;span class=&quot;string&quot;&gt;&#39;Not found&#39;&lt;/span&gt;)
         }
     })
 })

 app.listen(&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, result&lt;/span&gt;)&lt;/span&gt;{
     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(err);
       &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Listening at localhost:3000&#39;&lt;/span&gt;);
 });
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行&lt;code&gt;node server&lt;/code&gt;启动服务查看效果&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;header-4&quot;&gt;Issues&lt;/h2&gt;
&lt;h3 id=&quot;header-5&quot;&gt;1. Add &lt;code&gt;&amp;lt;Routes baseHref&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rackt/react-router/issues/353&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Issue on Github&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; { createHistory, useBasename } &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;history&#39;&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; history = useBasename(createHistory)({
  basename: &lt;span class=&quot;string&quot;&gt;&#39;/my-custom-root&#39;&lt;/span&gt;
})
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;&amp;lt;Router history={history}&amp;gt;
    &amp;lt;Route path=&quot;/&quot; component={App}&amp;gt;&amp;lt;/Route&amp;gt;
&amp;lt;/Router&amp;gt;

&amp;lt;Link path=&quot;/some_path&quot;&amp;gt;some_path&amp;lt;/Link&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;header-6&quot;&gt;2. Passing props to routes&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rackt/react-router/issues/1531&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Issue on Github&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;React.render((
  &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Router&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Route&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;component&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;{RootComp}&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;myprop&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Route&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;component&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;{FooComp}&lt;/span&gt;&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Route&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;component&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;{BarComp}&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Route&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Route&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Router&lt;/span&gt;&amp;gt;&lt;/span&gt;
), document.getElementById(&#39;example&#39;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Option 1) With route attributes&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RootComp&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;{
    render: {
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.route.myprop &lt;span class=&quot;comment&quot;&gt;// == &quot;foo&quot; (this.props.routes[0].myprop)&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Option 2) To first level children with React.cloneElement()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RootComp&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;{
    render: {
        React.cloneElement(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.children, {myprop: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.route.myprop})
    }
}
&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FooComp&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;{
    render: {
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.myprop &lt;span class=&quot;comment&quot;&gt;// == &quot;foo&quot;&lt;/span&gt;
    }
}
&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BarComp&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;{
    render: {
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.myprop &lt;span class=&quot;comment&quot;&gt;// == undefined&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Option 3) To all route components with Router.createElement&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rackt/react-router/blob/master/docs/API.md#createelementcomponent-props&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nulljavascript&quot;&gt;&amp;lt;Router createElement={createElement} /&amp;gt;

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;Component, props&lt;/span&gt;) &lt;/span&gt;{
   &lt;span class=&quot;comment&quot;&gt;// Add myprop to props for all route components&lt;/span&gt;
    _.extend(props, {myprop: &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;})
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Component&lt;/span&gt; {&lt;span class=&quot;attr&quot;&gt;...props&lt;/span&gt;}/&amp;gt;&lt;/span&gt;
}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;header-7&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rackt/react-router&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-router on Github &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sixDegree/react-advance&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;my demos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      using react router build front router
    
    </summary>
    
    
      <category term="ReactJs" scheme="http://sixdegree.github.io/tags/ReactJs/"/>
    
  </entry>
  
</feed>
