<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SixDegree</title>
  
  <subtitle>host by chenjin</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://sixdegree.github.io/"/>
  <updated>2021-02-21T21:32:48.195Z</updated>
  <id>http://sixdegree.github.io/</id>
  
  <author>
    <name>Chen Jin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Cloud</title>
    <link href="http://sixdegree.github.io/2020/12/01/SpringCloud.html"/>
    <id>http://sixdegree.github.io/2020/12/01/SpringCloud.html</id>
    <published>2020-11-30T16:00:00.000Z</published>
    <updated>2021-02-21T21:32:48.195Z</updated>
    
    <content type="html"><![CDATA[<ol><li>服务注册&amp;配置中心：Nacos (Spring Cloud Alibaba)</li><li>链路追踪：Sleuth &amp; Zipkin </li><li>服务调用：OpenFeign (Spring Cloud)</li><li>服务降级：Sentinel（Spring Cloud Alibaba）</li><li>服务网关：Gateway（Spring Cloud)</li></ol><a id="more"></a><h2 id="header-1">Starter</h2><ol><li><p>服务注册中心</p><ul><li>Eureka (Netflix)</li><li>Zookeeper</li><li>Consul</li><li>Nacos (Alibaba)</li></ul></li><li><p>服务配置</p><ul><li>Config</li><li>Nacos (Alibaba)</li></ul></li><li><p>服务总线</p><ul><li>Bus</li><li>Nacos (Alibaba)</li></ul></li><li><p>服务调用</p><ul><li>Ribbon (Netflix)</li><li>LoadBalancer (SpringCloud)</li><li>Feign</li><li>OpenFeign (SpringCloud)</li></ul></li><li><p>服务降级</p><ul><li>Hystrix (Netflix)</li><li>Resilience4j</li><li>Sentinel (Alibaba)</li></ul></li><li><p>服务网关</p><ul><li>Zuul (Netflix)</li><li>Zuul2 (Netflix)</li><li>Gateway (SpringCloud)</li></ul></li></ol><h2 id="header-2">服务注册&amp;配置中心：Nacos (Spring Cloud Alibaba)</h2><ul><li>服务中心 （同类实现： Eureka,Zookeeper,Consual)</li><li>服务配置和总线 （同类实现：Config &amp; Bus)</li></ul><p><a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="external">https://github.com/alibaba/nacos/releases</a><a href="https://nacos.io/zh-cn/docs/quick-start.html" target="_blank" rel="external">https://nacos.io/zh-cn/docs/quick-start.html</a><a href="https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/en-us/index.html" target="_blank" rel="external">https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/en-us/index.html</a></p><pre><code class="lang-shell"># 安装unzip nacos-server-$version.zip 或者 tar -xvf nacos-server-$version.tar.gzcd nacos/bin# 打开sh startup.sh -m standalone# 关闭sh shutdown.sh</code></pre><h3 id="header-3">Nacos Server</h3><p>link：<a href="http://127.0.0.1:8848/nacos/" target="_blank" rel="external">http://127.0.0.1:8848/nacos/</a>默认账号和密码为：nacos/nacos</p><p>注意：Nacos Server 的数据源是用 Derby 还是 MySQL 完全是由其运行模式决定的</p><ul><li>standalone 的话仅会使用 Derby，即使在 application.properties 里边配置 MySQL 也照样无视</li><li>cluster 模式会自动使用 MySQL，这时候如果没有 MySQL 的配置，是会报错的</li><li>不支持 MySQL 8.0 版本</li></ul><h3 id="header-4">Nacos 服务注册</h3><ol><li><p>parent pom</p><pre><code class="lang-xml"> &lt;properties&gt;     &lt;spring.cloud.alibaba&gt;2.2.1.RELEASE&lt;/spring.cloud.alibaba&gt; &lt;/properties&gt;  &lt;dependencyManagement&gt;     &lt;dependencies&gt;          &lt;!-- Spring Cloud Alibaba --&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;             &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;             &lt;version&gt;${spring.cloud.alibaba}&lt;/version&gt;             &lt;type&gt;pom&lt;/type&gt;             &lt;scope&gt;import&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt; &lt;/dependencyManagement&gt;</code></pre></li><li><p>provider/consumer client pom</p><pre><code class="lang-xml"> &lt;!-- 服务发现 --&gt; &lt;dependency&gt;     &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;     &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt; &lt;/dependency&gt;</code></pre></li><li><p>provider</p><ul><li>application.yml<pre><code class="lang-yaml">  server:      port: 7010  spring:    application:      name: nacos-provider    cloud:      nacos:        discovery:          server-addr: localhost:8848 # ${NACOS_SERVER:8848}</code></pre></li><li><p>main</p><pre><code class="lang-java">  @SpringBootApplication  @EnableDiscoveryClient  public class NacosProviderApp {      public static void main(String[] args){          SpringApplication.run(NacosProviderApp.class,args);      }      @RestController      public class HelloController {          @GetMapping(&quot;/hi&quot;)          public Object hello(){ return &quot;Hello&quot;;}      }  }</code></pre></li></ul></li><li><p>consumer</p><ul><li>application.yml<pre><code class="lang-yaml">  server:      port: 7020  spring:    application:      name: nacos-consumer    cloud:      nacos:        discovery:          server-addr: localhost:8848 # ${NACOS_SERVER:8848}</code></pre></li><li><p>main</p><pre><code class="lang-java">  @SpringBootApplication  @EnableDiscoveryClient  public class NacosConsumerApp {      public static void main(String[] args){          SpringApplication.run(NacosConsumerApp.class,args);      }      @Bean      @LoadBalanced // 使用serviceId访问则一定要加上，否则找不到服务；不加此注解，则可通过普通的ip:host的URL来访问服务      public RestTemplate restTemplate(){          return new RestTemplate();      }      @RestController      public class HelloController {          private String remoteServiceId=&quot;nacos-provider&quot;;          @Autowired          private RestTemplate restTemplate;          @GetMapping(&quot;/&quot;)          public Object index(){              return &quot;Index&quot;;          }          @GetMapping(&quot;/hi&quot;)          public Object hello(){              String url = String.format(&quot;http://%s/hi&quot;,remoteServiceId);              String result = restTemplate.getForObject(url,String.class);              return &quot;Say: &quot;+result;          }      }  }</code></pre></li></ul></li><li><p>Test</p><ul><li>provider: Get <a href="http://localhost:7010/hi" target="_blank" rel="external">http://localhost:7010/hi</a></li><li>consumer: Get <a href="http://localhost:7020/" target="_blank" rel="external">http://localhost:7020/</a></li><li>consumer: Get <a href="http://localhost:7020/hi" target="_blank" rel="external">http://localhost:7020/hi</a></li></ul></li></ol><h3 id="header-5">Nacos 服务配置</h3><ol><li><p>provider/consumer client pom</p><pre><code class="lang-xml"> &lt;!-- 服务配置 --&gt; &lt;dependency&gt;     &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;     &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt; &lt;/dependency&gt;  &lt;!-- spring cloud 2020,需加上这个才能读取bootstrap.yml,Nacos Config才能正常使用--&gt; &lt;dependency&gt;     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;     &lt;artifactId&gt;spring-cloud-starter-bootstrap&lt;/artifactId&gt; &lt;/dependency&gt;</code></pre></li><li><p>bootstrap.yml (或者 bootstrap.properties) 优先级高于application.yml，nacos相关配置需配在此处</p><pre><code class="lang-yaml"> server:   port: 7010 spring:   application:     name: nacos-provider   cloud:     nacos:       discovery:         server-addr: localhost:8848 # ${NACOS_SERVER:8848} | 注意：必须有端口号       config:         server-addr: localhost:8848         file-extension: yaml # 支持properties(默认),yaml | 注意：nacos识别yaml，yml会报错         namespace: dear-v1 # 命名空间ID，不是命名空间名称 | 注意：只能配置一个命名空间         group: NACOS_GROUP # 默认DEFAULT_GROUP | 注意：只能配置一个GROUP         # =&gt; 加载的dataId为: ${prefix}-${spring.profiles.active}.${file-extension}         # prefix 默认为 spring.application.name         # spring.profiles.active为空时 =&gt; 对应的连接符 - 也将不存在,dataId 的拼接格式变成 ${prefix}.${file-extension}         ext-config: # 列表，优先级都低于上面正常group&amp;namespace下的配置，列表的优先级是下标越大优先级越高           + data-id: logback-spring.yaml             group: LOG_GROUP             refresh: true           + data-id: external.yaml             group: EXTERNAL_GROUP             refresh: true</code></pre></li><li><p>application.yml (optional): <code>spring.profiles.active</code> 可在运行时指定</p><pre><code class="lang-yaml"> spring:   profiles:     active: dev</code></pre></li><li><p>Controller</p><pre><code class="lang-java"> @RestController @RefreshScope // 实现配置自动更新 public class ConfigController{     @Value(&quot;${provider.name:UnKnow}&quot;)     private String providerName;     @Value(&quot;${welcome:UnKnow}&quot;)     private String welcome;     @GetMapping(&quot;/config&quot;)     public Object config(){         return &quot;ProviderName: &quot;+providerName +&quot;; Welcome: &quot;+welcome;     } }</code></pre></li><li><p>Nocos 配置界面：<code>http://127.0.0.1:8848/nacos</code>，添加配置文件</p><ul><li>namesapce: dear-v1</li><li>group: <ul><li>EXTERNAL_GROUP<ul><li>external.yaml<pre><code class="lang-yaml">  welcome: External Welcome V1</code></pre></li></ul></li><li>LOG_GROUP<ul><li>logback-spring.yaml<pre><code class="lang-yaml">  logging:      config: classpath:logback-spring-${spring.profiles.active}.xml      path: logs      package: com.cj.dear</code></pre></li></ul></li><li>NACOS_GROUP<ul><li>nacos-provider.yaml<pre><code class="lang-yaml">  provider:      name: Default Nacos Provider</code></pre></li><li>nacos-provider-dev.yaml<pre><code class="lang-yaml">  provider:      name: Dev Nacos Provider</code></pre></li><li>nacos-provider-prod.yaml<pre><code class="lang-yaml">  provider:      name: Prod Nacos Provider</code></pre></li></ul></li></ul></li></ul></li><li><p>启动运行，访问 <code>http://localhost:7010/config</code></p><ul><li>Run Configuration =&gt; program arguments <code>--spring.profiles.active=prod</code></li><li>使用命令行：<code>java -jar nacos-provider.jar --spring.profiles.active=dev</code></li></ul></li></ol><h2 id="header-6">链路追踪：Sleuth &amp; Zipkin</h2><h3 id="header-7">Sleuth</h3><ul><li>trace: 整个调用链路，一系列span组成一个树状结构 -- tranceID</li><li>span: 每个最小的工作单元（一次微服务调用）-- spanID</li></ul><p>Sleuth 帮助记录这些traceID,spanIDZipkin Twitter的一个开源项目，收集链路的跟踪数据，提供可插拔的数据存储方式，UI直观查看分析</p><h3 id="header-8">Zipkin</h3><p><a href="https://zipkin.io/" target="_blank" rel="external">https://zipkin.io/</a><a href="https://github.com/openzipkin/openzipkin.github.io" target="_blank" rel="external">https://github.com/openzipkin/openzipkin.github.io</a><a href="https://github.com/openzipkin/zipkin" target="_blank" rel="external">https://github.com/openzipkin/zipkin</a></p><p>核心组件：</p><ul><li>Collector 收集链路信息</li><li>Storage 存储</li><li>Restful API</li><li>Web UI</li></ul><p>分两端：</p><ul><li>服务端<ul><li>Zipkin Server 下载 <a href="https://zipkin.io/pages/quickstart" target="_blank" rel="external">https://zipkin.io/pages/quickstart</a> </li><li>启动 <code>java -jar zipkin.jar</code> 或使用docker <code>docker run -d -p 9411:9411 openzipkin/zipkin</code></li><li>visit <code>http://localhost:9411</code></li></ul></li><li>客户端 发送链路信息给服务端<ul><li>HTTP报文方式发送</li><li>消息总线方式（如RabbitMQ)</li></ul></li></ul><h3 id="header-9">Sample</h3><ol><li><p>pom.xml (所有微服务)</p><pre><code class="lang-xml"> &lt;!-- 链路追踪 Sleuth--&gt; &lt;!--&lt;dependency&gt;--&gt;     &lt;!--&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;     &lt;!--&lt;artifactId&gt;spring-cloud-starter-sleuth&lt;/artifactId&gt;--&gt; &lt;!--&lt;/dependency&gt;--&gt; &lt;!-- Zipkin Client(dependence 已包含了sleuth相关依赖) 收集链路信息，发送给Zipkin Server --&gt; &lt;dependency&gt;     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;     &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt; &lt;/dependency&gt;</code></pre></li><li><p>application.xml （所有微服务）</p><pre><code class="lang-yaml"> spring:   zipkin:     base-url: http://localhost:9411 # Zipkin Server端地址     sender:       type: web                     # 数据用HTTP方式传送给Zipkin Server端的方式   sleuth:     sampler:       probability: 0.5              # 数据采样比（0～1，默认0.1）</code></pre></li><li><p>Test (多请求一些链接，然后去 <a href="http://localhost:9411" target="_blank" rel="external">http://localhost:9411</a> 查看可视化界面)</p><ul><li><a href="http://localhost:81/nacos-consumer/hi?token=a" target="_blank" rel="external">http://localhost:81/nacos-consumer/hi?token=a</a></li><li><a href="http://localhost:81/provider/hi?token=b" target="_blank" rel="external">http://localhost:81/provider/hi?token=b</a></li><li><a href="http://localhost:7010/provider/hi" target="_blank" rel="external">http://localhost:7010/provider/hi</a></li><li>...</li></ul></li></ol><h3 id="header-10">优化：链路数据持久化（默认存储在内存）</h3><p><a href="https://github.com/openzipkin/zipkin/tree/master/zipkin-server" target="_blank" rel="external">https://github.com/openzipkin/zipkin/tree/master/zipkin-server</a></p><p>Sample: 持久化到MySQL</p><ol><li><p>准备数据库表</p><ul><li><a href="https://github.com/openzipkin/zipkin/tree/master/zipkin-storage/mysql-v1#applying-the-schema" target="_blank" rel="external">https://github.com/openzipkin/zipkin/tree/master/zipkin-storage/mysql-v1#applying-the-schema</a></li><li><a href="https://github.com/openzipkin/zipkin/blob/master/zipkin-storage/mysql-v1/src/main/resources/mysql.sql" target="_blank" rel="external">https://github.com/openzipkin/zipkin/blob/master/zipkin-storage/mysql-v1/src/main/resources/mysql.sql</a></li></ul></li><li><p>重启 Zipkin Server, 启动时传递相关配置参数</p><ul><li><a href="https://github.com/openzipkin/zipkin/tree/master/zipkin-server" target="_blank" rel="external">https://github.com/openzipkin/zipkin/tree/master/zipkin-server</a></li><li><a href="https://blog.csdn.net/qq_42714869/article/details/90052903" target="_blank" rel="external">https://blog.csdn.net/qq_42714869/article/details/90052903</a></li><li><a href="https://blog.csdn.net/qq_42714869/article/details/90052903" target="_blank" rel="external">https://blog.csdn.net/qq_42714869/article/details/90052903</a><pre><code class="lang-shell">java -jar zipkin.jar --STORAGE_TYPE=mysql --MYSQL_HOST=localhost --MYSQL_TCP_PORT=3306 --MYSQL_USER=cj --MYSQL_PASS=123 --MYSQL_DB=dear_zipkin</code></pre></li></ul></li></ol><h3 id="header-11">优化：链路数据传输方式（默认Http方式发送给Zipkin Server）</h3><p>Sample: 使用消息中间件 </p><ol><li><p>准备RabbitMQ服务器 <a href="http://localhost:15672" target="_blank" rel="external">http://localhost:15672</a></p></li><li><p>修改Zipkin Server,从RabbitMQ中拉取信息</p><ul><li><a href="https://github.com/openzipkin/zipkin/tree/master/zipkin-collector/rabbitmq" target="_blank" rel="external">https://github.com/openzipkin/zipkin/tree/master/zipkin-collector/rabbitmq</a><pre><code class="lang-shell">java -jar zipkin.jar --STORAGE_TYPE=mysql --MYSQL_HOST=localhost --MYSQL_TCP_PORT=3306 --MYSQL_USER=cj --MYSQL_PASS=123 --MYSQL_DB=dear_zipkin --RABBIT_ADDRESSES=localhost:5672 --RABBIT_USER=admin --RABBIT_PASSWORD=admin --RABBIT_VIRTUAL_HOST=my_vhost</code></pre></li></ul></li><li><p>修改微服务Zipkin client 相关配置，将采集信息发送RabbitMQ</p></li></ol><h2 id="header-12">服务调用：OpenFeign (Spring Cloud)</h2><p>服务调用（同类实现：Ribbon,LoadBalancer,Feign)</p><p><a href="https://docs.spring.io/spring-cloud-openfeign/docs/current/reference/html/" target="_blank" rel="external">https://docs.spring.io/spring-cloud-openfeign/docs/current/reference/html/</a></p><ul><li>依赖注册中心</li><li>使用本地负载均衡器<ul><li>常见算法：轮询，随机，固定IP，权重，Hash一致性，...</li></ul></li></ul><ol><li><p>pom.xml</p><pre><code class="lang-xml"> &lt;!-- 服务发现 Nacos--&gt; &lt;dependency&gt;     &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;     &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;     &lt;!-- 排除ribbon, 使用Springcloud loadbalancer (f否则启动报错)--&gt;     &lt;exclusions&gt;          &lt;exclusion&gt;             &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;             &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;         &lt;/exclusion&gt;     &lt;/exclusions&gt; &lt;/dependency&gt; &lt;!-- Spring Cloud OpenFeign --&gt; &lt;dependency&gt;     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;     &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;     &lt;artifactId&gt;spring-cloud-starter-loadbalancer&lt;/artifactId&gt; &lt;/dependency&gt;</code></pre></li><li><p>application.yml</p><pre><code class="lang-yaml"> server:   port: 7020 spring:   application:     name: nacos-consumer   cloud:     nacos:       discovery:         server-addr: localhost:8848 # ${NACOS_SERVER:8848}         namespace: dear-v1     loadbalancer:       ribbon:         enabled: false # config feign -- optional feign:   client:     config:       nacos-provider: #  FeignClient名 或使用 default         connectTimeout: 5000         readTimeout: 5000         loggerLevel: FULL logging:   level:     com.cj.dear.nacos: debug   config: classpath:logback-spring-dev.xml   path: logs</code></pre></li><li><p>激活Feign <code>@EnableFeignClients</code></p><pre><code class="lang-java"> @SpringBootApplication @EnableDiscoveryClient @EnableFeignClients public class NacosConsumerApp {     public static void main(String[] args){         SpringApplication.run(NacosConsumerApp.class,args);     } }</code></pre></li><li><p>FeignClient （注意：feign要求指明确定返回值类，才能正确解析方法返回值，即方法返回值不能使用Object！）</p><pre><code class="lang-java"> @FeignClient(&quot;nacos-provider&quot;) public interface ProviderFeignClient{     @GetMapping(&quot;/hi&quot;)     String hello();     @GetMapping(&quot;/config&quot;)     String config(); }</code></pre></li><li><p>Usage</p><pre><code class="lang-java"> @RestController public class HelloController{     @Autowired     private ProviderFeignClient providerFeignClient;     @GetMapping(&quot;callProvider&quot;)     public Object callProvider(@RequestParam(required = false,             name=&quot;func&quot;,defaultValue = &quot;hi&quot;)String func){         System.out.println(&quot;func:&quot;+func);         if(func.equals(&quot;hi&quot;))             return &quot;Call &quot;+func+&quot; Result: &quot;+providerFeignClient.hello();         return &quot;Call &quot;+func+&quot; Result: &quot;+providerFeignClient.config();     } }</code></pre></li><li><p>Test (启动N个nacos-provider)</p><ul><li><a href="http://localhost:7020/callProvider" target="_blank" rel="external">http://localhost:7020/callProvider</a></li><li><a href="http://localhost:7020/callProvier?func=xx" target="_blank" rel="external">http://localhost:7020/callProvier?func=xx</a></li></ul></li></ol><h2 id="header-13">服务降级：Sentinel（Spring Cloud Alibaba）</h2><p>服务降级（同类实现：Hystrix,Resilience4j)</p><p><a href="https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/en-us/index.html#_spring_cloud_alibaba_sentinel" target="_blank" rel="external">https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/en-us/index.html#_spring_cloud_alibaba_sentinel</a></p><p><a href="https://github.com/alibaba/Sentinel/" target="_blank" rel="external">https://github.com/alibaba/Sentinel/</a></p><p><a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D" target="_blank" rel="external">https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D</a></p><p>高并发问题由于请求积压，造成服务瘫痪，服务与服务之间存在依赖性，故障传播，连锁反应，造成整个系统崩溃 （雪崩）=》 处理方案：</p><ul><li>服务隔离<ul><li>线程池隔离（每个服务接口有自己独立的线程池，互不影响）</li><li>信号量隔离（计数器，最大阈值，超过则拒绝）</li></ul></li><li>服务熔断，降级</li><li>服务限流</li></ul><h3 id="header-14">Sentinel 控制台</h3><p><a href="https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0" target="_blank" rel="external">https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0</a></p><ol><li><p>启动Sentinel控制台</p><pre><code class="lang-bash"> java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar</code></pre><ul><li>启动时加入 JVM 参数 <code>-Dcsp.sentinel.dashboard.server=consoleIp:port</code> 指定控制台地址和端口。</li><li>若启动多个应用，则需要通过 <code>-Dcsp.sentinel.api.port=xxxx</code> 指定客户端监控 API 的端口（默认是 8719）</li></ul></li><li><p>visit: <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a></p><ul><li>username/password: sentinel/sentinel</li></ul></li></ol><h3 id="header-15">Sample</h3><ol><li><p>pom.xml</p><pre><code class="lang-xml"> &lt;!-- Spring Cloud Aalibaba Sentinel --&gt; &lt;dependency&gt;     &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;     &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt; &lt;/dependency&gt;</code></pre></li><li><p>application.yml</p><pre><code class="lang-yaml"> spring:   cloud:     sentinel:       transport:         dashboard: localhost:8080       eager: true # 默认false，懒加载</code></pre></li><li><p>java</p><pre><code class="lang-java"> @GetMapping(&quot;callProvider&quot;) @SentinelResource(value=&quot;callProvider&quot;,         blockHandler=&quot;callProviderBlockHandler&quot;,fallback=&quot;callProviderFallbackHandler&quot;) public Object callProvider(@RequestParam(required = false,         name=&quot;func&quot;,defaultValue = &quot;hi&quot;)String func){     System.out.println(&quot;func:&quot;+func);     if(func.equals(&quot;hi&quot;))         return &quot;Call &quot;+func+&quot; Result: &quot;+providerFeignClient.hello();     return &quot;Call &quot;+func+&quot; Result: &quot;+providerFeignClient.config(); } // sentinel // 1. 限流熔断 blockHandler（捕获BlockException) 注意：参数（最后Optional: BlockException），返回值类型需与原方法一致 // 2. 异常降级 fallback（捕获其他异常） 注意：参数，返回值类型需与原方法一致（Optional: 可加Throwable） public Object callProviderBlockHandler(String func,BlockException ex){     return &quot;CallProvider:&quot;+func+&quot;; BlockHandler&quot;; } public Object callProviderFallbackHandler(String func){     return &quot;CallProvider:&quot;+func+&quot;; FallBack&quot;; }</code></pre><ul><li>注意：blockHandler和fallback都配置了，则被限流降级而抛出BlockException时只会进入blockHandler处理逻辑</li></ul></li><li><p>启动服务</p></li><li><p>访问Sentinel控制台，配置限流规则，测试</p></li></ol><h3 id="header-16">限流规则持久化</h3><p>一条限流规则的组成：</p><ul><li>resource : 资源名（限流规则的作用对象），唯一，默认为请求路径</li><li>limitApp : 流控针对的调用来源（Sentinel可针对调用者进行限流，填写微服务名，默认default，即不区分调用来源）</li><li>grade : 阈值类型<ul><li>0: 线程数</li><li>1: QPS</li></ul></li><li>count : 单机限流阈值</li><li>strategy : 流控模式<ul><li>0: 直接，API达到限流条件时，直接限流</li><li>1: 关联，关联资源达到阈值时，限流自己</li><li>2: 链路，只记录指定链路上的流量（指定资源从入口资源进来的流量，达到阈值则进行限流，API级别的针对来源）</li></ul></li><li>controlBehavior : 流控效果<ul><li>0: 快速失败，直接拒绝，抛异常</li><li>1: Warm up，根据codeFactor（冷加载因子，默认3）的值，从阈值/codeFactor，经过预热时长，才达到设置的QPS值</li><li>2: 排队等待，匀速排队，让请求匀速通过（阈值类型必须为QPS才可）</li></ul></li><li>clusterMode : 是否集群</li></ul><p><strong> Sample: 本地文件加载限流规则 </strong></p><ol><li><p>resources/flowRule.json</p><pre><code class="lang-json"> [     {         &quot;resource&quot;: &quot;callProvider&quot;,         &quot;limitApp&quot;: &quot;default&quot;,         &quot;grade&quot;: 0,         &quot;count&quot;: 2,         &quot;strategy&quot;: 0,         &quot;controlBehavior&quot;: 0     } ]</code></pre></li><li><p>resources/application.yml</p><pre><code class="lang-yaml"> spring:   application:     name: nacos-consumer   cloud:     sentinel:       transport:         dashboard: localhost:8080       eager: true # 默认false，懒加载       datasource:         ds1:           file:  # 配置从本地文件读取限流规则             dataType: json             ruleType: flow             file: classpath:flowRule.json</code></pre></li><li><p>启动服务</p></li><li><p>visit sentinel控制台查看规则 <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a></p></li></ol><p><strong> Sample: 从nacos加载限流规则 </strong></p><ol><li><p>visit nacos控制台，配置 <code>nacos-consumer-sentinel.json</code></p></li><li><p>pom.xml: 增加 <code>sentinel-datasource-nacos</code>包</p><pre><code class="lang-xml"> &lt;!-- Spring Cloud Aalibaba Sentinel --&gt; &lt;dependency&gt;     &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;     &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- Sentinel从nacos获取限流规则--&gt; &lt;dependency&gt;     &lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt;     &lt;artifactId&gt;sentinel-datasource-nacos&lt;/artifactId&gt; &lt;/dependency&gt;</code></pre></li><li><p>application.yml</p><pre><code class="lang-yaml"> spring:   application:     name: nacos-consumer   cloud:     sentinel:       transport:         dashboard: localhost:8080       eager: true # 默认false，懒加载       datasource:         ds1: #          file: # 配置从本地文件读取限流规则 #            dataType: json #            ruleType: flow #            file: classpath:flowRule.json           nacos: # 配置从nacos中获取             dataType: json             ruleType: flow             serverAddr: localhost:8848             namespace: dear-v1             dataId: nacos-consumer-sentinel.json             groupId: DEFAULT_GROUP</code></pre></li><li><p>启动服务</p></li><li><p>visit sentinel控制台查看规则 <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a></p></li></ol><h2 id="header-17">服务网关：Gateway（Spring Cloud)</h2><p>服务网关（同类实现：Zuul1,Zuul2)</p><ul><li>Netflix Zuul1: 阻塞Servlet</li><li>Netflix Zuul2: 基于Netty，非阻塞，支持长链接</li><li>SpringCloud Gateway: 基于Netty,Project Reactor响应式非阻塞，支持长链接，使用WebFlux，Filter链方式</li></ul><p>可应用解决问题：</p><ul><li>统一微服务登录认证问题，权限控制，减少代码冗余</li><li>跨域问题</li><li>保护服务，限流，黑白名单等</li><li>统一日志</li></ul><p>核心概念：</p><ul><li>路由 routes: 一个route由id,uri,predicates,filters组成</li><li>断言 predicates : 定义匹配来自HttpRequest的任何信息（断言函数输入类型是Spring5.0的ServerWebExchange)</li><li>过滤器 filters : 两种类型 GatewayFilter / GlobalFilter</li></ul><h3 id="header-18">Sample</h3><ol><li><p>pom.xml</p><pre><code class="lang-xml"> &lt;!-- Spring Cloud Gateway | 注意：依赖WebFlux，所以不要引入spring-boot-starter-web，，不然会与SpringMVC冲突，启动报错--&gt; &lt;dependency&gt;     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;     &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt; &lt;/dependency&gt;  &lt;!--&lt;dependency&gt;--&gt;     &lt;!--&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;     &lt;!--&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;--&gt; &lt;!--&lt;/dependency&gt;--&gt; &lt;!-- Spring Cloud 2x 有这个问题 解决报错：Parameter 0 of method loadBalancerWebClientBuilderBeanPostProcessor in org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration required a bean of type &#39;org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction&#39; that could not be found. --&gt; &lt;dependency&gt;     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;     &lt;artifactId&gt;spring-cloud-starter-loadbalancer&lt;/artifactId&gt; &lt;/dependency&gt;</code></pre></li><li><p>application.yml</p><pre><code class="lang-yaml"> spring:   profiles:     active: dev   cloud:     gateway:       discovery:                        # 简化路由配置，自动根据serviceId进行路由转发 eg: http://localhost:81/nacos-consumer/hi 会自动转发到 http://nacos-consumer/hi         locator:           enabled: true                 # 开启根据serviceId自动转发｜打开后，可使用serviceId，负载均衡定位访问服务           lower-case-service-id: true   # 微服务名称以小写形式呈现       routes:         + id: baidu           uri: https://www.baidu.com           filters:             + SetPath=/?{args}           predicates:             + Path=/baidu/{args}         + id: nacos-provider          # 路由的ID，没有固定规则但要求唯一           uri: lb://nacos-provider/   # 匹配后提供服务的路由地址（lb:// 根据serviceId，负载均衡策略确定具体服务地址）           filters:             + StripPrefix=1           # 过滤器，不加时定位服务为：lb://nacos-provider/provider/**；设置去掉第一段，则变成lb://nacos-provider/**           predicates:             + Path=/provider/**       # 断言,路径相匹配的进行路由</code></pre></li><li><p>自定义GlobalFilter</p><pre><code class="lang-java"> @Component public class GatewayTokenFilter implements GlobalFilter {     @Override     public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) {         String token = exchange.getRequest().getQueryParams().getFirst(&quot;token&quot;);         if(StringUtils.isEmpty(token)){             ServerHttpResponse response = exchange.getResponse();             response.setStatusCode(HttpStatus.FORBIDDEN);             String msg = &quot;Gateway:Forbidden to visit&quot;;             DataBuffer df = response.bufferFactory().wrap(msg.getBytes());             return response.writeWith(Mono.just(df));         }         return chain.filter(exchange);     } }</code></pre></li><li><p>Test</p><ul><li><a href="http://localhost:81/baidu/dd" target="_blank" rel="external">http://localhost:81/baidu/dd</a> =》 Gateway:Forbidden to visit</li><li><a href="http://localhost:81/baidu/dd?token=ee" target="_blank" rel="external">http://localhost:81/baidu/dd?token=ee</a> =&gt; 看到百度页面</li></ul></li><li><p>结合Nacos</p><pre><code class="lang-yaml"> server:   port: 81 spring:   application:     name: cloud-gateway   cloud:     nacos:       discovery:         server-addr: localhost:8848         namespace: dear-v1       config:         server-addr: localhost:8848         file-extension: yaml         namespace: dear-v1         group: CLOUD_GROUP         ext-config:           + data-id: logback-spring.yaml             group: LOG_GROUP             refresh: true           + data-id: external.yaml             group: EXTERNAL_GROUP             refresh: true</code></pre></li><li><p>main</p><pre><code class="lang-java"> @SpringBootApplication @EnableDiscoveryClient public class CloudGatewayApp {     public static void main(String[] args){         SpringApplication.run(CloudGatewayApp.class,args);     }     @Value(&quot;${provider.name:UnKnow}&quot;)     private String providerName;     @RestController     @RefreshScope     public class HelloController{         @Value(&quot;${provider.name:UnKnow}&quot;)         private String providerName;         @GetMapping(&quot;/hi&quot;)  // http://localhost:81/hi =&gt; Gateway: Hello | ProviderName: Default Cloud Gateway V5 dev         public String Hello() {             return &quot;Gateway: Hello | ProviderName: &quot;+providerName;         }     } }</code></pre></li><li><p>Test (需启动 Nacos Server,nacos-provider工程)</p><ul><li><a href="http://localhost:81/hi" target="_blank" rel="external">http://localhost:81/hi</a> =&gt; Gateway: Hello | ProviderName: Default Cloud Gateway V5 dev</li><li><a href="http://localhost:81/provider/hi" target="_blank" rel="external">http://localhost:81/provider/hi</a>  =》 Gateway:Forbidden to visit</li><li><a href="http://localhost:81/provider/hi?token=11" target="_blank" rel="external">http://localhost:81/provider/hi?token=11</a> =》 Hello</li><li><a href="http://localhost:81/provider/config?token=22" target="_blank" rel="external">http://localhost:81/provider/config?token=22</a> =》 ProviderName: Dev Nacos Provider; Welcome: External Welcome V1</li><li><a href="http://localhost:81/nacos-consumer/hi?token=11" target="_blank" rel="external">http://localhost:81/nacos-consumer/hi?token=11</a> =》 Say: Hello</li></ul></li></ol><h3 id="header-19">predicates 断言</h3><p>RoutePredicateFactory</p><ul><li>datetime 请求时间校验: After,Before,Between</li><li>Cookie 请求Cookie校验 </li><li>Header 请求头校验</li><li>Host 请求Host校验</li><li>Method 请求方法校验</li><li>Path 请求路径校验</li><li>Queryparam 请求参数校验</li><li>RemoteAddr 请求远程地址校验</li></ul><h3 id="header-20">开启微服务名称转发</h3><p><code>spring.cloud.gateway.discovery.locator.enable=true</code></p><pre><code class="lang-yaml">spring:  cloud:    gateway:      discovery:                        # 简化路由配置，自动根据serviceId进行路由转发        locator:          enabled: true                 # 开启根据serviceId自动转发｜打开后，可使用serviceId，负载均衡定位访问服务          lower-case-service-id: true   # 微服务名称以小写形式呈现</code></pre><p>开启后，无需配置routes，即可实现visit <code>http://localhost:81/nacos-consumer/hi</code> 自动转发到 <code>http://nacos-consumer/hi</code></p><p>Test: <a href="http://localhost:81/nacos-consumer/hi?token=11" target="_blank" rel="external">http://localhost:81/nacos-consumer/hi?token=11</a> =》 Say: Hello</p><h3 id="header-21">过滤器</h3><ul><li>生命周期：<ul><li><code>pre</code></li><li><code>post</code></li></ul></li><li>类型：<ul><li><code>GatewayFilter</code> 局部过滤器，应用到单一路由，或一个分组路由上<ul><li>Gateway中已内置了很多不同类型的局部过滤器，可直接使用 （实现类以<code>GatewawyFilterFactory</code>结尾）</li></ul></li><li><code>GlobalFilter</code> 全局过滤器，应用到所有路由上，eg 内置的一些全局过滤器<ul><li>LoadBalancer 负载均衡相关过滤器： LoadBalancerClientFilter</li><li>HttpClient http客户短相关：NettyRoutingFilter</li><li>Websocket ：WebsocketRoutingFilter</li><li>ForwardPath 路径转发：ForwardPathFilter</li><li>RouteToRequestUrl 路由Url相关：RouteToRequestUrlFilter</li><li>WebClient ：WebClientHttpRoutingFilter,WebClientWriteResponseFilter</li></ul></li></ul></li></ul><p>自定义GlobalFilter: 实现GlobalFilter, Ordered(Optional,越小优先级越高)</p><h3 id="header-22">网关限流</h3><p>常见限流算法：</p><ul><li>计数器<ul><li>每个单位时间内 =&gt; 累计统计单位时间内请求数量 =&gt; 是否超过单位时间内最大的请求数量（阈值）=&gt; 一个单位时间结束，重置0重新累计</li><li>缺点：单位时间内不平滑</li></ul></li><li>漏桶算法<ul><li>内部维护一个队列（桶容量）=&gt; 按一定频率输出（rate）=&gt; 超出桶容量的丢弃/拒绝</li><li>都按一定频率输出，自己可能积压太多请求，自身压力大，对后面微服务是种浪费</li></ul></li><li>令牌算法（漏桶算法改进版，允许一定程度的突发调用）<ul><li>内部维护桶（可负载最大容量）=&gt; 按一定速率往桶里存放令牌(满了则不生成令牌) =&gt; 请求从桶里获取令牌成功则可进行下步操作 =&gt; 请求无法获取令牌则等待或失败</li><li>可快速转发为后面的微服务，不用积压太多请求，保护自己</li></ul></li></ul><p>Spring Cloud Gateway：</p><ul><li>基于Filter：官方提供了基于令牌桶的限流支持<ul><li>基于内置的局部过滤器工厂<code>RequestRateLimiterGatewayFilterFactory</code>实现（通过Redis和lu脚本结合的方式实现）</li></ul></li><li>基于Sentinel的限流</li></ul><h3 id="header-23">网关限流：基于Filter</h3><ol><li><p>pom.xml</p><pre><code class="lang-xml"> &lt;!-- 网关限流： 基于Filter 实现 --&gt; &lt;!-- 监控依赖 --&gt; &lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- Reids 相关依赖（基于reactive的redis依赖）） --&gt; &lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-data-redis-reactive&lt;/artifactId&gt; &lt;/dependency&gt;</code></pre></li><li><p>application.yml 添加redis &amp; 限流配置</p><pre><code class="lang-yaml"> spring:   redis:     host: localhost     port: 6379     database: 1     password: 123456   cloud:     gateway:       routes:         + id: nacos-provider           uri: lb://nacos-provider/           filters:             + name: RequestRateLimiter # 使用限流过滤器               args:                 key-resolver: &#39;#{@queryParamKeyResolver}&#39;   # 限流Key解析器（即基于什么限流），使用SpEL表达式@xxx从Spring容器中获取name为xxx的Bean对象, 查看自定义的RateLimiteConfig中注入的Bean                 redis-rate-limiter.replenishRate: 1  # 向令牌桶中填充token的速率                 redis-rate-limiter.burstCapacity: 3  # 令牌桶容量                 redis-rate-limiter.requestedTokens: 1 # 一个请求消耗几个令牌             + StripPrefix=1           predicates:             + Path=/provider/**</code></pre></li><li><p>编写KeyResolver</p><pre><code class="lang-java"> @Configuration public class KeyResolverConfig {     // 基于请求路径限流     @Bean     @Primary     public KeyResolver pathKeyResolver(){         return new KeyResolver(){             @Override             public Mono&lt;String&gt; resolve(ServerWebExchange exchange) {                 return Mono.just(exchange.getRequest().getPath().toString());             }         };     }     // 基于请求参数限流     @Bean     public KeyResolver queryParamKeyResolver(){         return exchange -&gt;{             String token = exchange.getRequest().getQueryParams().getFirst(&quot;token&quot;);             return Mono.just(token!=null?token:exchange.getRequest().getPath().toString());         };     } }</code></pre></li><li><p>Test</p><ul><li>Redis Cli: 选择数据库，打开监听<pre><code class="lang-shell">  &gt; select 1  &gt; monitor</code></pre></li><li>vist:<ul><li><a href="http://localhost:81/provider/hi" target="_blank" rel="external">http://localhost:81/provider/hi</a></li><li><a href="http://localhost:81/provider/hi?token=11" target="_blank" rel="external">http://localhost:81/provider/hi?token=11</a></li><li><a href="http://localhost:81/provider/hi?token=22" target="_blank" rel="external">http://localhost:81/provider/hi?token=22</a></li></ul></li></ul></li></ol><h3 id="header-24">网关限流：基于Sentinel</h3><p><a href="https://www.cnblogs.com/yinjihuan/p/10772558.html" target="_blank" rel="external">https://www.cnblogs.com/yinjihuan/p/10772558.html</a></p><p><a href="https://github.com/alibaba/Sentinel/wiki/API-Gateway-Flow-Control" target="_blank" rel="external">https://github.com/alibaba/Sentinel/wiki/API-Gateway-Flow-Control</a></p><ol><li><p>pom.xml</p><pre><code class="lang-xml"> &lt;!-- 网关限流： 基于Sentinel 实现 --&gt; &lt;dependency&gt;     &lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt;     &lt;artifactId&gt;sentinel-spring-cloud-gateway-adapter&lt;/artifactId&gt; &lt;/dependency&gt;</code></pre></li><li><p>application.yml</p><pre><code class="lang-yaml"> spring:   cloud:     gateway:       discovery:         locator:           enabled: true           lower-case-service-id: true       routes:         + id: baidu           uri: https://www.baidu.com           filters:             + SetPath=/?{args}           predicates:             + Path=/baidu/{args}         + id: nacos-provider           uri: lb://nacos-provider/           predicates:             + Path=/provider/**           filters:             + StripPrefix=1</code></pre></li><li><p>Configuration</p><pre><code class="lang-java"> @Configuration public class SentinelGatewayConfig {     private final List&lt;ViewResolver&gt; viewResolvers;     private final ServerCodecConfigurer serverCodecConfigurer;     public SentinelGatewayConfig(ObjectProvider&lt;List&lt;ViewResolver&gt;&gt; viewResolversProvider,                                 ServerCodecConfigurer serverCodecConfigurer) {         this.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList);         this.serverCodecConfigurer = serverCodecConfigurer;     }     // 配置限流异常处理器     @Bean     @Order(-1)     public SentinelGatewayBlockExceptionHandler sentinelGatewayBlockExceptionHandler() {         // Register the block exception handler for Spring Cloud Gateway.         return new SentinelGatewayBlockExceptionHandler(viewResolvers, serverCodecConfigurer);     }     // 配置限流过滤器     @Bean     @Order(Ordered.HIGHEST_PRECEDENCE)     public GlobalFilter sentinelGatewayFilter() {         // By default the order is HIGHEST_PRECEDENCE         return new SentinelGatewayFilter();     }     // Optinal: 配置一些初始化的限流规则     // Test: http://localhost:81/provider/hi?token=22     @PostConstruct     public void initGatewayRules(){         Set&lt;GatewayFlowRule&gt; rules = new HashSet&lt;&gt;();         // 路由ID，单位时间限流阈值，单位时间         // rules.add(new GatewayFlowRule(&quot;nacos-provider&quot;).setCount(2).setIntervalSec(1));         // 限流分组名，单位时间限流阈值，单位时间         rules.add(new GatewayFlowRule(&quot;providerApis&quot;).setCount(2).setIntervalSec(1));         GatewayRuleManager.loadRules(rules);     }     // Optinal: 自定义限流分组     @PostConstruct     public void initCustomizedApis(){         Set&lt;ApiDefinition&gt; definitions = new HashSet&lt;&gt;();         Set&lt;ApiPredicateItem&gt; predicateItems = new HashSet&lt;&gt;();         predicateItems.add(new ApiPathPredicateItem()                 .setPattern(&quot;/provider/**&quot;)                 .setMatchStrategy(SentinelGatewayConstants.URL_MATCH_STRATEGY_PREFIX)         );         ApiDefinition def = new ApiDefinition(&quot;providerApis&quot;)                 .setPredicateItems(predicateItems);         definitions.add(def);         GatewayApiDefinitionManager.loadApiDefinitions(definitions);     }     // Optinal: 自定义限流处理器     @PostConstruct     public void initBlockHandlers(){         BlockRequestHandler handler = new BlockRequestHandler() {             @Override             public Mono&lt;ServerResponse&gt; handleRequest(ServerWebExchange serverWebExchange, Throwable throwable) {                 Map map = new HashMap();                 map.put(&quot;code&quot;,&quot;001&quot;);                 map.put(&quot;message&quot;,&quot;不好意思，限流了哦&quot;);                 return ServerResponse.status(HttpStatus.OK)                         .contentType(MediaType.APPLICATION_JSON)                         .body(BodyInserters.fromValue(map));             }         };         GatewayCallbackManager.setBlockHandler(handler);     } }</code></pre></li><li><p>Test: <a href="http://localhost:81/provider/hi?token=22" target="_blank" rel="external">http://localhost:81/provider/hi?token=22</a></p></li></ol><h3 id="header-25">网关高可用</h3><p>Ngnix + 网关集群</p><ol><li><p>Ngnix 配置</p><pre><code> // gateway集群 upstream gateway{     server 127.0.0.1:81;     server 127.0.0.1:82; } Server{     listen 80;     server_name localhost;     # 路由     location / {         proxy_pass http://gateway;     } }</code></pre></li><li><p>启动两个网关实例，端口分别为81，82</p></li><li><p>Test: <a href="http://localhost/provider/hi?token=aa" target="_blank" rel="external">http://localhost/provider/hi?token=aa</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;服务注册&amp;amp;配置中心：Nacos (Spring Cloud Alibaba)&lt;/li&gt;
&lt;li&gt;链路追踪：Sleuth &amp;amp; Zipkin &lt;/li&gt;
&lt;li&gt;服务调用：OpenFeign (Spring Cloud)&lt;/li&gt;
&lt;li&gt;服务降级：Sentinel（Spring Cloud Alibaba）&lt;/li&gt;
&lt;li&gt;服务网关：Gateway（Spring Cloud)&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://sixdegree.github.io/tags/Spring/"/>
    
      <category term="MicroService" scheme="http://sixdegree.github.io/tags/MicroService/"/>
    
  </entry>
  
  <entry>
    <title>OAuth</title>
    <link href="http://sixdegree.github.io/2020/11/20/OAuth.html"/>
    <id>http://sixdegree.github.io/2020/11/20/OAuth.html</id>
    <published>2020-11-19T16:00:00.000Z</published>
    <updated>2021-02-21T17:30:52.296Z</updated>
    
    <content type="html"><![CDATA[<ol><li>配置<ul><li>认证授权服务</li><li>资源服务</li></ul></li><li>Sample<ul><li>基于内存/JDBC/RBAC认证授权</li><li>资源服务器</li></ul></li></ol><a id="more"></a><h2 id="header-1">Starter</h2><p><img src="/2020/11/20/oauth-draft.png" alt="OAuth"></p><p>OAuth2.0 是一种协议，提供认证和授权的标准SpringSecurity，Shiro等框架有自己的实现</p><p>OAuth2.0 涵盖两个服务，可放于一个应用程序中实现，也可用于 1（认证服务）+ N（资源服务）分别部署</p><ul><li>认证服务 Authorization Server：认证合法性，颁发token，即包含两个必须要实现的endpoints<ul><li>AuthorizationEndpoint 用于认证的请求，默认URL：<code>/auth/authorize</code></li><li>TokenEndpoint 用于获取token的请求，默认URL：<code>/auth/token</code></li></ul></li><li>资源服务 Resource Server：拦截保护资源，token鉴权<ul><li>OAuth2AuthenticationProcessingFilter 拦截鉴权token</li></ul></li></ul><h3 id="header-2">配置：认证授权服务</h3><pre><code class="lang-java">public class AuthorizationServerConfigurerAdapter implements AuthorizationServerConfigurer {    @Override    public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {    }    @Override    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {    }    @Override    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {    }}</code></pre><p>需配置以下三个对象：</p><ul><li>ClientDetailsServiceConfigurer 配置哪些客户端可使用此服务</li><li>AuthorizationServerEndpointsConfigurer 配置获取token的访问端点，token服务（token如何发放，存储等）<ul><li>通过以下属性决定支持的授权类型(Grant Types)<ul><li>authenticationManager 为&quot;password&quot;模式服务</li><li>userDetailsService</li><li>authorizationCodeServices 为“authorization_code&quot;授权码模式服务</li><li>implicitGrantService 设置隐式授权模式</li><li>tokenGranter 自定义模式使用</li></ul></li><li>pathMapping()配置端点URL，默认：<ul><li>/oauth/authorize 认证</li><li>/oauth/token 获取token</li><li>/oauth/confirm_access 确认授权提交</li><li>/oauth/error 错误</li><li>/oauth/check_token 校验token </li><li>/oauth/token_key 公有密钥</li></ul></li></ul></li><li>AuthorizationServerSecurityConfigurer 配置token端点的安全约束（授权哪些可以访问token端点）</li></ul><p>认证授权模式：</p><ul><li>授权码模式 authorization_code</li><li>简化模式 implicit</li><li>密码模式 password</li><li><p>客户端模式 client_credentials</p></li><li><p>认证：验证账号密码</p></li><li>授权：这个角色能操作哪些数据<ul><li>角色：人（运营，编辑，管理员，...）/ 系统 （日志系统，监控系统，...）/ 时间（定时清理，...）</li><li>权限控制模型：<ul><li>RBAC 基于角色的访问控制 (Role Based Access Control)</li><li>ACL 访问控制列表</li><li>ABAC 基于属性</li><li>PBAC 基于策略</li></ul></li></ul></li></ul><h3 id="header-3">配置：资源服务</h3><pre><code class="lang-java">public class ResourceServerConfigurerAdapter implements ResourceServerConfigurer {    @Override    public void configure(ResourceServerSecurityConfigurer resources) throws Exception {    }    @Override    public void configure(HttpSecurity http) throws Exception {        http.authorizeRequests().anyRequest().authenticated();    }}</code></pre><p>ResourceServerTokenServices 验证token</p><ul><li>DefaultTokenService 在资源服务器本地，配置token存储，解码等服务（认证和资源服务在同一个应用程序时使用）</li><li>RemoteTokenService 资源服务器通过Http方式，请求认证服点（/oauth/check_token）来完成解码token（认证和资源服务不在同一个应用程序时使用）</li></ul><h3 id="header-4">Doc</h3><p><a href="https://spring.io/projects/spring-security-oauth" target="_blank" rel="external">https://spring.io/projects/spring-security-oauth</a><a href="https://github.com/spring-projects/spring-security/wiki/OAuth-2.0-Migration-Guide" target="_blank" rel="external">https://github.com/spring-projects/spring-security/wiki/OAuth-2.0-Migration-Guide</a><a href="https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql" target="_blank" rel="external">https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql</a></p><h2 id="header-5">Sample</h2><h3 id="header-6">认证服务: 基于内存方式</h3><ol><li><p>application.yml</p><pre><code class="lang-yaml"> server:   port: 5000   servlet:     context-path: /dear-auth</code></pre></li><li><p>配置OAuth认证授权服务器</p><pre><code class="lang-java"> @Configuration @EnableAuthorizationServer public class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter{     /// 配置Client     @Autowired     private PasswordEncoder passwordEncoder;     @Override     public void configure(ClientDetailsServiceConfigurer clients) throws Exception {         // 使用内存方式         clients.inMemory()             .withClient(&quot;DearApp&quot;)//客户端id             .secret(passwordEncoder.encode(&quot;DearApp&quot;))             .authorizedGrantTypes(&quot;authorization_code&quot;, &quot;password&quot;,&quot;refresh_token&quot;, ) // 该客户端允许的授权类型(authorization_code,password,client_credentials,implicit,refresh_token)             .scopes(&quot;app&quot;)//允许的授权范围，名称自定义，是个标识，必填             .redirectUris(&quot;http://www.baidu.com&quot;) //验证回调地址             ;     } }</code></pre></li><li><p>配置Security（提供认证授权页面进行认证： <code>http://localhost:5000/dear-auth/login</code>）</p><pre><code class="lang-java"> @Configuration @EnableWebSecurity @EnableGlobalMethodSecurity(prePostEnabled = true,securedEnabled = true,jsr250Enabled = true) class WebSecurityConfig extends WebSecurityConfigurerAdapter {     // 采用bcrypt对密码进行编码     @Bean     public PasswordEncoder passwordEncoder() {         return new BCryptPasswordEncoder();     }     @Override     protected void configure(AuthenticationManagerBuilder auth) throws Exception {         auth.inMemoryAuthentication()                 .withUser(&quot;admin&quot;).password(passwordEncoder().encode(&quot;123&quot;)).roles(&quot;ADMIN&quot;)                 .and()                 .withUser(&quot;user&quot;).password(passwordEncoder().encode(&quot;123&quot;)).roles(&quot;USER&quot;)                 ;     } }</code></pre></li><li><p>AuthApp.java</p><pre><code class="lang-java"> @SpringBootApplication public class AuthApp {     public static void main(String[] args){         SpringApplication.run(AuthApp.class);     } }</code></pre></li></ol><p><strong> 测试： </strong></p><ol><li>Browser visit: GET <code>http://localhost:5000/dear-auth/oauth/authorize?client_id=DearApp&amp;response_type=code</code><ul><li>默认跳转到认证页面 <code>http://localhost:5000/dear-auth/login</code>，输入账户密码（admin,123)进行验证</li><li>认证成功后，跳转回授权页面 <code>http://localhost:5000/dear-auth/oauth/authorize?client_id=DearApp&amp;response_type=code</code>,选择是否同意授权</li><li>同意授权后，则跳转到 redirect_uri+code <code>https://www.baidu.com/?code=3Tgl8q</code>,即获得授权码<code>3Tgl8q</code></li></ul></li><li><p>获取token</p><ul><li><p>使用cmd命令：</p><pre><code class="lang-shell">  &gt; curl -d &#39;grant_type=authorization_code&amp;code=3Tgl8q&#39; -X POST http://DearApp:DearApp@localhost:5000/dear-auth/oauth/token -i  HTTP/1.1 200  Cache-Control: no-store  Pragma: no-cache  X-Content-Type-Options: nosniff  X-XSS-Protection: 1; mode=block  X-Frame-Options: DENY  Content-Type: application/json;charset=UTF-8  Transfer-Encoding: chunked  Date: Thu, 21 Jan 2021 13:32:58 GMT  {&quot;access_token&quot;:&quot;e775d74e-9e8c-437d-974d-6d8286b37396&quot;,&quot;token_type&quot;:&quot;bearer&quot;,&quot;refresh_token&quot;:&quot;6b9f3fa3-143b-47a0-b356-3f577e8c7fed&quot;,&quot;expires_in&quot;:43199,&quot;scope&quot;:&quot;app&quot;}</code></pre></li><li>使用Postman<ul><li>POST <code>http://DearApp:DearApp@localhost:5000/dear-auth/oauth/token</code></li><li>Authorization -&gt; Basic Auth -&gt; Username(DearApp) &amp; Password(DearApp)</li><li>Body -&gt; x-www-form-urlencoded -&gt; grant_type &amp; code</li></ul></li><li>注意：<ul><li>授权码使用一次就失效了</li><li>获取token的body参数 redirect_uri &amp; scope可加可不加，但加了后必须和配置的match上，否则获取token失败</li><li>若<code>AuthorizationServerConfig</code>配置了<code>public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {security.allowFormAuthenticationForClients(); }</code>,则表示可以使用表单认证，可不用Basic Auth，直接在body中再加入<code>client_id &amp; client_secret</code>参数</li></ul></li></ul></li></ol><h3 id="header-7">认证服务: 基于JDBC存储数据库方式</h3><ol><li><p>数据库 <code>https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql</code></p><pre><code class="lang-sql"> /* SQLyog  v12.2.6 (64 bit) MySQL - 8.0.15 : Database - dear_v1_auth ********************************************************************* */ /*!40101 SET NAMES utf8 */; /*!40101 SET SQL_MODE=&#39;&#39;*/; /*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */; /*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */; /*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#39;NO_AUTO_VALUE_ON_ZERO&#39; */; /*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */; CREATE DATABASE /*!32312 IF NOT EXISTS*/`dear_v1_auth` /*!40100 DEFAULT CHARACTER SET utf8 */; USE `dear_v1_auth`; /*Table structure for table `clientdetails` */ DROP TABLE IF EXISTS `clientdetails`; CREATE TABLE `clientdetails` (   `appId` varchar(128) NOT NULL,   `resourceIds` varchar(256) DEFAULT NULL,   `appSecret` varchar(256) DEFAULT NULL,   `scope` varchar(256) DEFAULT NULL,   `grantTypes` varchar(256) DEFAULT NULL,   `redirectUrl` varchar(256) DEFAULT NULL,   `authorities` varchar(256) DEFAULT NULL,   `access_token_validity` int(11) DEFAULT NULL,   `refresh_token_validity` int(11) DEFAULT NULL,   `additionalInformation` varchar(4096) DEFAULT NULL,   `autoApproveScopes` varchar(256) DEFAULT NULL,   PRIMARY KEY (`appId`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; /*Table structure for table `oauth_access_token` */ DROP TABLE IF EXISTS `oauth_access_token`; CREATE TABLE `oauth_access_token` (   `token_id` varchar(256) DEFAULT NULL,   `token` blob,   `authentication_id` varchar(128) NOT NULL,   `user_name` varchar(256) DEFAULT NULL,   `client_id` varchar(256) DEFAULT NULL,   `authentication` blob,   `refresh_token` varchar(256) DEFAULT NULL,   PRIMARY KEY (`authentication_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; /*Table structure for table `oauth_approvals` */ DROP TABLE IF EXISTS `oauth_approvals`; CREATE TABLE `oauth_approvals` (   `userId` varchar(256) DEFAULT NULL,   `clientId` varchar(256) DEFAULT NULL,   `scope` varchar(256) DEFAULT NULL,   `status` varchar(10) DEFAULT NULL,   `expiresAt` timestamp NULL DEFAULT NULL,   `lastModifiedAt` timestamp NULL DEFAULT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8; /*Table structure for table `oauth_client_details` */ DROP TABLE IF EXISTS `oauth_client_details`; CREATE TABLE `oauth_client_details` (   `client_id` varchar(128) NOT NULL,   `resource_ids` varchar(256) DEFAULT NULL,   `client_secret` varchar(256) DEFAULT NULL,   `scope` varchar(256) DEFAULT NULL,   `authorized_grant_types` varchar(256) DEFAULT NULL,   `web_server_redirect_uri` varchar(256) DEFAULT NULL,   `authorities` varchar(256) DEFAULT NULL,   `access_token_validity` int(11) DEFAULT NULL,   `refresh_token_validity` int(11) DEFAULT NULL,   `additional_information` varchar(4096) DEFAULT NULL,   `autoapprove` varchar(256) DEFAULT NULL,   PRIMARY KEY (`client_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; /*Table structure for table `oauth_client_token` */ DROP TABLE IF EXISTS `oauth_client_token`; CREATE TABLE `oauth_client_token` (   `token_id` varchar(256) DEFAULT NULL,   `token` blob,   `authentication_id` varchar(128) NOT NULL,   `user_name` varchar(256) DEFAULT NULL,   `client_id` varchar(256) DEFAULT NULL,   PRIMARY KEY (`authentication_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; /*Table structure for table `oauth_code` */ DROP TABLE IF EXISTS `oauth_code`; CREATE TABLE `oauth_code` (   `code` varchar(256) DEFAULT NULL,   `authentication` blob ) ENGINE=InnoDB DEFAULT CHARSET=utf8; /*Table structure for table `oauth_refresh_token` */ DROP TABLE IF EXISTS `oauth_refresh_token`; CREATE TABLE `oauth_refresh_token` (   `token_id` varchar(256) DEFAULT NULL,   `token` blob,   `authentication` blob ) ENGINE=InnoDB DEFAULT CHARSET=utf8; /*!40101 SET SQL_MODE=@OLD_SQL_MODE */; /*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */; /*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */; /*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;</code></pre></li><li><p>插入client数据 table: <code>oauth_client_details</code></p><ul><li>client_id: DearApp</li><li>client_secret: $2a$10$i5enbghKJ1yqj9r7XuyJC.Rs0gGSTzjiv5vQvz/ShghJhjomHaqUa （DearApp加密和的字符串）</li><li>scope: app</li><li>authorized_grant_types: authorization_code,password,refresh_token</li><li>web_server_redirect_uri: <a href="http://www.baidu.com" target="_blank" rel="external">http://www.baidu.com</a></li></ul></li><li><p>配置数据源</p><ul><li><p>pom.xml</p><pre><code class="lang-xml">   &lt;!-- druid --&gt;  &lt;dependency&gt;      &lt;groupId&gt;com.alibaba&lt;/groupId&gt;      &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;  &lt;/dependency&gt;  &lt;!-- for @ConfigurationProperties : optional ! --&gt;  &lt;dependency&gt;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;      &lt;optional&gt;true&lt;/optional&gt;  &lt;/dependency&gt;</code></pre></li><li>application.yml <pre><code class="lang-yaml">  spring:     datasource:       druid:         url: jdbc:mysql://localhost:3306/dear_v1_auth?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;allowMultiQueries=true         username: cj         password: 123         driver-class-name: com.mysql.cj.jdbc.Driver   #      type: com.alibaba.druid.pool.DruidDataSource         initial-size: 8         min-idle: 1         max-active: 20         max-wait: 60000         time-between-eviction-runsMillis: 60000         min-evictable-idle-timeMillis: 300000         validation-query: select &#39;x&#39;         test-while-idle: true         test-on-borrow: false         test-on-return: false         pool-prepared-statements: false         max-open-prepared-statements: 20         max-pool-prepared-statement-per-connection-size: 20         filters: stat,wall         use-global-data-source-stat: true         connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</code></pre></li><li><p>config/DruidConfig</p><pre><code class="lang-java">  import com.alibaba.druid.pool.DruidDataSource;  import org.springframework.boot.context.properties.ConfigurationProperties;  import org.springframework.context.annotation.Bean;  import org.springframework.context.annotation.Configuration;  import javax.sql.DataSource;  @Configuration  public class DruidConfig {      //https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter      @ConfigurationProperties(prefix = &quot;spring.datasource.druid&quot;)      @Bean      public DataSource druidDataSource(){          return new DruidDataSource();      }  }</code></pre></li></ul></li><li><p>配置授权认证服务器： client &amp; token 存储到数据库</p><pre><code class="lang-java"> @Configuration @EnableAuthorizationServer public class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter{     // 1. 配置 client     @Override     public void configure(ClientDetailsServiceConfigurer clients) throws Exception {         clients.withClientDetails(jdbcClientDetailsService());     }     @Autowired     DataSource dataSource;     @Bean     public ClientDetailsService jdbcClientDetailsService(){         return new JdbcClientDetailsService(dataSource);     }     // 2. 配置 endpoints,token存储     @Override     public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {         endpoints.tokenStore(jdbcTokenStore());     }     @Bean     public TokenStore jdbcTokenStore(){         return new JdbcTokenStore(dataSource);     } }</code></pre></li></ol><h3 id="header-8">RBAC</h3><ol><li><p>数据库 (<a href="https://github.com/topsale/spring-boot-samples/blob/master/spring-security-oauth2/spring-security-oauth2-server/db/rbac.sql" target="_blank" rel="external">https://github.com/topsale/spring-boot-samples/blob/master/spring-security-oauth2/spring-security-oauth2-server/db/rbac.sql</a>)</p><pre><code class="lang-sql"> /* SQLyog  v12.2.6 (64 bit) MySQL - 8.0.15 : Database - dear_v1_auth ********************************************************************* */ /*!40101 SET NAMES utf8 */; /*!40101 SET SQL_MODE=&#39;&#39;*/; /*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */; /*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */; /*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#39;NO_AUTO_VALUE_ON_ZERO&#39; */; /*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */; CREATE DATABASE /*!32312 IF NOT EXISTS*/`dear_v1_auth` /*!40100 DEFAULT CHARACTER SET utf8 */; USE `dear_v1_auth`; /*Table structure for table `tb_permission` */ DROP TABLE IF EXISTS `tb_permission`; CREATE TABLE `tb_permission` (   `id` bigint(20) NOT NULL AUTO_INCREMENT,   `parent_id` bigint(20) DEFAULT NULL COMMENT &#39;父权限&#39;,   `name` varchar(64) NOT NULL COMMENT &#39;权限名称&#39;,   `enname` varchar(64) NOT NULL COMMENT &#39;权限英文名称&#39;,   `url` varchar(255) NOT NULL COMMENT &#39;授权路径&#39;,   `description` varchar(200) DEFAULT NULL COMMENT &#39;备注&#39;,   `created` datetime NOT NULL,   `updated` datetime NOT NULL,   PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=49 DEFAULT CHARSET=utf8 COMMENT=&#39;权限表&#39;; /*Data for the table `tb_permission` */ insert  into `tb_permission`(`id`,`parent_id`,`name`,`enname`,`url`,`description`,`created`,`updated`) values  (37,0,&#39;系统管理&#39;,&#39;System&#39;,&#39;/&#39;,NULL,&#39;2019-04-04 23:22:54&#39;,&#39;2019-04-04 23:22:56&#39;), (38,37,&#39;用户管理&#39;,&#39;SystemUser&#39;,&#39;/users/&#39;,NULL,&#39;2019-04-04 23:25:31&#39;,&#39;2019-04-04 23:25:33&#39;), (39,38,&#39;查看用户&#39;,&#39;SystemUserView&#39;,&#39;/users/view/**&#39;,NULL,&#39;2019-04-04 15:30:30&#39;,&#39;2019-04-04 15:30:43&#39;), (40,38,&#39;新增用户&#39;,&#39;SystemUserInsert&#39;,&#39;/users/insert/**&#39;,NULL,&#39;2019-04-04 15:30:31&#39;,&#39;2019-04-04 15:30:44&#39;), (41,38,&#39;编辑用户&#39;,&#39;SystemUserUpdate&#39;,&#39;/users/update/**&#39;,NULL,&#39;2019-04-04 15:30:32&#39;,&#39;2019-04-04 15:30:45&#39;), (42,38,&#39;删除用户&#39;,&#39;SystemUserDelete&#39;,&#39;/users/delete/**&#39;,NULL,&#39;2019-04-04 15:30:48&#39;,&#39;2019-04-04 15:30:45&#39;), (44,37,&#39;内容管理&#39;,&#39;SystemContent&#39;,&#39;/contents/&#39;,NULL,&#39;2019-04-06 18:23:58&#39;,&#39;2019-04-06 18:24:00&#39;), (45,44,&#39;查看内容&#39;,&#39;SystemContentView&#39;,&#39;/contents/view/**&#39;,NULL,&#39;2019-04-06 23:49:39&#39;,&#39;2019-04-06 23:49:41&#39;), (46,44,&#39;新增内容&#39;,&#39;SystemContentInsert&#39;,&#39;/contents/insert/**&#39;,NULL,&#39;2019-04-06 23:51:00&#39;,&#39;2019-04-06 23:51:02&#39;), (47,44,&#39;编辑内容&#39;,&#39;SystemContentUpdate&#39;,&#39;/contents/update/**&#39;,NULL,&#39;2019-04-06 23:51:04&#39;,&#39;2019-04-06 23:51:06&#39;), (48,44,&#39;删除内容&#39;,&#39;SystemContentDelete&#39;,&#39;/contents/delete/**&#39;,NULL,&#39;2019-04-06 23:51:08&#39;,&#39;2019-04-06 23:51:10&#39;); /*Table structure for table `tb_role` */ DROP TABLE IF EXISTS `tb_role`; CREATE TABLE `tb_role` (   `id` bigint(20) NOT NULL AUTO_INCREMENT,   `parent_id` bigint(20) DEFAULT NULL COMMENT &#39;父角色&#39;,   `name` varchar(64) NOT NULL COMMENT &#39;角色名称&#39;,   `enname` varchar(64) NOT NULL COMMENT &#39;角色英文名称&#39;,   `description` varchar(200) DEFAULT NULL COMMENT &#39;备注&#39;,   `created` datetime NOT NULL,   `updated` datetime NOT NULL,   PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=38 DEFAULT CHARSET=utf8 COMMENT=&#39;角色表&#39;; /*Data for the table `tb_role` */ insert  into `tb_role`(`id`,`parent_id`,`name`,`enname`,`description`,`created`,`updated`) values  (37,0,&#39;超级管理员&#39;,&#39;admin&#39;,NULL,&#39;2019-04-04 23:22:03&#39;,&#39;2019-04-04 23:22:05&#39;); /*Table structure for table `tb_role_permission` */ DROP TABLE IF EXISTS `tb_role_permission`; CREATE TABLE `tb_role_permission` (   `id` bigint(20) NOT NULL AUTO_INCREMENT,   `role_id` bigint(20) NOT NULL COMMENT &#39;角色 ID&#39;,   `permission_id` bigint(20) NOT NULL COMMENT &#39;权限 ID&#39;,   PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=48 DEFAULT CHARSET=utf8 COMMENT=&#39;角色权限表&#39;; /*Data for the table `tb_role_permission` */ insert  into `tb_role_permission`(`id`,`role_id`,`permission_id`) values  (37,37,37), (38,37,38), (39,37,39), (40,37,40), (41,37,41), (42,37,42), (43,37,44), (44,37,45), (45,37,46), (46,37,47), (47,37,48); /*Table structure for table `tb_user` */ DROP TABLE IF EXISTS `tb_user`; CREATE TABLE `tb_user` (   `id` bigint(20) NOT NULL AUTO_INCREMENT,   `username` varchar(50) NOT NULL COMMENT &#39;用户名&#39;,   `password` varchar(64) NOT NULL COMMENT &#39;密码，加密存储&#39;,   `phone` varchar(20) DEFAULT NULL COMMENT &#39;注册手机号&#39;,   `email` varchar(50) DEFAULT NULL COMMENT &#39;注册邮箱&#39;,   `created` datetime NOT NULL,   `updated` datetime NOT NULL,   PRIMARY KEY (`id`),   UNIQUE KEY `username` (`username`) USING BTREE,   UNIQUE KEY `phone` (`phone`) USING BTREE,   UNIQUE KEY `email` (`email`) USING BTREE ) ENGINE=InnoDB AUTO_INCREMENT=38 DEFAULT CHARSET=utf8 COMMENT=&#39;用户表&#39;; /*Data for the table `tb_user` */ insert  into `tb_user`(`id`,`username`,`password`,`phone`,`email`,`created`,`updated`) values  (37,&#39;admin&#39;,&#39;$2a$10$9ZhDOBp.sRKat4l14ygu/.LscxrMUcDAfeVOEPiYwbcRkoB09gCmi&#39;,&#39;15888888888&#39;,&#39;lee.lusifer@gmail.com&#39;,&#39;2019-04-04 23:21:27&#39;,&#39;2019-04-04 23:21:29&#39;); /*Table structure for table `tb_user_role` */ DROP TABLE IF EXISTS `tb_user_role`; CREATE TABLE `tb_user_role` (   `id` bigint(20) NOT NULL AUTO_INCREMENT,   `user_id` bigint(20) NOT NULL COMMENT &#39;用户 ID&#39;,   `role_id` bigint(20) NOT NULL COMMENT &#39;角色 ID&#39;,   PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=38 DEFAULT CHARSET=utf8 COMMENT=&#39;用户角色表&#39;; /*Data for the table `tb_user_role` */ insert  into `tb_user_role`(`id`,`user_id`,`role_id`) values  (37,37,37); /*!40101 SET SQL_MODE=@OLD_SQL_MODE */; /*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */; /*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */; /*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;</code></pre></li><li><p>配置MyBatis: application.yml,main上加<code>@MapperScan(&quot;com.cj.dear.auth.mapper&quot;)</code>注解</p><pre><code class="lang-yaml"> mybatis:    mapper-locations: classpath:mapper/*Mapper.xml    config-location:  classpath:mybatis-config.xml</code></pre></li><li><p>编写entity,mapper,service</p></li><li><p>config/WebSecurityConfig.java</p><pre><code class="lang-java"> @Configuration @EnableWebSecurity @EnableGlobalMethodSecurity(prePostEnabled = true,securedEnabled = true,jsr250Enabled = true) class WebSecurityConfig extends WebSecurityConfigurerAdapter {     // 采用bcrypt对密码进行编码     @Bean     public PasswordEncoder passwordEncoder() {         return new BCryptPasswordEncoder();     }      @Autowired     UserDetailsServiceImpl userDetailsServiceImpl;     @Override     protected void configure(AuthenticationManagerBuilder auth) throws Exception {         auth.userDetailsService(userDetailsServiceImpl);     } }</code></pre></li><li><p>UserDetailsServiceImpl.java</p><pre><code class="lang-java"> @Service public class UserDetailsServiceImpl implements UserDetailsService {     @Autowired     private TbUserService tbUserService;     @Autowired     private TbPermissionService tbPermissionService;     @Override     public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {         TbUser tbUser = tbUserService.getByUsername(username);         if(tbUser!=null){             List&lt;GrantedAuthority&gt; grantedAuthorityList = new ArrayList&lt;&gt;();             List&lt;TbPermission&gt; tbPermissions = tbPermissionService.listPermisionsByUserId(tbUser.getId());             if(tbPermissions!=null){                 tbPermissions.forEach(tbPermission -&gt; {                     grantedAuthorityList.add(new SimpleGrantedAuthority(tbPermission.getEnname()));                 });             }             return new User(tbUser.getUsername(),tbUser.getPassword(),grantedAuthorityList);         }         return null;     } }</code></pre></li></ol><h3 id="header-9">资源服务器</h3><ol><li><p>pom.yml</p><pre><code class="lang-xml"> &lt;!-- OAuth --&gt; &lt;dependency&gt;     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;     &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt; &lt;/dependency&gt;</code></pre></li><li><p>application.yml</p><pre><code class="lang-yaml"> security:   oauth2:     client:       client-id: DearApp       client-secret: DearApp       access-token-uri: http://localhost:5000/dear-auth/oauth/token       user-authorization-uri: http://localhost:5000/dear-auth/authorize     resource:       token-info-uri: http://localhost:5000/dear-auth/oauth/check_token</code></pre></li><li><p>config/ResourceServerConfig</p><pre><code class="lang-java"> @Configuration @EnableResourceServer @EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)//激活方法上的PreAuthorize注解 public class ResourceServerConfig extends ResourceServerConfigurerAdapter {     @Override     public void configure(HttpSecurity http) throws Exception {        http.authorizeRequests()                .antMatchers(&quot;/&quot;).hasAuthority(&quot;SystemProject&quot;)                .antMatchers(&quot;/projects/view/**&quot;).hasAuthority(&quot;SystemProjectView&quot;)                ;     } }</code></pre></li><li><p>ProjectController</p><pre><code class="lang-java"> @RestController public class ProjectController {     @GetMapping(&quot;/&quot;)     public Object index(){         return &quot;Project Hello World&quot;;     }     @GetMapping(&quot;/projects/view&quot;)     public Object listProjects(){         return &quot;List Projects&quot;;     }     @GetMapping(&quot;/projects/insert&quot;)     public Object insertProject(){         return &quot;Insert Projects&quot;;     } }</code></pre></li><li><p>visit <code>http://localhost:5001/dear-project/?access_token=1e9aedd1-4e92-4444-96a7-edc3b55a3d25</code> =&gt; Exception (<code>springframework.web.client.HttpClientErrorException$Forbidden: 403 : [{&quot;timestamp&quot;:&quot;2021-01-22T15:01:31.342+00:00&quot;,&quot;status&quot;:403,&quot;error&quot;:&quot;Forbidden&quot;,&quot;message&quot;:&quot;&quot;,&quot;path&quot;:&quot;/dear-auth/oauth/check_token&quot;}]</code>)</p><ul><li>方式一： dear-auth项目 config/WebSecurityConfig =&gt; visit <code>http://localhost:5000/dear-auth/oauth/check_token?token=1e9aedd1-4e92-4444-96a7-edc3b55a3d25</code> 成功<pre><code class="lang-java">  /// Sample 3： /oauth/check_token 401/403 配置这个或者在AuthorizationServerConfig中配置security.checkTokenAccess策略  @Override  public void configure(WebSecurity web) throws Exception {     web.ignoring().antMatchers(&quot;/oauth/check_token&quot;);  }</code></pre></li><li>放式二： dear-auth项目 config/AuthorizationServerConfig =&gt; visit <code>http://localhost:5000/dear-auth/oauth/check_token?token=1e9aedd1-4e92-4444-96a7-edc3b55a3d25</code> + Basic Auth 成功<pre><code class="lang-java">  /// Sample 3： 此认证服务器的安全策略  @Override  public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {      security.tokenKeyAccess(&quot;permitAll()&quot;) // /oauth/token_key 完全开放              .checkTokenAccess(&quot;isAuthenticated()&quot;) // /oauth/check_token 需要认证通过，可采用http basic认证              .allowFormAuthenticationForClients() // 允许表单认证              ;  }</code></pre></li></ul></li><li><p>test</p><ul><li>visit <code>http://localhost:5000/dear-auth/oauth/authorize?client_id=DearApp&amp;response_type=code</code> =&gt; 获取code：nfGdkg</li><li>POST <code>http://localhost:5000/dear-auth/oauth/token</code> =&gt; 获取access_token: 1e9aedd1-4e92-4444-96a7-edc3b55a3d25</li><li>visit <code>http://localhost:5001/dear-project/</code> =&gt; unauthorized</li><li>visit <code>http://localhost:5001/dear-project/?access_token=1e9aedd1-4e92-4444-96a7-edc3b55a3d25</code> =&gt; Success!</li><li>visit <code>http://localhost:5001/dear-project/</code> + Bearer Token =&gt; Success!</li><li>visit <code>http://localhost:5000/dear-auth/oauth/check_token?token=1e9aedd1-4e92-4444-96a7-edc3b55a3d25</code> =&gt;<pre><code class="lang-json">  {      &quot;active&quot;: true,      &quot;exp&quot;: 1611353145,      &quot;user_name&quot;: &quot;admin&quot;,      &quot;authorities&quot;: [          &quot;SystemProjectView&quot;,          &quot;SystemProject&quot;,          &quot;SystemUserView&quot;,          &quot;SystemProjectInsert&quot;,          &quot;SystemProjectUpdate&quot;,          &quot;SystemUser&quot;,          &quot;SystemUserInsert&quot;,          &quot;SystemUserDelete&quot;,          &quot;SystemUserUpdate&quot;,          &quot;System&quot;,          &quot;SystemProjectDelete&quot;      ],      &quot;client_id&quot;: &quot;DearApp&quot;,      &quot;scope&quot;: [          &quot;app&quot;      ]  }</code></pre></li></ul></li></ol><h3 id="header-10">Test</h3><p>GET <a href="http://localhost:5000/dear-auth/oauth/authorize?client_id=DearApp&amp;response_type=code&amp;scope=app&amp;redirect_uri=http://www.baidu.com" target="_blank" rel="external">http://localhost:5000/dear-auth/oauth/authorize?client_id=DearApp&amp;response_type=code&amp;scope=app&amp;redirect_uri=http://www.baidu.com</a></p><p>POST <a href="http://localhost:5000/dear-auth/oauth/token" target="_blank" rel="external">http://localhost:5000/dear-auth/oauth/token</a></p><p>curl -d &#39;grant_type=authorization_code&amp;code=3Tgl8q&#39; -X POST <a href="http://DearApp:DearApp@localhost:5000/dear-auth/oauth/token" target="_blank" rel="external">http://DearApp:DearApp@localhost:5000/dear-auth/oauth/token</a> -i</p><p>GET <a href="http://localhost:5001/dear-project/?access_token=1e9aedd1-4e92-4444-96a7-edc3b55a3d25" target="_blank" rel="external">http://localhost:5001/dear-project/?access_token=1e9aedd1-4e92-4444-96a7-edc3b55a3d25</a></p><p>GET <a href="http://DearApp:DearApp@localhost:5001/dear-project/?access_token=1e9aedd1-4e92-4444-96a7-edc3b55a3d25" target="_blank" rel="external">http://DearApp:DearApp@localhost:5001/dear-project/?access_token=1e9aedd1-4e92-4444-96a7-edc3b55a3d25</a></p><h3 id="header-11">ISSUE</h3><p>SpringSecurityOAuth2登录后无法跳转获取授权码地址，直接跳转根路径原因详解<a href="https://blog.csdn.net/CSDN877425287/article/details/110948221" target="_blank" rel="external">https://blog.csdn.net/CSDN877425287/article/details/110948221</a></p><p>SpringBoot集成SpringSecurity - 异常处理（三）<a href="https://www.jianshu.com/p/5b412418b864/" target="_blank" rel="external">https://www.jianshu.com/p/5b412418b864/</a></p><p>SpringBoot2.x统一异常捕获@RestControllerAdvice<a href="https://blog.csdn.net/fuu123f/article/details/107249708" target="_blank" rel="external">https://blog.csdn.net/fuu123f/article/details/107249708</a></p><p>Spring Security OAuth2 授权失败（401) 问题整理<a href="https://www.cnblogs.com/mxmbk/p/9782409.html" target="_blank" rel="external">https://www.cnblogs.com/mxmbk/p/9782409.html</a></p><p>SpringBoot /error Error Page status 为 999 的问题<a href="https://learnku.com/java/t/39683" target="_blank" rel="external">https://learnku.com/java/t/39683</a></p><p>Spring Cloud OAuth2 实现用户认证及单点登录<a href="https://www.cnblogs.com/fengzheng/p/11724625.html" target="_blank" rel="external">https://www.cnblogs.com/fengzheng/p/11724625.html</a></p><p>官方 spring-security-oauth2<a href="https://github.com/spring-projects/spring-security-oauth/tree/master/spring-security-oauth2" target="_blank" rel="external">https://github.com/spring-projects/spring-security-oauth/tree/master/spring-security-oauth2</a></p><p>Demo<a href="https://github.com/topsale/spring-boot-samples" target="_blank" rel="external">https://github.com/topsale/spring-boot-samples</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;配置&lt;ul&gt;
&lt;li&gt;认证授权服务&lt;/li&gt;
&lt;li&gt;资源服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sample&lt;ul&gt;
&lt;li&gt;基于内存/JDBC/RBAC认证授权&lt;/li&gt;
&lt;li&gt;资源服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="MicroService" scheme="http://sixdegree.github.io/tags/MicroService/"/>
    
  </entry>
  
  <entry>
    <title>Dart</title>
    <link href="http://sixdegree.github.io/2020/08/20/Dart.html"/>
    <id>http://sixdegree.github.io/2020/08/20/Dart.html</id>
    <published>2020-08-19T16:00:00.000Z</published>
    <updated>2021-02-21T17:13:11.521Z</updated>
    
    <content type="html"><![CDATA[<ol><li>基础数据类型</li><li>函数</li><li>类</li><li>库</li><li>Future</li></ol><a id="more"></a><h2 id="header-1">Starter</h2><p>笔记：</p><ul><li>dart2: <a href="https://www.kancloud.cn/marswill/dark2_document/709088" target="_blank" rel="external">https://www.kancloud.cn/marswill/dark2_document/709088</a></li><li>coderwhy: <a href="https://toutiao.io/u/482181?f=new" target="_blank" rel="external">https://toutiao.io/u/482181?f=new</a> , <a href="https://segmentfault.com/u/coderwhy" target="_blank" rel="external">https://segmentfault.com/u/coderwhy</a></li></ul><h2 id="header-2">基础数据类型</h2><h3 id="header-3">明确的声明</h3><pre><code class="lang-python">String str1 = &#39;Hello&#39;;String str2 = &quot;It&#39;s me&quot;;String str3 = &quot;&quot;&quot;HelloWorld&quot;&quot;&quot;;print(&quot;$str1,$str2,$str3&quot;);var name = &quot;Tom&quot;;var age = 10;var height = 120;var msg1 = &quot;my name is ${name}, age is ${age}, height is ${height}&quot;;var msg2 = &quot;name is ${name}, type is ${name.runtimeType}&quot;;print(msg1);print(msg2);</code></pre><ul><li>数字类型： <code>int</code>,<code>double</code> 可表示的范围并不是固定的，取决于运行Dart的平台</li><li>字符类型： <code>String</code> 可使用<code>${expression}</code>实现字符串和其他变量或表达式拼接，<code>${变量}</code>，则<code>{}</code>可省略，即 <code>$exp</code></li><li><p>布尔类型： <code>bool</code> 取值为true/false，没有非0/非空即true的规则，即不能使用<code>if(非布尔类型的变量)</code>,<code>assert(非布尔类型的变量)</code>之类的代码</p><pre><code class="lang-js">  var flag = true;  if(flag){               // right !!    print(flag);  }  var message=&quot;Hello&quot;;  if(message){            // wrong !!    print(message);  }</code></pre></li><li><p>集合类型： <code>List</code>／<code>Set</code>／<code>Map</code></p><pre><code class="lang-js">  var nameList = [&quot;Tom&quot;, &quot;Lucy&quot;, &quot;Susan&quot;];  nameList.add(&quot;Jack&quot;);  nameList.remove(&quot;Lucy&quot;);  print(  &quot;$nameList, len: ${nameList.length}, contain Tom: ${nameList.contains(&#39;Tom&#39;)}&quot;);  var movieSet = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;};  print(  &quot;$movieSet,len: ${movieSet.length}, contain b: ${movieSet.contains(&#39;b&#39;)}&quot;);  var infoMap = {&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18};  print(  &quot;$infoMap,entries: ${infoMap.entries},keys: ${infoMap.keys},infoMap[&#39;age&#39;]=${infoMap[&#39;age&#39;]}&quot;);  // 去重：  var charList = [&#39;a&#39;, &#39;b&#39;, &#39;b&#39;, &#39;c&#39;, &#39;a&#39;];  var noDupCharList = Set&lt;String&gt;.from(charList).toList();  print(  &quot;charList:$charList, set: ${Set.from(charList)}, dup removed list: ${Set.from(charList).toList()}, noDupCharList:$noDupCharList&quot;);</code></pre></li><li><p>类：<code>class</code> (dart 中是没有关键字来定义接口的，默认所有的class都是隐式接口)</p><pre><code class="lang-js">  class Person {    String name;    Person(String name) {      this.name = name;    }  }  class SingletonPerson {    final String name;    const SingletonPerson(this.name);  }</code></pre></li></ul><h3 id="header-4">类型推导 (<code>var</code> / <code>final</code> / <code>const</code>): 虽然没有明确指定变量类型，但变量还是有自己明确的类型的</h3><ul><li>声明变量 var<pre><code class="lang-js">  var score = 20; // 如果后面再设置 ` score=&quot;abc&quot;; ` 会报错  score = 30;</code></pre></li><li><p>声明常量 final / const</p><pre><code class="lang-js">  // final 运行期间确定一个值，即可以通过计算／函数获取一个值  // const 编译期间确定一个值，即须直接赋予一个值  final date = DateTime.now();  // 正确  const date = DateTime.now();  // 错误  final price = 1.88; // 如果后面再设置 ` price=2.00; ` 会报错  const address = &quot;SuZhou&quot;; // 如果后面再设置 ` address=&quot;ShangHai&quot;; ` 会报错  final p1 = Person(&quot;Tom&quot;); // = new Person(&quot;Tom&quot;);  final p2 = Person(&quot;Tom&quot;); // = new Person(&quot;Tom&quot;);  print(identical(p1, p2)); // =&gt; false  p1和p2是不同的对象  const s1 = SingletonPerson(&quot;Tom&quot;); // = const SingletonPerson(&quot;Tom&quot;);  const s2 = SingletonPerson(&quot;Tom&quot;); // = const SingletonPerson(&quot;Tom&quot;);  const s3 = SingletonPerson(&quot;Lucy&quot;); // = const SingletonPerson(&quot;Lucy&quot;);  print(identical(s1, s2)); // =&gt; true  s1和s2是同一个对象  print(identical(s1, s3)); // =&gt; false s1和s3不是同一个对象</code></pre></li></ul><h3 id="header-5">object vs dynamic vs var</h3><pre><code class="lang-java">// 注: 关键字（var/const/final/...） vs 类型 （String,Object,dynamic,...）Object a = &quot;Hello&quot;;// print(&quot;$a,${a.substring(3)}&quot;); // 无法调用 String的substring 方法，编译时即报错了dynamic b = &quot;Hello&quot;;print(&quot;$b, ${b.substring(3)}&quot;); // 可调用 String的substring 方法，编译时不报错，但存在安全隐患，可能调用了一个不存在的方法，运行时报错//print(&quot;$b, ${b.say()}&quot;); // 编译时不报错，运行时报错var c = &quot;Hello&quot;;print(&quot;$c,${c.substring(3)}&quot;); // 可调用 String的substring 方法// print(&quot;$c,${c.say()}&quot;);  // 编译时就报错了</code></pre><h2 id="header-6">函数</h2><h3 id="header-7">函数的参数</h3><p>函数的 必选参数 &amp; 可选参数（位置可选参数，命名可选参数）注：dart中无函数重载，即不可以声明两个同名函数</p><ol><li><p>必选参数（必传，且无法设置默认参数）</p><pre><code class="lang-js"> void sayHello1(String name) {   print(name); } sayHello1(&quot;Tom&quot;);</code></pre></li><li><p>可选参数</p><ul><li><p>位置可选参数 <code>[]</code></p><pre><code class="lang-js">  void sayHello2(String name, [int age, double height]) {    print(&quot;$name,$age,$height&quot;);  }  sayHello2(&quot;Lucy&quot;); // Lucy,null,null  sayHello2(&quot;Lucy&quot;, 18); // Lucy,18,null  sayHello2(&quot;Lucy&quot;, 18, 165.5); // Lucy,18,165.5</code></pre></li><li><p>命名可选参数 <code>{}</code></p><pre><code class="lang-js">  void sayHello3(String name, {int age, double height}) {    print(&quot;$name,$age,$height&quot;);  }  sayHello3(&quot;Lucy&quot;); // Lucy,null,null  sayHello3(&quot;Lucy&quot;, height: 165.5); // Lucy,null,165.5  sayHello3(&quot;Lucy&quot;, age: 18, height: 165.5); // Lucy,18,165.5</code></pre></li><li><p>可设置默认参数</p><pre><code class="lang-js">  void sayHello4(String name, {int age = 16, double height = 120}) {    print(&quot;$name,$age,$height&quot;);  }  sayHello4(&quot;Lucy&quot;, height: 165.5); // Lucy,16,165.5</code></pre></li></ul></li></ol><h3 id="header-8">函数作为参数／返回值</h3><p>函数是一等公民，即函数可以赋给一个变量，作为参数／返回值来回传递（在一般的面向对象的语言中，如Java，一般class／object是第一公民，可作为参数／返回值来回传递）</p><ol><li><p>函数作为另一个函数的参数</p><ul><li><p>直接使用Function －－ 对函数无限制</p><pre><code class="lang-js">  void test1(Function foo) {    foo(); // foo(20,30),...对函数无限制  }  void bar([String name = &quot;Hi&quot;]) {    print(name);  }  // 传入函数 － 直接使用某个定义的函数  test1(bar);  // 传入函数 － 使用匿名函数  test1(() {    print(&quot;test 匿名函数&quot;);  });  // 传入函数 － 使用箭头函数（这种函数体必须只有一行代码）  test1(() =&gt; print(&quot;test 箭头函数&quot;));</code></pre></li><li>传入声明式函数，注意：对函数有限制，如参数，返回值等<pre><code class="lang-js">  // void test2(int foo(int a, int b)) {    // 太长，阅读性差  //   var result = foo(20, 30);  //   print(result);  // }  typedef Calcuate = int Function(int a, int b); // 函数签名  void test2(Calcuate cal) {    var result = cal(20, 30);    print(result);  }</code></pre></li></ul></li><li><p>函数作为返回值</p><pre><code class="lang-js"> Calcuate getTestFunc() {   return (a, b) {     return a + b;   }; } Function getTestFunc2() {   return (a, b) {     return a + b;   }; } // 函数作为返回值 var ts = getTestFunc(); print(ts(20, 30)); var ts2 = getTestFunc2(); print(ts2(20, 50));</code></pre></li></ol><h2 id="header-9">操作符</h2><h3 id="header-10"><code>??=</code></h3><pre><code class="lang-js">void test1([String name]) {  name ??= &quot;Lucy&quot;; // name = (name!=null? name:&quot;Lucy&quot;) 或等同于 [String name=&quot;Lucy&quot;]  print(name);}test1();test1(&quot;Tom&quot;);</code></pre><h3 id="header-11"><code>??</code></h3><pre><code class="lang-js">void test2([String name]) {  var temp = name ?? &quot;Lucy&quot;; // temp = ( name!=null? name:&quot;Lucy&quot;)  print(temp);}test2();test2(&quot;Tom&quot;);</code></pre><h3 id="header-12"><code>::</code></h3><p>级联运算符</p><pre><code class="lang-js">class Person {  String name;  void run() {    print(&quot;$name running&quot;);  }  void eat() {    print(&quot;$name eating&quot;);  }}main(List&lt;String&gt; args) {    var p1 = Person();    p1.name = &quot;Tom&quot;;    p1.run();    p1.eat();    print(&quot;---------------------&quot;);    var p2 = Person()    ..name = &quot;Lucy&quot;    ..run()    ..eat();}</code></pre><h2 id="header-13">类</h2><h3 id="header-14">构造，初始化</h3><ol><li><p>构造方法</p><ul><li>没有明确指定构造方法时，将默认拥有一个无参的构造方法</li><li>有了自己的构造方法时，默认的构造方法将会失效</li><li><p>Dart本身不支持函数的重载 =&gt; 创建相同名称的构造方法 =&gt; Solution: 命名构造方法</p><pre><code class="lang-java">class Person {String name;int age;double height;// 1. 构造函数语法糖// Person(String name, int age) {//   this.name = name;//   this.age = age;// }// =&gt; 等同于:Person(this.name, this.age);// 2. 命名构造方法(名称可自定义)Person.withArguments(this.name, this.age, this.height);Person.fromMap(Map&lt;String, dynamic&gt; map) {  this.name = map[&#39;name&#39;];  this.age = map[&#39;age&#39;];  this.height = map[&#39;height&#39;];}// 3. 重定向构造函数：在一个构造方法中去调用另外一个构造方法，冒号后面使用this调用Person.fromName(String name) : this(name, 20);Person.fromName2(String name) : this.withArguments(name, 30, 166.8);// 重写toString方法@overrideString toString() {  return &quot;$name,$age,$height&quot;;}}main(List&lt;String&gt; args) {var p1 = Person(&quot;Tom&quot;, 18);var p2 = Person.withArguments(&quot;Lucy&quot;, 16, 165);// var p3 = Person.fromMap({&quot;height&quot;: 170);  // wrong !! Unhandled exception: type &#39;int&#39; is not a subtype of type &#39;double&#39;var p3 = Person.fromMap(    {&quot;age&quot;: 20, &quot;name&quot;: &quot;Susan&quot;, &quot;height&quot;: 170.5, &quot;sex&quot;: &quot;female&quot;});print(&quot;p1 : $p1 , p2 : $p2 , p3 : $p3 &quot;);var p4 = Person.fromName(&quot;Kelly1&quot;);var p5 = Person.fromName2(&quot;Kelly2&quot;);print(&quot;p4 : $p4 , p5 : $p5&quot;);}</code></pre></li></ul></li><li><p>初始化列表(Initializer list)</p><pre><code class="lang-java"> class FinalPerson {   final String name;   final int age;   // FinalPerson(this.name) {   //   this.age = 10; // wrong !! age是final类型，编译不通过   // }   // =&gt; 正确写法：   FinalPerson(this.name) : this.age = 10;   //FinalPerson.withOptional(this.name, {this.age = 10});     // right !!，可使用表达式   FinalPerson.withOptional(this.name, {int age})       : this.age = age ?? 10; // 推荐，后面可跟多条语句，`,`分隔   // 重写toString方法   @override   String toString() {     return &quot;$name,$age&quot;;   } } var fp1 = FinalPerson(&quot;Tom&quot;); print(&quot;fp1 : $fp1&quot;); var fp2 = FinalPerson.withOptional(&quot;Lucy&quot;); print(&quot;fp2 : $fp2&quot;); var fp3 = FinalPerson.withOptional(&quot;Susan&quot;, age: 20); print(&quot;fp3 : $fp3&quot;);</code></pre></li><li><p>常量构造</p><pre><code class="lang-java"> /*   注意：     1. 拥有常量构造方法的类中，所有的成员变量必须是final修饰     2. 为了可以通过常量构造方法，创建出相同的对象，不再使用 new关键字，而是使用const关键字        (如果是将结果赋值给const修饰的标识符时，const可以省略） */ class ConstPerson {   final String name;   const ConstPerson(this.name); } // var cp1 = const ConstPerson(&quot;Jack&quot;); // var cp2 = const ConstPerson(&quot;Jack&quot;); // print(identical(cp1, cp2)); // =&gt; true const cp1 = ConstPerson(&quot;Jack&quot;); // 等同于 var cp1 = const ConstPerson(&quot;Jack&quot;); const cp2 = ConstPerson(&quot;Jack&quot;); print(identical(cp1, cp2)); // =&gt; true</code></pre></li><li><p>工厂构造 <code>factory</code> 可以手动返回一个对象（普通的构造函数不能手动返回）</p><pre><code class="lang-java"> class FactoryPerson {   String name;   String color;   FactoryPerson(this.name, this.color);   // eg 需求： 希望name或者color相同时返回的是同一个对象   static final Map&lt;String, FactoryPerson&gt; _nameCache = {};   static final Map&lt;String, FactoryPerson&gt; _colorCache = {};   factory FactoryPerson.withName(String name) {     if (_nameCache.containsKey(name))       return _nameCache[name];     else {       final p = FactoryPerson(name, &quot;default&quot;);       _nameCache[name] = p;       return p;     }   }   factory FactoryPerson.withColor(String color) {     if (_colorCache.containsKey(color))       return _colorCache[color];     else {       final p = FactoryPerson(&quot;default&quot;, color);       _colorCache[color] = p;       return p;     }   } } var facP1 = FactoryPerson.withName(&quot;Mark&quot;); var facP2 = FactoryPerson.withName(&quot;Mark&quot;); print(identical(facP1, facP2)); // =&gt; true</code></pre></li></ol><h3 id="header-15">getter/setter</h3><p>Dart中类定义的属性是可以直接被外界访问的，但通过使用setter和getter，可以监控这个类的属性被访问的过程</p><pre><code class="lang-java">// _xxx 下划线，当前模块中可使用class Person {  String name;  // setter - `set`  // set setName(String name) {  //   this.name = name;  // }  set setName(String name) =&gt; this.name = name;  // getter - `get`  // String get getName {  //   return this.name;  // }  String get getName =&gt; this.name;}final p = Person();p.name = &quot;Tom&quot;;print(p.name);p.setName = &quot;Jack&quot;;print(p.getName);</code></pre><h3 id="header-16">继承，抽象，接口，混入类</h3><ol><li><p>继承类 extends</p><pre><code class="lang-java"> class Animal {   int age;   Animal(this.age);   void eating() {     print(&quot;Animal is eating&quot;);   } } class Cat extends Animal {   String name;   Cat(this.name, int age) : super(age);   @override   void eating() {     print(&quot;$name is eating&quot;);   } } var c = Cat(&quot;Miao&quot;, 2); c.eating();</code></pre></li><li><p>抽象类 abstract</p><pre><code class="lang-java"> //（不能实例化，但可通过factory构造函数实例化） // 参看 Map抽象类， 有个extenal factory Map(); // external: 将方法的声明和实现分离，用个注解@patch在其他地方对方法进行实现 =&gt; 好处： 针对不同平台，可有不同的实现 // map_patch.dart abstract class Shape {   // 抽象方法 （无方法体）   void getArea();   // 普通方法（有方法体）   void getInfo() {     print(&quot;Shape&quot;);   } } // Dart 只支持单继承，不能多继承，即只能extends一个类 class Rectangle extends Shape {   // 必须实现抽象方法   @override   void getArea() {     print(&quot;Rectangle getArea!&quot;);   } } var s = Rectangle(); s.getArea();</code></pre></li><li><p>接口 implements（Dart中，默认情况下所有类都是接口）</p><pre><code class="lang-java"> class Runner {   void running() {     print(&quot;Running&quot;);   } } // Dart中可以implements多个类，但必须重新实现@override其中的所有方法 class Wind implements Runner {   @override   void running() {     print(&quot;Wind is running&quot;);   } } var w = Wind(); w.running();</code></pre></li><li><p>混入类(Mixin定义类，with混入类)</p><pre><code class="lang-java"> // 可复用之前类的原有实现方案 mixin Swimer {   void swiming() {     print(&quot;Swiming&quot;);   } } mixin Flier {   void flying() {     print(&quot;Flying&quot;);   } } class SpaceShip with Swimer, Flier {   @override   void swiming() {     print(&quot;SpaceShip can swiming!&quot;);   } } var ss = SpaceShip(); ss.flying(); ss.swiming();</code></pre></li></ol><h3 id="header-17">枚举</h3><pre><code class="lang-java">/*常见属性：  index: 用于表示每个枚举常量的索引, 从0开始  values: 包含每个枚举值的List.注意：  不能子类化、混合或实现枚举  不能显式实例化一个枚举 */enum Colors { red, green, blue }print(Colors.blue);print(Colors.green.index);print(Colors.values);</code></pre><h3 id="header-18">泛型</h3><pre><code class="lang-java">class Location&lt;T extends num&gt; {  T x;  T y;  Location(this.x, this.y);  @override  String toString() {    return &quot;$x,$y&quot;;  }}T getListFirst&lt;T&gt;(List&lt;T&gt; list) {  return list[0];}var names = [&quot;Tom&quot;, &quot;Lucy&quot;];var first = getListFirst(names);print(&quot;$first,${first.runtimeType}&quot;);var ages = [20, 30];var a = getListFirst(ages);print(&quot;$a,${a.runtimeType}&quot;);print(&quot;---------------------------&quot;);var l1 = Location(10, 20);print(l1);var l2 = Location&lt;int&gt;(20, 30);print(l2);var l3 = Location&lt;double&gt;(20.5, 30.9);print(l3);//var l4 = Location&lt;String&gt;(&quot;20&quot;, &quot;39&quot;);    // wrong !!</code></pre><h2 id="header-19">库</h2><ol><li><p>Dart中任何一个dart文件都是一个库，即使没有用libary声明（库拆分： part/export -  推荐使用export）</p><pre><code class="lang-java"> // mathUtils.dart: int sum(int num1, int num2) {   return num1 + num2; } // dateUtils.dart: String dateFormat(DateTime date) {   return &quot;2020-12-12&quot;; } // utils.dart: library utils; export &quot;mathUtils.dart&quot;; export &quot;dateUtils.dart&quot;; // test_libary.dart: import &quot;lib/utils.dart&quot;; main(List&lt;String&gt; args) {     print(sum(10, 20));     print(dateFormat(DateTime.now())); }</code></pre></li><li><p>导入库 import （Dart中任何一个dart文件都是一个库）</p><ul><li><code>import &#39;库所在的uri&#39;;</code></li><li>库 URI 三种不同的形式：<ul><li>dart标准库  eg: &#39;dart:io&#39;,&#39;dart:html&#39;,&#39;dart:math&#39; （&#39;dart:core&#39;默认已导入）</li><li>相对路径  eg: &#39;lib/student/student.dart&#39;</li><li>Pub包管理工具管理的库(包括自己的配置以及一些第三方的库) eg: &#39;package:flutter/material.dart&#39;</li></ul></li><li><code>show</code>/<code>hide</code> 显示/隐藏某个成员 eg: import &#39;lib/student/student.dart&#39; show Student, Person;</li><li><code>as</code> 命名空间，解决命名冲突 eg: import &#39;lib/student/student.dart&#39; as Stu; Stu.Student s = new Stu.Student();</li></ul></li></ol><h2 id="header-20">future</h2><p><a href="https://www.imooc.com/article/305495" target="_blank" rel="external">https://www.imooc.com/article/305495</a></p><pre><code class="lang-java">Future&lt;String&gt; testFuture() {  //  return Future.value(&quot;Hello&quot;); return Future.error(&quot;haha 创造个error&quot;);// =&gt; onError会打印【代码中有onError回调，catchError不会执行】//  throw &quot;an Error&quot;;   // =&gt; 代码会直接异常，不会走 catchError方法，因为throw返回的数据类型不是Future&lt;T&gt;类型}testFuture().then((value){    print(value);  },onError: (e) {    // onError为可选参数，代码异常时会被调用【代码中有onError回调，catchError不会执行】    print(&quot;onError: $e&quot;);  }).catchError((e){    print(&quot;catchError: $e&quot;);  });// 类似于java中try{}catch(){}finally{}异常捕获的finallyFuture.error(&quot;haha make a error&quot;)  .then(print)    .catchError(print)  .whenComplete(() =&gt; print(&quot;Done!!!&quot;));//执行结果：//haha make a error//Done!!!</code></pre><pre><code class="lang-java">testAsync() async {  var result = await Future.delayed(Duration(milliseconds: 2000), ()=&gt;Future.value(&quot;hahha&quot;));  print(&quot;time = ${DateTime.now()}&quot;);  print(result);}print(&quot;time start = ${DateTime.now()}&quot;);testAsync();print(&quot;time end= ${DateTime.now()}&quot;);//执行结果：//time start = 2019-05-15 19:24:14.187961//time end= 2019-05-15 19:24:14.200480//time = 2019-05-15 19:24:16.213213//hahha</code></pre><pre><code class="lang-java">Future.delayed(Duration(milliseconds: 3000), () =&gt; &quot;hate&quot;)      .timeout(Duration(milliseconds: 2000))      .then(print)      .catchError(print);//TimeoutException after 0:00:00.002000: Future not completed</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;基础数据类型&lt;/li&gt;
&lt;li&gt;函数&lt;/li&gt;
&lt;li&gt;类&lt;/li&gt;
&lt;li&gt;库&lt;/li&gt;
&lt;li&gt;Future&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="app" scheme="http://sixdegree.github.io/tags/app/"/>
    
  </entry>
  
  <entry>
    <title>Flutter</title>
    <link href="http://sixdegree.github.io/2020/08/20/Flutter.html"/>
    <id>http://sixdegree.github.io/2020/08/20/Flutter.html</id>
    <published>2020-08-19T16:00:00.000Z</published>
    <updated>2021-02-21T17:10:45.446Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Install</li><li>Scaffold</li><li>Route</li><li>Navigator</li><li>Refresh</li><li>Scroll</li><li>Exception</li><li>Provider</li><li>Demo</li></ol><a id="more"></a><h2 id="header-1">Starter</h2><ul><li>新兴的 New</li><li>移动端 Mobile</li><li>动态化 Dynamic</li><li>跨平台 Cross-platform</li></ul><p>创建2D App的SDKDart语言构建的编程框架用一种语言编程（dart） ＝&gt; 为不同的平台定制（ios／android）＝&gt; Build &amp; 发布</p><p><a href="https://flutter.dev/" target="_blank" rel="external">Flutter Dev</a> | <a href="https://flutterchina.club/" target="_blank" rel="external">Flutter中文网</a> | <a href="https://github.com/flutter/flutter" target="_blank" rel="external">Flutter Github</a></p><h3 id="header-2">Install</h3><p><a href="https://flutter.dev/docs/get-started/install" target="_blank" rel="external">install doc</a></p><ol><li><p>下载zip包解压 <code>flutter_macos_1.20.4-stable</code> =&gt; <code>/Users/cj/soft/flutter</code></p></li><li><p>配置环境变量</p><pre><code class="lang-bash"> &gt; vi ~/.bash_profile # Flutter export FLUTTER_HOME=/Users/cj/soft/flutter export DART_HOME=$FLUTTER_HOME/bin/cache/dart-sdk # Flutter temp visit images (创建的flutter项目会使用这个镜像下载依赖) export PUB_HOSTED_URL=https://pub.flutter-io.cn export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn # Path export PATH=$PATH:$FLUTTER_HOME/bin:$DART_HOME/bin &gt; source ~/.bash_profile</code></pre><pre><code class="lang-bash"> &gt; flutter --version Flutter 1.20.4 • channel stable • https://github.com/flutter/flutter.git Framework • revision fba99f6cf9 (9 days ago) • 2020-09-14 15:32:52 -0700 Engine • revision d1bc06f032 Tools • Dart 2.9.2 &gt; dart --version Dart SDK version: 2.9.2 (stable) (Wed Aug 26 12:44:28 2020 +0200) on &quot;macos_x64&quot; &gt; which flutter /Users/cj/soft/flutter/bin/flutter &gt; which dart /Users/cj/soft/flutter/bin/dart</code></pre></li><li><p>诊断依赖项</p><pre><code class="lang-bash"> &gt; flutter doctor Doctor summary (to see all details, run flutter doctor -v): [✓] Flutter (Channel stable, 1.20.4, on Mac OS X 10.11.2 15C50, locale zh-Hans) [✗] Android toolchain - develop for Android devices     ✗ Unable to locate Android SDK.       Install Android Studio from: https://developer.android.com/studio/index.html       On first launch it will assist you in installing the Android SDK components.       (or visit https://flutter.dev/docs/get-started/install/macos#android-setup for detailed instructions).       If the Android SDK has been installed to a custom location, set ANDROID_SDK_ROOT to that location.       You may also want to add it to your PATH environment variable. [!] Xcode - develop for iOS and macOS (Xcode 7.2)     ✗ Flutter requires a minimum Xcode version of 11.0.0.       Download the latest version or update via the Mac App Store.     ✗ CocoaPods not installed.         CocoaPods is used to retrieve the iOS and macOS platform side&#39;s plugin code that responds to your plugin usage on the Dart side.         Without CocoaPods, plugins will not work on iOS or macOS.         For more info, see https://flutter.dev/platform-plugins       To install:         sudo gem install cocoapods [!] Android Studio (not installed) [!] IntelliJ IDEA Community Edition (version 2017.3.4)     ✗ Flutter plugin not installed; this adds Flutter specific functionality.     ✗ Dart plugin not installed; this adds Dart specific functionality. [!] Connected device     ! No devices available ! Doctor found issues in 5 categories.</code></pre></li><li><p>安装更新 <a href="https://developer.apple.com/download/more/" target="_blank" rel="external">Xcode</a> =&gt; XCode ( with IOS Simulator )</p></li><li><p>安装 <a href="https://developer.android.google.cn/studio/" target="_blank" rel="external">Android Studio</a> =&gt; Android Studio ( AVD Manager -&gt; Android Simulator )</p></li><li><p>安装 <a href="https://code.visualstudio.com/" target="_blank" rel="external">VS Code</a></p></li><li><p>各个IDE安装Flutter &amp; Dart插件</p></li></ol><h3 id="header-3">模拟器</h3><pre><code class="lang-bash"># 列出模拟器&gt; flutter emulator3 available emulators:apple_ios_simulator • iOS Simulator   • Apple  • iosPixel_API_28        • Pixel API 28    • Google • androidPixel_XL_API_30     • Pixel XL API 30 • Google • androidTo run an emulator, run &#39;flutter emulators --launch &lt;emulator id&gt;&#39;.To create a new emulator, run &#39;flutter emulators --create [--name xyz]&#39;.You can find more information on managing emulators at the links below:  https://developer.android.com/studio/run/managing-avds  https://developer.android.com/studio/command-line/avdmanager&gt; flutter emulator --launch</code></pre><h3 id="header-4">Hello World</h3><ol><li>IOS =&gt; <code>Xcode -&gt; Open Developer Tool -&gt; Simulator</code> 或者 cmd: <code>open -a Simulator</code><pre><code class="lang-bash"> &gt; open -a Simulator &gt; flutter create first_app &gt; cd first_app &gt; flutter run</code></pre></li><li>Android =&gt; 创建Android模拟器 <code>Android Studio -&gt; Tools -&gt; AVD Manager -&gt; Create Virtual Device</code></li></ol><p><strong> Sample: main.dart </strong></p><pre><code class="lang-js">import &#39;package:flutter/material.dart&#39;;void main() =&gt; runApp(MyApp());class MyApp extends StatelessWidget {  @override  Widget build(BuildContext context) {    return Center(        child: Text(          &quot;Hello World&quot;,          textDirection: textDirection.ltr,          style: TextStyle(fontSize: 30, color: Colors.orange),        ),    );  }}</code></pre><p>运行打包</p><pre><code class="lang-bash">flutter run --target=src/app.dartflutter build apk --target=src/app.dart</code></pre><h3 id="header-5">第三方库</h3><p><a href="https://pub.dev/" target="_blank" rel="external">第三方库</a></p><p>pubspec.yaml:</p><pre><code class="lang-yaml">dependencies:  flutter:    sdk: flutter  dio: ^3.0.10</code></pre><pre><code class="lang-bash">&gt; cd first_app&gt; flutter pub get</code></pre><h2 id="header-6">Flutter 组件树</h2><p><a href="https://zhuanlan.zhihu.com/p/151964543" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/151964543</a></p><p>flutter生命周期<a href="https://www.jianshu.com/p/7e8dff26f81a" target="_blank" rel="external">https://www.jianshu.com/p/7e8dff26f81a</a></p><ul><li>StatelessWidget</li><li>StatefulWidget</li></ul><h3 id="header-7">StatelessWidget</h3><pre><code class="lang-java">/// for example: StatelessWidgetclass ProductItemWidget extends StatelessWidget {  final String title;  final String subTitle;  final String imageUrl;  const ProductItemWidget(this.title, this.subTitle, this.imageUrl);  @override  Widget build(BuildContext context) {    return Container(        padding: EdgeInsets.all(10),        margin: EdgeInsets.all(10),        decoration: BoxDecoration(border: Border.all(width: 2)),        child: Column(          children: [            Text(              title,              style: TextStyle(fontSize: 20),            ),            Text(subTitle, style: TextStyle(fontSize: 16)),            SizedBox(              height: 10,            ),            Image.network(imageUrl),          ],        ));  }}</code></pre><h3 id="header-8">StatefulWidget</h3><pre><code class="lang-java">import &#39;package:flutter/material.dart&#39;;/// for test: StatefulWidget 生命周期/*第一次初始化flutter: StatefulWidgetLcDemo constructor()flutter: StatefulWidgetLcDemo createState()flutter: _StatefulWidgetLcDemoState constructor()flutter: _StatefulWidgetLcDemoState initState()flutter: _StatefulWidgetLcDemoState didChangeDependencies()flutter: _StatefulWidgetLcDemoState build(ctx)保存-热加载更新flutter: StatefulWidgetLcDemo constructor()flutter: _StatefulWidgetLcDemoState didUpdateWidget(oldWidget)flutter: _StatefulWidgetLcDemoState build(ctx)press-setStateflutter: _StatefulWidgetLcDemoState setState() beforeflutter: _StatefulWidgetLcDemoState setState() doflutter: _StatefulWidgetLcDemoState setState() afterflutter: _StatefulWidgetLcDemoState build(ctx)*/class StatefulWidgetLcDemo extends StatefulWidget {  StatefulWidgetLcDemo() {    print(&quot;StatefulWidgetLcDemo constructor()&quot;);  }  @override  _StatefulWidgetLcDemoState createState() {    print(&quot;StatefulWidgetLcDemo createState()&quot;);    return _StatefulWidgetLcDemoState();  }}class _StatefulWidgetLcDemoState extends State&lt;StatefulWidgetLcDemo&gt; {  int count = 0;  _StatefulWidgetLcDemoState() {    print(&quot;_StatefulWidgetLcDemoState constructor()&quot;);  }  @override  void initState() {    super.initState();    print(&quot;_StatefulWidgetLcDemoState initState()&quot;);  }  @override  void didChangeDependencies() {    super.didChangeDependencies();    print(&quot;_StatefulWidgetLcDemoState didChangeDependencies()&quot;);  }  @override  void didUpdateWidget(StatefulWidgetLcDemo oldWidget) {    super.didUpdateWidget(oldWidget);    print(&quot;_StatefulWidgetLcDemoState didUpdateWidget(oldWidget)&quot;);  }  @override  Widget build(BuildContext context) {    print(&quot;_StatefulWidgetLcDemoState build(ctx)&quot;);    return Container(      child: RaisedButton(        child: Text(&quot;Test StatefulWidget Lifecycle - Count: $count&quot;),        onPressed: () {          print(&quot;_StatefulWidgetLcDemoState setState() before&quot;);          setState(() {            count++;            print(&quot;_StatefulWidgetLcDemoState setState() do&quot;);          });          print(&quot;_StatefulWidgetLcDemoState setState() after&quot;);        },      ),    );  }}</code></pre><h2 id="header-9">Scaffold</h2><p>App页面框架</p><ul><li>drawer 左侧滑出</li><li>主屏幕<ul><li>appBar: <ul><li>leading,title,actions</li><li>flexibleSpace</li><li>bottom</li></ul></li><li>body</li><li>bottomSheet</li><li>persistentFooterButtons</li><li>BottomNavigationBar</li></ul></li><li>endDrawer 右侧滑出</li></ul><h2 id="header-10">容器和布局</h2><p>容器：包含单个Widget布局：包含多个Widget</p><h3 id="header-11">容器</h3><p>万能容器 Container</p><ul><li>绘制顺序<ul><li>transform</li><li>decoration</li><li>child</li><li>foregroundDecoration</li></ul></li><li>属性<ul><li>alignment 容器内child的对齐方式</li><li>padding,margin: EdgeInsetsGeometry </li><li>width,height</li><li>constraints: BoxConstrants 容器大小限制 eg: BoxConstrants.expand() 占满全屏</li><li>color 容器背景色 （注：不能和decoration同时使用）</li><li>decoration : Decoration 容器背景装饰<ul><li>color</li><li>border: Border.all(...) 往外扩展，即占用外边距的宽度</li><li>borderRadius: BorderRadius.circle() 边框圆角</li><li>boxShadow: <boxshadow>[] 阴影效果</boxshadow></li><li>gradient: Gradient 渐变效果（LinearGradient,RadiaGradient,SweepGradient）,会覆盖color</li><li>image: DecorationImage(image)</li><li>shape: BoxShape.circle</li></ul></li><li>foregroundDecoration : Decoration 容器前景装饰，绘制在child智商</li><li>transform: Matrix4 容器变化</li><li>child: Widget</li></ul></li><li>说明<ul><li>本身是一个盒子模型</li><li>未设置约束和宽高<ul><li>无child，Container占满全屏</li><li>有child<ul><li>设置了alignment，Container占满全屏</li><li>未设置了alignment，Container同child一般大</li></ul></li></ul></li><li>Decoration <ul><li>BoxDecoration</li><li>ShapeDecoration 通常用于单独为四条边绘制不同效果,特别：shape属性同BoxDecoration不同，类型为ShapeBorder<ul><li>Border 绘制四边</li><li>UnderlineInputBorder 绘制底边线</li><li>RoundedRectangleBorder 绘制矩形边框</li><li>CircleBorder 绘制圆形边框</li><li>StadiumBorder 绘制竖向椭圆边框</li><li>BeveledRectangleBorder 绘制八角边框</li></ul></li><li>UnderlineTabIndicator</li></ul></li><li>EdgeInsetsGeometry<ul><li>EdgeInsets 不支持国际化: .all(),.symmetric(),.fromLTRB(),.only()</li><li>EdgeInsetsDirectional 支持国际化（左右切换）</li></ul></li></ul></li></ul><h3 id="header-12">基础布局</h3><ul><li>弹性 Flex<ul><li>direction: Axis 主轴方向 Axis.horizontal ,Axis.vertical</li><li>mainAxisAlignment,crossAxisAlignment 主轴/交叉轴上的对齐方式</li><li>mainAxisSize: 主轴应占用多大空间 MainAxisSize.min,MainAxisSize.max </li><li>textDirection,verticalDirection : TextDirection 子组件布局顺序</li><li>textBaseline 基线</li><li>children: List<widget></widget></li></ul></li><li>线性 Row, Column (继承自Flex)</li><li>流式 Wrap 自动换行（像水一样自动流过去，换行）<ul><li>direction: Axis</li><li>alignment,crossAxisAlignment 主轴/交叉轴上的对齐方式</li><li>runAlignment 纵轴对齐方式</li><li>runSpacing: double 纵轴间距（默认0.0)</li><li>textDirection,verticalDirection</li><li>children: List<widget></widget></li></ul></li><li>层叠 Stack 重叠组件（子组件列表后米的重置在前面，超过渲染区可剪切掉）</li></ul><h3 id="header-13">辅助布局</h3><ul><li>Padding 边距布局<ul><li>padding</li><li>child</li></ul></li><li>Center 水平垂直居中布局<ul><li>child</li></ul></li><li>SizedBox 固定宽高布局<ul><li>width,height</li><li>child</li></ul></li><li>AspectRatio 宽高比布局 </li><li>FractionallySizedBox 百分比布局</li><li>Card 卡片布局</li></ul><h3 id="header-14">高级布局</h3><ul><li>ListView 可滚动列表（特定化的Column，支持垂直和水平滚动）<ul><li>ListView()</li><li>ListView.builder()</li><li>ListView.separated() 可添加分割线</li><li>ListView custom()</li></ul></li><li>GridView 可滚动的二维网格列表 （二维列表，内容超过渲染区时将自动滚动）<ul><li>GrideView()</li><li>GrideView.count 交叉轴上为固定个数的网格（必设属性：crossAxisCount)</li><li>GrideView.extend 交叉轴上最大可容纳的网格（必设属性：maxCrossAxisExtent 一个网格的最大宽度)</li><li>GrideView.builder</li><li>GrideView.custom</li></ul></li><li>Table/TableRow 表格 （类似线性布局）</li><li>IndexStack 栈索引 （继承自Stack，用于显示第index个child，其他child不可见，默认显示index为0的元素）</li></ul><p><strong> Sample: GridView </strong></p><pre><code class="lang-js">_buildContent(context,value){    return Container(      height: StationTheme.stationHeight,      child: GridView.builder(        padding: EdgeInsets.all(8),        scrollDirection: Axis.horizontal,        itemCount: value.stationItems.length,        itemBuilder: (context,index){          return InkWell(            child:_buildStation(value.stationItems[index]),            onTap: ()=&gt;Navigator.of(context)              .pushNamed(GlobalRoutes.Route_Detail,arguments: {&#39;item&#39;:value.stationItems[index]}),          );        },        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(          crossAxisCount: 2,           crossAxisSpacing: 8,           mainAxisSpacing: 8,          childAspectRatio:0.6        ),      )    );}</code></pre><h2 id="header-15">基础控件</h2><ul><li>Text<ul><li>data: String </li><li>style: TextStyle</li><li>textAlign: TextAlign</li><li>textDirection: TextDirection</li><li>softWrap: bool 是否自动换行</li><li>overflow: TextOverflow 溢出处理 （clip,fade,ellipsis,visible)</li><li>textScaleFator: double 字体缩放系数</li><li>maxLines: int 最多可显示行数，溢出的按overflow属性规则处理</li><li>textSpan: TextSpan 需使用Text.rich方法创建</li></ul></li><li>Image<ul><li>构造：<ul><li>Image(...)</li><li>Image.asset 加载资源目录中的图片</li><li>Image.network 加载网络图片 = Image(image:NetworkImage(src))</li><li>Image.file 加载本地图片文件</li><li>Image.memory 加载Uint8List资源图片</li></ul></li><li>属性：<ul><li>image: ImageProvider </li><li>width/height: double</li><li>fit: BoxFit 填充模式</li><li>color</li><li>colorBlendMode: BlendMode 混色处理</li><li>alignment</li><li>repeat: ImageRepeat</li><li>centerSlice: Rect 点9的8个方向拉伸处理</li><li>gaplessPlayback: bool 当ImageProvider发生变化，true则保留图片知道新图出现，否则中间显示空</li></ul></li></ul></li><li>Icon</li><li>SelectableText 可选文本</li><li>TextField 文本输入框</li><li>Button<ul><li>RaisedButton 凸起按钮</li><li>FlatButton 扁平按钮</li><li>IconButton 图标按钮</li><li>OutlineButton 线框按钮</li></ul></li><li>Radio 单选框</li><li>Checkbox 多选框</li><li>Chip 碎片（类似tag）</li><li>Switch 开/关按钮</li><li>Slider 滑块（类似进度条）</li><li>Placeholder 占位</li></ul><h2 id="header-16">事件与通知</h2><p>Flutter手势系统分为两个层级</p><ul><li>下层：识别原始的指针事件，描述指针的位置和移动<ul><li>指针事件：<ul><li>PointerDownEvent</li><li>PointerMoveEvent</li><li>PointerUpEvent</li><li>PointerCancelEvent</li></ul></li><li>当指针按下时，事件指派给最内层的组件，后续指针事件以冒泡方式向上传递给到根组件的所有途径组件</li><li>无法取消或停止事件冒泡传递</li><li>可使用Listener监听指针事件，不过应尽量使用更高层的手势</li></ul></li><li>上层：识别手势，即语义动作，由一个活多个指针事件组成<ul><li>手势事件:<ul><li>点击(Tap)</li><li>拖动(Drag)</li><li>缩放(Scale)</li></ul></li><li>生命周期内会发送一个或多个事件，使用<code>GestureDetector</code>来监听手势事件</li><li><code>GestureDetector</code>通过检查出不为null的手势事件处理器来获悉需要识别的手势</li></ul></li></ul><p><code>GestureDetector</code> 手势检测，有7种类型事件：</p><ul><li>单击事件(Tap): onTapDown,onTapUp,onTap,onTapCancel</li><li>双击事件(Double Tap): onDoubleTap</li><li>长按事件(Long Press): onLongPress,onLongPressMoveUpdate,onLongPressUp,onLongPressEnd</li><li>垂直滑动(Vertical Drap):  onVerticalDrapDown,onVerticalDrapStart,onVerticalDrapUpdate,onVerticalDrapEnd,onVerticalDrapCancel</li><li>水平滑动(Horizontal Drap): onHorizontalDragStart,onHorizontalDrapUpdate,onHorizontalDragEnd</li><li>指针事件(Pan): onPanDown,onPanStart,onPanUpdate,onPanEnd,onPanCacel</li><li>缩放事件(Scale) onScaleStart,onScaleUpdate,onScaleEnd</li></ul><p><code>InkWell</code> 具有水波纹效果（溅墨效果）的点击事件控件注：当InkWell的子控件设置了背景色，是看不到溅墨效果的，需进行特殊处理（用Material &amp; Ink 包裹）用InkWell包裹Image时，也是看不到溅墨效果的，建议使用 Ink.Image控件</p><h2 id="header-17">本地资源</h2><p>静态化本地资源 <code>assets</code>,<code>fonts</code></p><p>pubspec.yaml: </p><pre><code class="lang-yaml">dependencies:  flutter:    sdk: flutter  flutter_svg: ^0.19.1                    # svg  flutter_staggered_grid_view: &quot;^0.3.2&quot;   # 瀑布流插件flutter:    assets:        - assets/images/        - assets/icons/    fonts:        - family: Nunito          fonts:            - asset: assets/fonts/Nunito/Nunito-Regular.ttf            - asset: assets/fonts/Nunito/Nunito-SemiBold.ttf              weight: 600            - asset: assets/fonts/Nunito/Nunito-Bold.ttf              weight: 700</code></pre><h2 id="header-18">路由</h2><h3 id="header-19">Navigator 导航器</h3><ul><li>按照堆栈方式管理子组件</li><li>内部使用<code>Overlay</code>组件管理多个页面，位于最上层的页面可见</li><li>通过调整<code>Overlay</code>里页面顺序来切换页面</li><li>页面<code>Page</code>也称为<code>Screen</code>或<code>Route</code></li><li><code>WidgetsApp</code>和<code>MaterialApp</code>里会自动创建一个导航器，组件里可使用<code>Navigator.of(context)</code>来获取其祖先组件里的导航器</li></ul><ol><li><p>进入新页和返回</p><ul><li>使用MaterialApp的home属性制定首页，该页位于导航器堆栈的最底层</li><li>使用<code>Navigator.push</code>方法进入某个页面（传递一个MaterialPageRoute对象）</li><li>使用<code>Navigator.pop</code>方法返回上一页</li><li>如果页面使用了<code>Scaffold</code>，则导航条上会自动出现返回按钮</li></ul></li><li><p>跨页面传递数据</p><ul><li>可通过页面组件的构造函数传递数据</li><li><code>Navigator.push</code> 返回<code>Future</code>对象，会在<code>Navigator.pop(value)</code>退出页面时完成，<code>Future</code>得到<code>pop</code>的值</li><li>可先创建命名路由，后使用<code>Navigator.pushNamed</code>进入指定名字的路由</li></ul></li><li><p>导航器嵌套</p><ul><li>应用内所有导航器为树状结构，有一个根root导航器</li><li>使用<code>WillPopScope</code>来使内层导航器响应Android实体返回键</li></ul></li></ol><h3 id="header-20">Navigator &amp; Router</h3><ol><li>MaterialApp.routes 路由<pre><code class="lang-js"> initialRoute:&#39;/&#39;, routes:{      &#39;/&#39;: (context) =&gt; NavigatorDemo(),      &#39;/home&#39;: (context) =&gt; Home(),     &#39;/about&#39;: (context) =&gt; MyPage(title: &quot;About&quot;), }</code></pre></li><li>Navigator.push 进入<pre><code class="lang-js"> onPressed: () {   // Navigator.of(context).push(   //  MaterialPageRoute(   //    builder: (BuildContext context) =&gt; MyPage(title: &#39;About&#39;))   //);   Navigator.pushNamed(context, &#39;/about&#39;); },</code></pre></li><li>Navigator.pop 返回上一页<pre><code class="lang-js"> onPressed: () {       Navigator.pop(context); },</code></pre></li></ol><p>静态路由&amp;动态路由 <a href="https://www.jianshu.com/p/66fa8c85cdc6" target="_blank" rel="external">https://www.jianshu.com/p/66fa8c85cdc6</a></p><h3 id="header-21">动态路由框架 Fluro</h3><ol><li><p>pubspec.yaml</p><pre><code class="lang-yaml"> dependencies:   flutter:     sdk: flutter   flutter_localizations:     sdk: flutter   # 动态路由   fluro: 1.7.7</code></pre></li><li><p>routes.dart: </p><pre><code class="lang-java"> import &#39;package:fluro/fluro.dart&#39;; import &#39;package:flutter/material.dart&#39;; import &#39;package:third_app/components/main_body.dart&#39;; import &#39;package:third_app/pages/detail/detail.dart&#39;; /* https://dart-pub.mirrors.sjtug.sjtu.edu.cn/packages/fluro https://zhuanlan.zhihu.com/p/107383867 https://segmentfault.com/a/1190000021488577 */ Handler homePageHandler = Handler(   handlerFunc: (context, params) =&gt;  MyMainBodyPageItem(Colors.grey,title: Text(&quot;Home Page&quot;),), ); Handler detailPageHandler = Handler(   handlerFunc: (context, params){     String detailId = params[&#39;id&#39;].first;     Map args = context.settings.arguments;     debugPrint(&quot;detailPageHandler get detailId:$detailId,args:$args&quot;);     return DetailPage(detailId: detailId,args: args);   }, ); Handler notFoundHandler = Handler(   handlerFunc: (context, parameters){     return Container(       alignment: Alignment.center,       child: Text(&quot;出错啦。。。&quot;),     );   }, ); class Routes{   static String homePage = &#39;/home&#39;;   static String detailPage = &#39;/details/:id&#39;;   static void configRoutes(FluroRouter router) {     router..define(homePage,handler:homePageHandler)           ..define(detailPage, handler: detailPageHandler)           ..notFoundHandler=notFoundHandler;   } }</code></pre></li><li><p>global.dart</p><pre><code class="lang-java"> import &#39;package:fluro/fluro.dart&#39;; class Global{   static FluroRouter router; }</code></pre></li><li><p>main.dart</p><pre><code class="lang-java"> void main() {   final router = FluroRouter();   Routes.configRoutes(router);   Global.router=router;   runApp(MyApp()); } class MyApp extends StatelessWidget {   @override   Widget build(BuildContext context) {     return MaterialApp(       title: &#39;Hi Dear&#39;,       home: MyFrame(),       // routes:       onGenerateRoute: Global.router.generator,     );   } }</code></pre></li><li><p>Page A -&gt; Page B </p><pre><code class="lang-js"> Navigator.pushNamed(     context,      Routes.detailPage,     arguments: {&#39;title&#39;:items[index][&#39;title&#39;]} ).then((value)=&gt;debugPrint(&quot;Get returnData: $value&quot;)); Global.router.navigateTo(     context,      items[index][&#39;path&#39;],     transition: TransitionType.material,     routeSettings: RouteSettings(       arguments:{&#39;title&#39;:items[index][&#39;title&#39;]}     ), ).then((value) =&gt; debugPrint(&quot;Get returnData: $value&quot;));</code></pre></li><li><p>Page B return to Page A</p><pre><code class="lang-js"> onPressed: () {   // Global.router.pop(context, args);   Navigator.pop(context,args); },</code></pre></li></ol><h3 id="header-22">动态路由框架 auto_route</h3><ol><li><p>pubspec.yaml</p><pre><code class="lang-yaml"> dependencies:   flutter:     sdk: flutter   flutter_localizations:     sdk: flutter   # 动态路由   auto_route: ^0.6.9 dev_dependencies:   flutter_test:     sdk: flutter   # 路由生成   auto_route_generator: ^0.6.9   build_runner:</code></pre></li><li><p>auto_routes/auto_routes.dart</p><pre><code class="lang-java"> import &#39;package:auto_route/auto_route_annotations.dart&#39;; import &#39;package:third_app/auto_routes/auth_grard.dart&#39;; import &#39;package:third_app/pages/detail/detail.dart&#39;; import &#39;package:third_app/pages/frame/frame.dart&#39;; import &#39;package:third_app/pages/home/home.dart&#39;; @MaterialAutoRouter(   routes: &lt;AutoRoute&gt;[     MaterialRoute(path: &#39;/&#39;,page: MyFrame,initial: true),     MaterialRoute(path:&#39;/home&#39;,page: HomePage),     MaterialRoute(path:&#39;/details/:id&#39;,page: DetailPage,guards: [AuthGuard]),   ], )  //CustomAutoRoute(..config) class $AppRouter { }</code></pre></li><li><p>auto_routes/auth_guard.dart</p><pre><code class="lang-java"> import &#39;package:auto_route/auto_route.dart&#39;; class AuthGuard extends RouteGuard{   @override   Future&lt;bool&gt; canNavigate(ExtendedNavigatorState&lt;RouterBase&gt; navigator, String routeName, Object arguments) async {     print(&quot;This is AuthGuard canNavigate: $routeName,$arguments&quot;);     return true;   } }</code></pre></li><li><p>cmd to generate <code>auto_routes/auto_routes.gr.dart</code></p><pre><code class="lang-bash"> flutter packages pub run build_runner build</code></pre></li><li><p>main.dart</p><pre><code class="lang-java"> void main() {   runApp(MyApp()); } class MyApp extends StatelessWidget {   @override   Widget build(BuildContext context) {     return MaterialApp(       title: &#39;Hi Dear&#39;,       home: MyFrame(),       // 注册路由 （auto_flutter) - Without ExtendedNavigator will lose support for RouteGuards and auto-nested navigation handling       // onGenerateRoute: AppRouter(),       // 注册路由 （auto_flutter)       builder: ExtendedNavigator&lt;AppRouter&gt;(         // initialRoute: Routes.myFrame,         router: AppRouter(),         guards:[AuthGuard()]       ),     );   } }</code></pre></li><li><p>Page A -&gt; Page B</p><pre><code class="lang-js"> ExtendedNavigator.of(context).push(     items[index][&#39;path&#39;],     arguments:DetailPageArguments(detailId:&#39;$index&#39;,args:{&#39;title&#39;:items[index][&#39;title&#39;]} ),   ).then((value) =&gt; debugPrint(&quot;Get returnData: $value&quot;));</code></pre></li><li><p>Page B return to Page A</p><pre><code class="lang-js"> ExtendedNavigator.of(context).pop(args);</code></pre></li></ol><h2 id="header-23">导航栏组件</h2><h3 id="header-24">顶部导航栏</h3><p>AppBar</p><pre><code class="lang-js">return Scaffold(    backgroundColor: Colors.grey[300],    appBar: AppBar(      leading: IconButton(        icon:Icon(Icons.menu),        tooltip: &#39;Navigation&#39;,        onPressed: ()=&gt;debugPrint(&#39;Navigation button is pressed.&#39;),      ),      actions: [        IconButton(          icon:Icon(Icons.search),          tooltip: &#39;Search&#39;,          onPressed: ()=&gt;debugPrint(&#39;Search button is pressed.&#39;),        )      ],      title: Text(&quot;Second App&quot;)    ),    body: null  );</code></pre><h3 id="header-25">底部导航栏</h3><ul><li>BottomNavigationBar</li><li>BottomAppBar</li></ul><h4 id="header-26">BottomNavigationBar</h4><pre><code class="lang-js">import &#39;package:flutter/material.dart&#39;;class BottomNavigationBarDemo extends StatefulWidget {  BottomNavigationBarDemo({Key key}) : super(key: key);  @override  _BottomNavigationBarDemoState createState() =&gt;      _BottomNavigationBarDemoState();}class _BottomNavigationBarDemoState extends State&lt;BottomNavigationBarDemo&gt; {  int _currentIndex = 0;  void _onTapHandler(int index) {    setState(()=&gt;_currentIndex=index);  }  @override  Widget build(BuildContext context) {    return BottomNavigationBar(        // 底部导航栏        type: BottomNavigationBarType.fixed, // item大于等于4个时需设置        fixedColor: Colors.black,        currentIndex: _currentIndex,        onTap: _onTapHandler,        items: [          BottomNavigationBarItem(icon: Icon(Icons.explore), title: Text(&quot;Explore&quot;)),          BottomNavigationBarItem(icon: Icon(Icons.history), title: Text(&quot;History&quot;)),          BottomNavigationBarItem(icon: Icon(Icons.list), title: Text(&quot;List&quot;)),          BottomNavigationBarItem(icon: Icon(Icons.person), title: Text(&quot;My&quot;)),        ]);  }}</code></pre><h4 id="header-27">BottomAppBar</h4><ul><li><p>Example 1 :</p><pre><code class="lang-js">  return BottomAppBar(    child: Row(      mainAxisAlignment: MainAxisAlignment.spaceAround,      children: [        IconButton(icon: Icon(Icons.home),onPressed: null,),        IconButton(icon: Icon(Icons.list),onPressed: null,),        IconButton(icon: Icon(Icons.person),onPressed: null,),      ],    )  );</code></pre></li><li><p>Example 2 :</p><pre><code class="lang-js">  return BottomAppBar(    child: Expanded(      child: Row(        mainAxisAlignment: MainAxisAlignment.spaceAround,        children:[          Expanded(child:IconButton(icon: Icon(Icons.home),onPressed: null,)),          Expanded(child:IconButton(icon: Icon(Icons.list_alt_rounded),onPressed: null,)),          Expanded(child:IconButton(icon: Icon(Icons.person),onPressed: null,)),          Expanded(child:IconButton(icon: Icon(Icons.person),onPressed: null,)),          Expanded(child:IconButton(icon: Icon(Icons.person),onPressed: null,)),          Expanded(child:IconButton(icon: Icon(Icons.person),onPressed: null,)),          Expanded(child:IconButton(icon: Icon(Icons.person),onPressed: null,)),          Expanded(child:IconButton(icon: Icon(Icons.person),onPressed: null,)),          Expanded(child:IconButton(icon: Icon(Icons.person),onPressed: null,)),          Expanded(child:IconButton(icon: Icon(Icons.ac_unit),onPressed: null,)),        ]      ),    ),  );</code></pre></li><li><p>Example 3:</p><pre><code class="lang-js">  return BottomAppBar(    child: Container(      padding: EdgeInsets.symmetric(vertical: 8),      child: Row(        mainAxisAlignment: MainAxisAlignment.spaceAround,        crossAxisAlignment: CrossAxisAlignment.end,        children: [          InkWell(            onTap: ()=&gt;_onTapHandler(0),            child: Column(              mainAxisSize: MainAxisSize.min,              children: [                Icon(Icons.home,color: _currentIndex==0?Colors.red:Colors.black,),                Text(&quot;首页&quot;,style: TextStyle(color: _currentIndex==0?Colors.red:Colors.black),)              ],            ),          ),          InkWell(            onTap: ()=&gt;_onTapHandler(1),            child:Container(              child:Text(&quot;Do&quot;,style: TextStyle(color:Colors.white),),              padding: EdgeInsets.all(12),              decoration: BoxDecoration(                borderRadius: BorderRadius.circular(35),                color: _currentIndex==1?Colors.red:Colors.grey,              ),            )          ),          InkWell(            onTap: ()=&gt;_onTapHandler(2),            child: Column(              mainAxisSize: MainAxisSize.min,              children: [                Icon(Icons.person,color: _currentIndex==2?Colors.red:Colors.black,),                Text(&quot;我的&quot;,style: TextStyle(color: _currentIndex==2?Colors.red:Colors.black),)              ],            ),          ),        ],      ),    )  );</code></pre></li></ul><h4 id="header-28">页面切换保持状态</h4><p><a href="https://juejin.cn/post/6844903660816695309" target="_blank" rel="external">https://juejin.cn/post/6844903660816695309</a></p><p>Flutter BottomNavigationBar切换页面被重置问题（保存状态）<a href="https://www.jianshu.com/p/87e545b889cd" target="_blank" rel="external">https://www.jianshu.com/p/87e545b889cd</a></p><p>Flutter底部tab切换保持页面状态的2种方法(转)<a href="https://www.jianshu.com/p/b7dd54f0bcbd?utm_campaign=haruki" target="_blank" rel="external">https://www.jianshu.com/p/b7dd54f0bcbd?utm_campaign=haruki</a><a href="https://www.jianshu.com/p/369f00a40cc2" target="_blank" rel="external">https://www.jianshu.com/p/369f00a40cc2</a></p><p>切换后页面状态的保持 <code>AutomaticKeepAliveClientMixin</code></p><p><a href="https://blog.csdn.net/niceyoo/article/details/92855534" target="_blank" rel="external">https://blog.csdn.net/niceyoo/article/details/92855534</a><a href="https://blog.csdn.net/u010842313/article/details/105554390" target="_blank" rel="external">https://blog.csdn.net/u010842313/article/details/105554390</a></p><p>Flutter实现页面切换后保持原页面状态的3种方法<a href="https://www.jb51.net/article/157680.htm" target="_blank" rel="external">https://www.jb51.net/article/157680.htm</a><a href="https://my.oschina.net/u/4581368/blog/4372254" target="_blank" rel="external">https://my.oschina.net/u/4581368/blog/4372254</a></p><ul><li>使用 IndexedStack, eg: BottomNavigationBar/BottomAppBar &amp; IndexedStack<ul><li>缺点在于第一次加载时便实例化了所有的子页面State</li></ul></li><li><code>AutomaticKeepAliveClientMixin</code><ul><li>对于未使用的页面状态不会进行实例化，减小了应用初始化时的开销</li><li>先决条件：<ul><li>使用的页面必须是 StatefulWidget，如果是 StatelessWidget 是没办法办法使用的。</li><li>其实只有两个前置组件才能保持页面状态：PageView 和 IndexedStack。</li><li>重写 wantKeepAlive 方法，如果不重写也是实现不了的。</li></ul></li></ul></li><li>扩展：<a href="https://juejin.cn/post/6844903705192431623" target="_blank" rel="external">如何在列表中的item不被摧毁？</a><ul><li>Flutter提供了一个KeepAlive()小部件，它可以保持项目处于活动状态，否则可能会被摧毁。在列表中，元素默认包装在AutomaticKeepAlive小部件中。</li><li>可以通过将addAutomaticKeepAlives字段设置为false来禁用AutomaticKeepAlives。这在元素不需要保持活动或KeepAlive的自定义实现的情况下非常有用。</li></ul></li></ul><p><strong> Sample: IndexedStack </strong></p><pre><code class="lang-js">class IndexBody extends StatelessWidget {  final int currentIndex;  final List&lt;Widget&gt; items = [    HomePage(),    DoPage(),    MyPage(),  ];  IndexBody({Key key,this.currentIndex=0}) : super(key: key);  @override  Widget build(BuildContext context) {    debugPrint(&quot;build IndexBody&quot;);    return IndexedStack(      index: currentIndex,      children: items,    );  }}</code></pre><p><strong> Sample: AutomaticKeepAliveClientMixin </strong></p><pre><code class="lang-js">class ProjectAnnounceView extends StatefulWidget {  ProjectAnnounceView({Key key}) : super(key: key);  @override  _ProjectAnnounceViewState createState() =&gt; _ProjectAnnounceViewState();}class _ProjectAnnounceViewState extends State&lt;ProjectAnnounceView&gt; with AutomaticKeepAliveClientMixin{  @override  // TODO: implement wantKeepAlive  bool get wantKeepAlive =&gt; true;  @override  Widget build(BuildContext context) {    return _buildAnnouncementList(getDataOfAnnouncements());  }  Widget _buildAnnouncementList(announcementList){    return Container(      margin: EdgeInsets.only(top:10),      child: ListView.builder(        itemCount: announcementList.length+1,        itemBuilder: (_,index){          if(index==announcementList.length)            return Container(              margin: EdgeInsets.all(20),              alignment: Alignment.center,              child: Text(&quot;——  End  ——&quot;,style: TextStyle(color: Colors.grey),),            );          return _buildItem(announcementList[index]);        },      )    );  }}</code></pre><h3 id="header-29">标签栏</h3><p>TabBar &amp; TabView &amp; TabController<a href="https://www.cnblogs.com/joe235/p/11213861.html" target="_blank" rel="external">https://www.cnblogs.com/joe235/p/11213861.html</a></p><p>Flutter TabBar、TabBarView、 TabController 实现 Tab 标签菜单布局<a href="http://www.ptbird.cn/flutter-tab-tabcontroller.html" target="_blank" rel="external">http://www.ptbird.cn/flutter-tab-tabcontroller.html</a></p><p>TabController</p><ul><li>创建有两种形式<ul><li>使用系统的<code>DefaultTabController</code></li><li>自己定义一个<code>TabController</code>实现<code>SingleTickerProviderStateMixin</code></li></ul></li><li>一般放入有状态控件中使用，以适应标签页数量和内容有动态变化的场景</li><li>如果标签页在APP中是静态固定的格局，则可以在无状态控件中加入简易版的DefaultTabController以提高运行效率，毕竟无状态控件要比有状态控件更省资源，运行效率更快。</li></ul><h4 id="header-30">DefaultTabController</h4><pre><code class="lang-js">class Home extends StatelessWidget {  const Home({Key key}) : super(key: key);  @override  Widget build(BuildContext context) {    // TabController &amp; TabBar(tabs) &amp; TabBarView    return DefaultTabController(        length: 5,        child: Scaffold(          backgroundColor: Colors.grey[300],          floatingActionButton: FloatingActionButton(            child: Icon(Icons.arrow_back),            onPressed: () {              Navigator.pop(context);            },          ),          appBar: AppBar(              elevation: 0,               actions: [                IconButton(                  icon: Icon(Icons.search),                  tooltip: &#39;Search&#39;,                  onPressed: () =&gt; debugPrint(&#39;Search button is pressed.&#39;),                )              ],              bottom: TabBar(                tabs: [                  Tab(icon: Icon(Icons.local_florist)),                  Tab(icon: Icon(Icons.change_history)),                  Tab(icon: Icon(Icons.directions_bike)),                  Tab(icon: Icon(Icons.view_quilt)),                  Tab(icon: Icon(Icons.view_agenda)),                ],                unselectedLabelColor: Colors.black38,                indicatorColor: Colors.black54,                indicatorSize: TabBarIndicatorSize.label,                indicatorWeight: 1.0,              ),              title: Text(&quot;Second App&quot;)),          body: TabBarView(            children: [              Icon(Icons.local_florist, size: 128, color: Colors.black12),              Icon(Icons.change_history, size: 128, color: Colors.black12),              Icon(Icons.directions_bike, size: 128, color: Colors.black12),              Icon(Icons.view_quilt, size: 128, color: Colors.black12),              Icon(Icons.view_agenda, size: 128, color: Colors.black12),            ],          ),          bottomNavigationBar: BottomNavigationBarDemo(),        ));  }}</code></pre><h4 id="header-31">TabController</h4><pre><code class="lang-js">class ChannelFmIndex extends StatefulWidget {  ChannelFmIndex({Key key}) : super(key: key);  @override  _ChannelFmIndexState createState() =&gt; _ChannelFmIndexState();}class _ChannelFmIndexState extends State&lt;ChannelFmIndex&gt;  with SingleTickerProviderStateMixin {  TabController _tabController;  @override  void initState() {     super.initState();    _tabController = TabController(length: 3, vsync: this); // 创建 TabController  }  @override  Widget build(BuildContext context) {    return Scaffold(      // appBar: _buildAppBar(context),      appBar: _buildHeader(),      body: _buildTabView(context),    );  }  _buildHeader(){    return AppBar(      elevation: 0,      automaticallyImplyLeading: false,      titleSpacing: 0,      toolbarHeight: 160,      title: _buildHeadCard(),      bottom: PreferredSize(        preferredSize: Size.fromHeight(50),        child: _buildHeadTabBar(),      ),    );  }  _buildHeadTabBar(){    return Container(      decoration: BoxDecoration(        color: Colors.white,        border: Border.symmetric(          horizontal: BorderSide(color: Colors.grey[50],width: 8)        )      ),      child: TabBar(        controller: _tabController,     // 配置 TabController        indicatorColor: Colors.black87,        indicatorSize: TabBarIndicatorSize.label,        indicatorWeight: 1.0,        tabs: [          Tab(child: Text(&quot;最新&quot;),),          Tab(child: Text(&quot;动态&quot;),),          Tab(child: Text(&quot;简介&quot;),),        ],      ),    );  }  _buildTabView(BuildContext context){    return TabBarView(      controller: _tabController,   // 配置 TabController      children: &lt;Widget&gt;[         _buildTabOfLatest(context),        _buildTabOfActivity(context),        _buildTabOfIntro()      ],    );  }  _buildTabOfLatest(BuildContext context){    // ...  }  _buildTabOfActivity(context){    // ...  }  _buildTabOfIntro(){    // ...  }}</code></pre><h2 id="header-32">Banner组件</h2><p>第三方组件： <code>flutter_swiper</code></p><p><a href="https://www.jianshu.com/p/9bdfc5a00877" target="_blank" rel="external">https://www.jianshu.com/p/9bdfc5a00877</a><a href="https://zhuanlan.zhihu.com/p/88790923" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/88790923</a></p><ol><li><p>pubspec.yaml</p><pre><code class="lang-yaml"> dependencies:   flutter:     sdk: flutter   # 轮播图   flutter_swiper: ^1.1.6</code></pre></li><li><p>home_banner.dart</p><pre><code class="lang-js"> import &#39;package:flutter/material.dart&#39;; import &#39;package:flutter_swiper/flutter_swiper.dart&#39;; /* Ref Doc: https://www.cnblogs.com/joe235/p/11251710.html https://zhuanlan.zhihu.com/p/88790923 https://segmentfault.com/a/1190000021488577 */ class HomeBanner extends StatelessWidget {   final List items;   HomeBanner({Key key, this.items})       : assert(items != null &amp;&amp; items.length != 0),         super(key: key);   @override   Widget build(BuildContext context) {     return Container(       height: 200,       child: Swiper(         itemCount: items.length,         itemBuilder: (context, index) {           // return InkWell(           //   child: Image.network(items[index][&#39;image&#39;], fit: BoxFit.fill),           //   onTap: (){           //     debugPrint(&#39;banner click to path: ${items[index][&#39;path&#39;]}&#39;);           //   },           // );           return Image.network(items[index][&#39;image&#39;], fit: BoxFit.fill);         },         pagination: new SwiperPagination(           // builder: SwiperPagination.fraction           // builder: RectSwiperPaginationBuilder(           //   color: Colors.black,           //   size: Size(20,10)           // )         ),         autoplay: true,         autoplayDelay:3000,         onTap: (index){           debugPrint(&quot;banner onTap:$index ${items[index][&#39;path&#39;]}&quot;);         }         // viewportFraction: 0.8,         // scale: 0.9,       ),     );   } }</code></pre></li><li><p>home.dart</p><pre><code class="lang-js"> Widget _buildHomeBanner(){     List items=[       {         &#39;image&#39;:&#39;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1603365312,3218205429&amp;fm=26&amp;gp=0.jpg&#39;,         &#39;path&#39;:&#39;/details/a&#39;,         &#39;title&#39;:&#39;AAA&#39;       },       {         &#39;image&#39;:&#39;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2005235653,1742582269&amp;fm=26&amp;gp=0.jpg&#39;,         &#39;path&#39;:&#39;/details/b&#39;,         &#39;title&#39;:&#39;BBB&#39;       },       {         &#39;image&#39;:&#39;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1355153719,3297569375&amp;fm=26&amp;gp=0.jpg&#39;,         &#39;path&#39;:&#39;/details/c&#39;,         &#39;title&#39;:&#39;CCC&#39;       },     ];     return HomeBanner(items: items);   }</code></pre></li></ol><h2 id="header-33">刷新组件</h2><h3 id="header-34"><code>RefreshIndicator</code></h3><p>下拉刷新<a href="https://www.cnblogs.com/darecy/archive/2020/05/10/12863080.html" target="_blank" rel="external">https://www.cnblogs.com/darecy/archive/2020/05/10/12863080.html</a></p><pre><code class="lang-js">_buildRefreshIndicator(String name,Widget child){    return RefreshIndicator(      onRefresh: () async {        debugPrint(&quot;+++ $name onRefresh! +++&quot;);      },      child: child    );}</code></pre><h3 id="header-35"><code>flutter_easyrefresh</code></h3><p>第三方组件</p><p>下拉刷新以及上拉加载</p><ol><li><p>pubspec.yaml</p><pre><code class="lang-yaml"> dependencies:   flutter:     sdk: flutter   # 下拉刷新以及上拉加载   flutter_easyrefresh: ^2.1.6</code></pre></li><li><p>home.dart</p><pre><code class="lang-js">   Widget _buildHomeBody(){     /*     https://github.com/xuelongqy/flutter_easyrefresh/blob/v2/README.md     */     return EasyRefresh(       child:  _buildHomeBodyList(),       header: ClassicalHeader(         refreshText:&#39;下拉刷新&#39;,         refreshReadyText:&#39;准备刷新&#39;,         refreshingText:&#39;刷新获取中&#39;,         refreshedText:&#39;刷新完成&#39;,         refreshFailedText: &#39;刷新失败&#39;,         infoText: &#39;更新时间 %T&#39;,         completeDuration: Duration(milliseconds: 300),         textColor: Colors.black54,         infoColor: Colors.black54,         showInfo:false       ),       footer: ClassicalFooter(         loadText:&#39;上滑加载&#39;,         loadReadyText: &#39;加载中&#39;,         loadingText:&#39;加载中&#39;,         loadedText:&#39;加载完成&#39;,         loadFailedText:&#39;加载失败&#39;,         noMoreText: &#39;我也是有底线的&#39;,         infoText: &#39;更新时间 %T&#39;,         textColor: Colors.black54,         showInfo: false       ),       onRefresh: () async{         debugPrint(&quot;HomePage onRefresh&quot;);       },       onLoad: () async{         debugPrint(&quot;HomePage onLoad&quot;);       },     );   }   Widget _buildHomeBodyList(){     return ListView(         children: [           _buildHomeBanner(),         ],     );   }</code></pre></li></ol><h2 id="header-36">滚动控件（Scroll）</h2><p>Flutter 滚动控件篇--&gt;滚动监听及控制(ScrollController)<a href="https://www.mk2048.com/blog/blog_h1ck21icak0hj.html" target="_blank" rel="external">https://www.mk2048.com/blog/blog_h1ck21icak0hj.html</a></p><p>Flutter 滚动监听及实战appBar滚动渐变<a href="https://www.jianshu.com/p/b0b1c6308674" target="_blank" rel="external">https://www.jianshu.com/p/b0b1c6308674</a></p><h3 id="header-37">ScrollController</h3><ul><li><code>offset</code>：可滚动组件当前的滚动位置。</li><li><code>jumpTo(double offset)</code> 跳转到指定位置，offset 为滚动偏移量。</li><li><code>animateTo(double offset,@required Duration duration,@required Curve curve)</code> 同 <code>jumpTo(double offset)</code> 一样，不同的是 <code>animateTo</code> 跳转时会执行一个动画，需要传入执行动画需要的时间和动画曲线。</li></ul><h3 id="header-38">ScrollPosition</h3><ul><li>用来保存可滚动组件的滚动位置的</li><li>一个 ScrollController 对象可能会被多个可滚动的组件使用</li><li>ScrollController 会为每一个滚动组件创建一个 ScrollPosition 对象来存储位置信息</li><li>ScrollPosition 中存储的是在 ScrollController 的 positions 属性里面，他是一个 <code>List&lt;ScrollPosition&gt;</code> 数组</li><li><code>controller.positions.elementAt(0).pixels</code></li><li>ScrollPosition 有两个常用方法：分别是 <code>animateTo()</code> 和 <code>jumpTo()</code>，他们才是真正控制跳转到滚动位置的方法，在 ScrollController 中这两个同名方法，内部最终都会调用 ScrollPosition 这两个方法</li></ul><h3 id="header-39">ScrollController控制原理</h3><p>ScrollController方法<code>createScrollPosition</code></p><ul><li>当 ScrollController 和可滚动组件关联时，可滚动组件首先会调 ScrollController 的 createScrollPosition 方法来创建一个ScrollPosition来存储滚动位置信息。</li><li>在滚动组件调用 createScrollPosition 方法之后，接着会调用 <code>void attach(ScrollPosition position)</code> 方法来将创建好的 ScrollPosition 信息添加到 positions 属性中，这一步称为“注册位置”，只有注册后<code>animateTo()</code> 和 <code>jumpTo()</code>才可以被调用。</li><li>最后当可滚动组件被销毁时，会调用 <code>void detach(ScrollPosition position)</code> 方法，将其 ScrollPosition 对象从 ScrollController 的positions 属性中移除，这一步称为“注销位置”，注销后 animateTo() 和 jumpTo() 将不能再被调用。</li></ul><h3 id="header-40">ScrollNotification</h3><p>在接收到滚动事件时，参数类型为<code>ScrollNotification</code></p><ul><li>包括一个<code>metrics</code>属性，类型是<code>ScrollMetrics</code>，该属性包含当前<code>ViewPort</code>及滚动位置等信息：<ul><li>pixels：当前滚动位置。</li><li>maxScrollExtent：最大可滚动长度。</li><li>extentBefore：滑出ViewPort顶部的长度；此示例中相当于顶部滑出屏幕上方的列表长度。</li><li>extentInside：ViewPort内部长度；此示例中屏幕显示的列表部分的长度。</li><li>extentAfter：列表中未滑入ViewPort部分的长度；此示例中列表底部未显示到屏幕范围部分的长度。</li><li>atEdge：是否滑到了可滚动组件的边界（此示例中相当于列表顶或底部）</li></ul></li></ul><h3 id="header-41">NotificationListener</h3><ul><li>通知冒泡<ul><li>Flutter Widget 树中子 Widget可以通过发送通知（Notification）与父(包括祖先) Widget 进行通信，父级组件可以通过 NotificationListener 组件来监听自己关注的通知，这种通信方式类似于 Web 开发中浏览器的事件冒泡，在 Flutter 中就沿用了“冒泡”这个术语，称为通知冒泡</li></ul></li><li>滚动通知<ul><li>Flutter 中很多地方使用了通知，如可滚动组件（Scrollable Widget）滑动时就会分发滚动通知（ScrollNotification），而 Scrollbar 正是通过监听 ScrollNotification 来确定滚动条位置的<pre><code class="lang-js">switch (notification.runtimeType){case ScrollStartNotification: print(&quot;开始滚动&quot;); break;case ScrollUpdateNotification: print(&quot;正在滚动&quot;); break;case ScrollEndNotification: print(&quot;滚动停止&quot;); break;case OverscrollNotification: print(&quot;滚动到边界&quot;); break;}</code></pre></li></ul></li><li><code>onNotification</code> 回调为通知处理回调，他的返回值时布尔类型（bool），当返回值为 true 时，阻止冒泡，其父级 Widget 将再也收不到该通知；当返回值为 false 时继续向上冒泡通知。</li></ul><h3 id="header-42">ScrollController VS. NotificationListener</h3><ol><li>ScrollController 可以控制滚动控件的滚动，而 NotificationListener 是不可以的。</li><li>通过 NotificationListener 可以在从可滚动组件到widget树根之间任意位置都能监听，而ScrollController只能和具体的可滚动组件关联后才可以。</li><li>收到滚动事件后获得的信息不同；NotificationListener在收到滚动事件时，通知中会携带当前滚动位置和ViewPort的一些信息，而ScrollController只能获取当前滚动位置</li></ol><h3 id="header-43">ScrollPhysics</h3><p><a href="https://zhuanlan.zhihu.com/p/84716922" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/84716922</a></p><p>确定可滚动控件的物理特性</p><ul><li>BouncingScrollPhysics ：允许滚动超出边界，但之后内容会反弹回来。</li><li>ClampingScrollPhysics ： 防止滚动超出边界，夹住 。</li><li>AlwaysScrollableScrollPhysics ：始终响应用户的滚动。</li><li>NeverScrollableScrollPhysics ：不响应用户的滚动。</li></ul><p><strong> Sample: </strong></p><pre><code class="lang-js">CustomScrollView(    // ...     physics: const BouncingScrollPhysics());ListView.builder(     // ...     physics: const AlwaysScrollableScrollPhysics());GridView.count(     // ...     physics: NeverScrollableScrollPhysics());</code></pre><p>应用：两个滚动列表嵌套，设置NeverScrollableScrollPhysics让内部滚动失效，依赖外部的滚动</p><pre><code class="lang-java">_buildItems(value){    return ListView.builder(      itemCount: value.activityItems.length+1,      shrinkWrap: true, // 父视图的大小跟随子组件的内容大小 for solve: Error: Flutter Horizontal viewport was given unbounded height.width. (或固定父容器高度. 或用Expanded/Flexible包裹，把剩余空间全部占掉)      physics: new NeverScrollableScrollPhysics(),      itemBuilder:  (ctx,index){        if(index==value.activityItems.length){          return _buildEndInfo(value);        }        return _buildActivity(value.activityItems[index]);      }    );  }</code></pre><h3 id="header-44">应用：ListView滑动到底部自动加载更多</h3><pre><code class="lang-python">ScrollController _scrollController = new ScrollController();@overridevoid initState() {    debugPrint(&quot;-- HomeMovie initState --&quot;);    // TODO: implement initState    super.initState();    _scrollController.addListener(() {      // debugPrint(&quot;_scrollController:${_scrollController.position.pixels}&quot;);      if(_scrollController.position.pixels==_scrollController.position.maxScrollExtent){        debugPrint(&quot;-- HomeMovie Trigger load --&quot;);        widget.homeMovieState.load();      }    });}@overridevoid dispose() {    debugPrint(&quot;-- HomeMovie dispose --&quot;);    _scrollController.dispose();    // TODO: implement dispose    super.dispose();}/// ListView.builder( controller: _scrollController, itemBuilder: (ctx,index){...},...);</code></pre><h3 id="header-45">应用：滚动到指定位置</h3><p>Flutter 滚动距离来设置TabBar的位置，点击TabBar滚动的到指定的位置<a href="https://blog.csdn.net/yujunlong3919/article/details/105107195" target="_blank" rel="external">https://blog.csdn.net/yujunlong3919/article/details/105107195</a></p><p>flutter滚动到列表指定元素<a href="https://chentaoqian.com/?p=613" target="_blank" rel="external">https://chentaoqian.com/?p=613</a></p><ul><li>方案一：使用第三方组件<a href="https://pub.dev/packages/scrollable_positioned_list" target="_blank" rel="external"><code>scrollable_positioned_list</code></a></li><li>方案二：使用 <code>Scrollable.ensureVisible(context)</code> ，该方式不仅能达到效果，还适用于各种尺寸的widget。但这方案也有个问题，就是不能跳转到不可见的组件（non-visible）</li></ul><p><strong> Sample： </strong></p><ul><li>需要被跳转的组件，设置key为<code>GlobalKey()</code>，并在外部存储该key。</li><li>调用<code>Scrollable.ensureVisible(context)</code>，传入的context是上一步key的currentContext。</li></ul><pre><code class="lang-js">class ScrollView extends StatelessWidget {  final dataKey = new GlobalKey();  @override  Widget build(BuildContext context) {    return new Scaffold(      primary: true,      appBar: new AppBar(        title: const Text(&#39;Home&#39;),      ),      body: new SingleChildScrollView(        child: new Column(          children: [            new SizedBox(height: 160.0, width: double.infinity, child: new Card()),            new SizedBox(height: 160.0, width: double.infinity, child: new Card()),            new SizedBox(height: 160.0, width: double.infinity, child: new Card()),            // destination            new Card(              key: dataKey,              child: new Text(&quot;data\n\n\n\n\n\ndata&quot;),            )          ],        ),      ),      bottomNavigationBar: new RaisedButton(        onPressed: () =&gt; Scrollable.ensureVisible(dataKey.currentContext),        child: new Text(&quot;Scroll to data&quot;),      ),    );  }}</code></pre><h2 id="header-46">ScrollView</h2><p><a href="https://www.jianshu.com/p/cf8e92f76bdb" target="_blank" rel="external">https://www.jianshu.com/p/cf8e92f76bdb</a><a href="https://blog.csdn.net/yechaoa/article/details/90701321" target="_blank" rel="external">https://blog.csdn.net/yechaoa/article/details/90701321</a></p><h3 id="header-47">CustomScrollView</h3><pre><code class="lang-java">_buildSliverBody(context) {    return CustomScrollView(      slivers: [        _buildSliverAppBar(),        _buildSliverPanding(),        _buildSliverFillRemaining(),        _buildSliverFillViewport(),         _buildSliverGrid(),        _buildSliverList(),      ],    );  }</code></pre><h3 id="header-48">SliverAppBar</h3><pre><code class="lang-js">_buildSliverAppBar() {    return SliverAppBar(        title: Text(&quot;标题&quot;),        expandedHeight: 180.0,        floating: false,        pinned: true,        snap: false,        flexibleSpace: new FlexibleSpaceBar(          title: new Text(&quot;标题标题标题&quot;),          centerTitle: true,          collapseMode: CollapseMode.pin,        ),        onStretchTrigger:()async{ print(&quot;onStretchTrigger&quot;);return; }    );    return SliverAppBar(      floating: false,      pinned: true,      expandedHeight: 180,      flexibleSpace: FlexibleSpaceBar(        title: Text(          &quot;Silver Demo&quot;,          style: TextStyle(letterSpacing: 3, fontWeight: FontWeight.w400),        ),        background: Image.network(            &quot;https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1549239440,280119214&amp;fm=26&amp;gp=0.jpg&quot;,            fit: BoxFit.cover),      ),    );  }</code></pre><h3 id="header-49">SliverList</h3><pre><code class="lang-js">_buildSliverList() {    return SliverFixedExtentList(      itemExtent: 40.0,      delegate: SliverChildBuilderDelegate(        (BuildContext context, int index) {          return Card(            child: Container(              alignment: Alignment.center,              color: Colors.primaries[(index % 18)],              child: Text(&#39;&#39;),            ),          );        },      ),    );  }</code></pre><h3 id="header-50">SliverGrid</h3><pre><code class="lang-js">_buildSliverGrid() {    return SliverGrid(      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(        crossAxisCount: 3,        childAspectRatio: 2.0,        mainAxisSpacing: 10,        crossAxisSpacing: 10,      ),      ///子Item构建器      delegate: new SliverChildBuilderDelegate(        (BuildContext context, num index) {          ///每一个子Item的样式          return Container(            color: Colors.blue,            child: Text(&quot;grid $index&quot;),          );        },        ///子Item的个数        childCount: 30,      ),    );  }</code></pre><h3 id="header-51">SliverToBoxAdapter</h3><p>在CustomScrollView 中是只能使用Sliver系的控件,如果在CustomScrollView 中想要嵌套其他非 Sliver 系就必须要使用SliverToBoxAdapter包装一下</p><pre><code class="lang-java">_buildSliverPanding() {    return SliverPadding(        padding: EdgeInsets.all(8),        sliver: SliverToBoxAdapter(          child: Container(            height: 40,            color: Colors.grey,            child: Text(&quot;SliverPadding &amp; SliverToBoxAdapter&quot;),          ),        ));  }</code></pre><h3 id="header-52">SliverFillRemaining</h3><pre><code class="lang-java"> _buildSliverFillRemaining() {    return SliverFillRemaining(      child: Container(        height: 40,        color: Colors.lightBlue,        child: Text(&quot;SliverFillRemaining&quot;),      ),    );  }</code></pre><h3 id="header-53">SliverFillViewport</h3><pre><code class="lang-java">_buildSliverFillViewport() {    return SliverFillViewport(        viewportFraction: 1.0,        delegate: SliverChildBuilderDelegate(            (_, index) =&gt; Container(                margin: EdgeInsets.all(8),                child: Text(&#39;Item $index&#39;),                alignment: Alignment.center,                color: Colors.indigoAccent),            childCount: 10));  }</code></pre><h3 id="header-54">NestedScrollView</h3><p><a href="https://segmentfault.com/a/1190000022575678" target="_blank" rel="external">https://segmentfault.com/a/1190000022575678</a></p><pre><code class="lang-java">_buidBody() {    return NestedScrollView(      headerSliverBuilder: (_,innerBoxIsScrolled){        return [          SliverToBoxAdapter(child: _buildPlayPanel(),),          SliverAppBar(            automaticallyImplyLeading: false,            elevation: 0,            floating: true,            pinned: true,            title: _buildTabBar()          ),        ];      },       body: _buildTabView()    );  }</code></pre><h3 id="header-55">NestedScrollView 滚动问题</h3><p>Flutter 里 NestedScrollView body 嵌套滚动的问题<a href="https://www.v2ex.com/t/655844" target="_blank" rel="external">https://www.v2ex.com/t/655844</a><a href="http://codingdict.com/questions/97543" target="_blank" rel="external">http://codingdict.com/questions/97543</a></p><p>在子组件里控制父级组件的滚动 =&gt;  但“会导致头部滚动折叠的很快”，不推荐！</p><pre><code class="lang-python">_scrollController = ScrollController();_scrollController.addListener((){  var innerPos      = _scrollController.position.pixels;  var maxOuterPos   = widget.parentController.position.maxScrollExtent;  var currentOutPos = widget.parentController.position.pixels;  if(innerPos &gt;= 0 &amp;&amp; currentOutPos &lt; maxOuterPos) {    //widget.parentController.position.jumpTo(innerPos+currentOutPos);    widget.parentController.position.animateTo(innerPos+currentOuterPos,       duration: Duration(seconds:1), curve: Curves.easeOut);  }else{    var currenParentPos = innerPos + currentOutPos;    widget.parentController.position.jumpTo(currenParentPos);  }});widget.parentController.addListener((){  var currentOutPos = widget.parentController.position.pixels;  if(currentOutPos &lt;= 0) {    _scrollController.position.jumpTo(0);  }});</code></pre><h2 id="header-56">异常处理</h2><p>Flutter Exception降到万分之几的秘密<a href="https://zhuanlan.zhihu.com/p/53443293" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/53443293</a></p><p><a href="https://blog.csdn.net/wangfeijn/article/details/90033008" target="_blank" rel="external">https://blog.csdn.net/wangfeijn/article/details/90033008</a><a href="https://segmentfault.com/a/1190000022280728" target="_blank" rel="external">https://segmentfault.com/a/1190000022280728</a><a href="https://ducafecat.tech/2020/06/05/flutter-project/flutter-project-news-12-error-sentry/" target="_blank" rel="external">https://ducafecat.tech/2020/06/05/flutter-project/flutter-project-news-12-error-sentry/</a></p><p>捕捉异常</p><ul><li>同步异常捕捉 =&gt; 通过<code>try/catch/finally</code>即可</li><li>异步异常捕捉 =&gt; 通过<code>runZonedGuarded(...)</code>方法，指定一个代码执行的环境空间</li></ul><p>异常：</p><ul><li>Dart异常</li><li>Flutter异常</li></ul><p>异常处理：</p><ul><li><code>try/catch/finally</code>: catch sync dart error.</li><li><code>runZonedGuarded</code>: catch uncatched dart error.</li><li><code>FlutterError.onError = (FlutterErrorDetails details) async {};</code>: catch flutter error when working in release mode.</li><li><code>ErrorWidget.builder=(FlutterErrorDetails details){};</code> : a widget show flutter error when working in debug mode.</li></ul><p><strong> Sample: </strong></p><ol><li><p>main.dart:</p><pre><code class="lang-java"> import &#39;dart:async&#39;; import &#39;package:five_demo/pages/app/app_page.dart&#39;; import &#39;package:five_demo/utils/log_utils.dart&#39;; import &#39;package:flutter/material.dart&#39;; import &#39;global/global.dart&#39;; // void main() { //   runApp(MyApp()); // } void main() async {   // catch uncatched dart error   runZonedGuarded(() async {     Global.init().then((value) {       // runApp(Global.wrapGlobalProviders(MyApp()));       runApp(AppPage());     });   }, (error,stack)=&gt;LogUtils.error(&quot;$error \n $stack&quot;)); }</code></pre></li><li><p>log_utils.dart:</p><pre><code class="lang-java"> import &#39;dart:async&#39;; import &#39;package:flutter/material.dart&#39;; class LogUtils{   static info(Object object){     print(&quot;=== INFO === : $object&quot;);   }   static error(Object object){     print(&quot;=================== ERROR Begin&quot;);     print(object);     print(&quot;=================== ERROR End&quot;);   }   // 是否开发环境   static bool get isInDebugMode {     bool isRelease = bool.fromEnvironment(&quot;dart.vm.product&quot;);     return !isRelease;   }   /// Note: debug mode doesn&#39;t work, work in release mode !   static setFlutterErrorHandlerOnRelease(){     FlutterError.onError = (FlutterErrorDetails details) async {       print(&quot;=================== CAUGHT FLUTTER ERROR&quot;);       if (isInDebugMode == true) {         FlutterError.dumpErrorToConsole(details);       } else {         Zone.current.handleUncaughtError(details.exception, details.stack);       }     };   }   /// Note: only show in debug mode ,won&#39;t show in release mode !   static setFlutterErrorWidgetOnDebug(){     ErrorWidget.builder=(FlutterErrorDetails details){       print(&quot;=================== BUILD ERROR WIDGET&quot;);       print(details.toString());       return SingleChildScrollView(         // decoration: BoxDecoration(         //   image: DecorationImage(         //     image: new AssetImage(&quot;assets/images/default/empty.png&quot;),         //   )         // ),         child: Column(           mainAxisAlignment: MainAxisAlignment.spaceAround,           children:[             Text(&quot;Exception!&quot;,style: TextStyle(color: Colors.red,fontSize: 26),),             // Image.network(             //   &#39;https://dss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1671659209,570778771&amp;fm=26&amp;gp=0.jpg&#39;),             Text(&quot;${details.exception}&quot;,style: TextStyle(color:Colors.red,fontSize: 18),textDirection: TextDirection.ltr,)             ]         ),       );     };   } }</code></pre></li><li><p>global.dart</p><pre><code class="lang-java"> class Global{   static Future init() async {     LogUtils.info(&quot;[Global] init() start&quot;);     WidgetsFlutterBinding.ensureInitialized();     LogUtils.info(&quot;[Global] set FlutterErrorHander&quot;);     LogUtils.setFlutterErrorWidgetOnDebug();     LogUtils.setFlutterErrorHandlerOnRelease();     // ...   } }</code></pre></li></ol><h3 id="header-57">Flutter项目IOS真机部署及问题</h3><p>flutter build ios --releaseflutter run --release</p><p>Xcode:</p><p><a href="https://www.jianshu.com/p/69e1efc2fc55" target="_blank" rel="external">https://www.jianshu.com/p/69e1efc2fc55</a><a href="http://www.cocoachina.com/articles/475845" target="_blank" rel="external">http://www.cocoachina.com/articles/475845</a><a href="https://www.codingsky.com/doc/flutter/ios-release-build.html" target="_blank" rel="external">https://www.codingsky.com/doc/flutter/ios-release-build.html</a></p><ol><li>在Xcode中, 在你的工程目录中的ios文件夹下打开Runner.xcworkspace.</li><li>要查看您的应用程序的设置，请在Xcode项目导航器中选择Runner项目。然后，在主视图边栏中，选择Runnertarget</li><li>选择 General 选项卡.</li></ol><p>在 Identity 部分:</p><ul><li>Display Name: 要在主屏幕和其他地方显示的应用程序的名称</li><li>Bundle Identifier: 您在iTunes Connect上注册的App ID.</li></ul><p>在 Signing 部分:</p><ul><li>Automatically manage signing: Xcode是否应该自动管理应用程序签名和生成。默认设置为true，对大多数应用程序来说应该足够了。对于更复杂的场景，请参阅Code Signing Guide。</li><li>Team: 选择与您注册的Apple Developer帐户关联的团队。如果需要，请选择Add Account...，然后更新此设置</li></ul><h2 id="header-58">TextField &amp; Keyboard</h2><h3 id="header-59">TextField</h3><p>Flutter 基础组件：输入框和表单<a href="https://www.cnblogs.com/parzulpan/p/12066691.html" target="_blank" rel="external">https://www.cnblogs.com/parzulpan/p/12066691.html</a></p><p>Flutter TextField详解<a href="https://blog.csdn.net/yechaoa/article/details/90906689" target="_blank" rel="external">https://blog.csdn.net/yechaoa/article/details/90906689</a></p><p>Flutter 实现一个登录界面<a href="http://www.cocoachina.com/articles/29529?filter=rec" target="_blank" rel="external">http://www.cocoachina.com/articles/29529?filter=rec</a></p><p>Flutter监听TextField焦点事件，点击与清除焦点<a href="https://www.uedbox.com/post/65066/" target="_blank" rel="external">https://www.uedbox.com/post/65066/</a></p><p>Flutter Form、TextFormField及表单验证、表单输入框聚焦<a href="http://www.ptbird.cn/flutter-form-textformfield.html" target="_blank" rel="external">http://www.ptbird.cn/flutter-form-textformfield.html</a></p><h3 id="header-60">键盘弹起/隐藏问题</h3><p>Flutter底部弹出TextField评论输入框并且自适应高度<a href="https://www.jianshu.com/p/09ae2b6995e7?utm_campaign=haruki" target="_blank" rel="external">https://www.jianshu.com/p/09ae2b6995e7?utm_campaign=haruki</a></p><p>flutter中关于软键盘弹起导致的问题<a href="https://www.jianshu.com/p/4dab8a87f28b" target="_blank" rel="external">https://www.jianshu.com/p/4dab8a87f28b</a></p><ol><li>当布局高度写死时，例如设置为屏幕高度，这时候键盘弹起页面上会出现布局overflow的提示</li><li>软键盘弹起后遮挡输入框=&gt; 原因：在flutter中，键盘弹起时系统会缩小Scaffold的高度并重建</li></ol><p>解决问题1中overflow提示的两种办法：</p><ol><li>把Scaffold的<code>resizeToAvoidBottomInset</code>属性设置为<code>false</code>，这样在键盘弹出时将不会resize</li><li>把写死的高度改为 <code>原高度 - MediaQuery.of(context).viewInsets.bottom</code>，键盘弹出时布局将重建，而这个<code>MediaQuery.of(context).viewInsets.bottom</code>变量在键盘弹出前是0，键盘弹起后的就是键盘的高度</li></ol><p>解决问题2的办法：</p><ul><li>将输入框放进可滚动的Widget中即可，当输入框获取焦点后，系统会自动将它滑动到可视区域</li></ul><p>flutter TextField 输入框被软键盘挡住的解决方案<a href="https://www.cnblogs.com/tianmiaogongzuoshi/p/11181782.html" target="_blank" rel="external">https://www.cnblogs.com/tianmiaogongzuoshi/p/11181782.html</a></p><p>页面元素的最外层肯定得嵌套一层<code>SingleChildScrollView</code>（<code>SingleChildScrollView</code> 元素内部不能和 Expanded 的flex 直接填充，会冲突）</p><pre><code class="lang-java">body: Container(         //SingleChildScrollView 的父级元素得有高度  最外层Container默认 填充全部        child: SingleChildScrollView(        ........    )</code></pre><p>flutter中如何监听键盘弹出关闭<a href="https://segmentfault.com/a/1190000022495736" target="_blank" rel="external">https://segmentfault.com/a/1190000022495736</a></p><p>Flutter showModalBottomSheet &amp; Textfield 制作底部评论框并解决bug<a href="https://juejin.cn/post/6844903846645334023" target="_blank" rel="external">https://juejin.cn/post/6844903846645334023</a></p><p>Flutter 弹出键盘认识<a href="https://juejin.cn/post/6844903749362647048" target="_blank" rel="external">https://juejin.cn/post/6844903749362647048</a></p><p>TextField, 全局点击空白处隐藏键盘<a href="https://my.oschina.net/u/4082303/blog/4543122?utm_source=osc_group_android" target="_blank" rel="external">https://my.oschina.net/u/4082303/blog/4543122?utm_source=osc_group_android</a>为 TextField 添加 <code>focusNode</code>，点击空白处时使 TextField 失去焦点</p><p><code>FocusScope.of(context).requestFocus(new FocusNode());</code></p><pre><code class="lang-js">class DismissKeyboardDemo extends StatelessWidget {  final FocusNode focusNode = FocusNode();  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(),      body: GestureDetector(        onTap: () {          focusNode.unfocus();        },        child: Container(          color: Colors.transparent,          alignment: Alignment.center,          child: TextField(            focusNode: focusNode,          ),        ),      ),    );  }}</code></pre><p>当 App 中有多个页面多个 TextField 时，此方式会增加大量重复的代码，因此全局添加点击空白处的监听：</p><pre><code class="lang-js">onTap: () {    FocusScopeNode currentFocus = FocusScope.of(context);    if (!currentFocus.hasPrimaryFocus &amp;&amp;        currentFocus.focusedChild != null) {      FocusManager.instance.primaryFocus.unfocus();    }},</code></pre><p>也可以使用如下方式隐藏键盘：</p><p><code>SystemChannels.textInput.invokeMethod(&#39;TextInput.hide&#39;);</code></p><h2 id="header-61">状态管理</h2><p>MVC、MVP、BloC、Redux四种架构在Flutter上的尝试<a href="https://www.jianshu.com/p/ba3414457419" target="_blank" rel="external">https://www.jianshu.com/p/ba3414457419</a></p><p>Flutter State Management状态管理全面分析<a href="https://www.jianshu.com/p/9334b8f68004" target="_blank" rel="external">https://www.jianshu.com/p/9334b8f68004</a></p><ul><li>构建 <code>StatefulWidget</code>  -&gt; <code>setState</code> 自身组件动态维护</li><li>包裹 <code>Provider</code>（<code>InheritedWidget</code>）-&gt; 与其他组件交互</li><li>使用 <code>Bloc</code> (<code>Stream</code>) -&gt; 与多个监听组件同步信息</li></ul><h3 id="header-62">Bloc</h3><p><a href="https://www.jianshu.com/p/4d5e712594b4" target="_blank" rel="external">https://www.jianshu.com/p/4d5e712594b4</a><a href="https://www.jianshu.com/p/e31e8268d2cd" target="_blank" rel="external">https://www.jianshu.com/p/e31e8268d2cd</a></p><p>pubspec.yaml</p><pre><code class="lang-yaml">dependencies:  # bloc  flutter_bloc: ^6.1.1</code></pre><ol><li><p>counter_page.dart</p><pre><code class="lang-java"> import &#39;package:flutter/material.dart&#39;; import &#39;package:flutter_bloc/flutter_bloc.dart&#39;; import &#39;package:third_app/pages/counter/counter_event.dart&#39;; import &#39;counter_bloc.dart&#39;; class CounterPage extends StatelessWidget {   CounterPage({Key key}) : super(key: key);   @override   Widget build(BuildContext context) {     return Container(         child: BlocProvider&lt;CounterBloc&gt;(             create: (context) =&gt; CounterBloc(0),             // child: BlocBuilder&lt;CounterBloc, int&gt;(             //   builder: (context, state) =&gt;             //       _buildContent(context.watch&lt;CounterBloc&gt;(), state),             // )             child: BlocListener&lt;CounterBloc,int&gt;(               listener:(context,state)=&gt;print(&quot;state:$state&quot;),               child:BlocBuilder&lt;CounterBloc, int&gt;(                   builder: (context, state) =&gt;                       _buildContent(context.watch&lt;CounterBloc&gt;(),state),                 )             ),           )         );   }   _buildContent(CounterBloc bloc, int state) {     return Row(       mainAxisAlignment: MainAxisAlignment.spaceEvenly,       children: [         Text(&quot;Count:$state&quot;),         OutlineButton(             onPressed: () =&gt; bloc.add(CounterEvent.increment),             child: Text(&quot;Add&quot;)),         OutlineButton(             onPressed: () =&gt; bloc.add(CounterEvent.decrement),             child: Text(&quot;Sub&quot;)),       ],     );   } }</code></pre></li><li><p>counter_bloc.dart</p><pre><code class="lang-java"> import &#39;package:flutter_bloc/flutter_bloc.dart&#39;; import &#39;package:third_app/pages/counter/counter_event.dart&#39;; class CounterBloc extends Bloc&lt;CounterEvent,int&gt;{   CounterBloc(int initialState) : super(initialState);   @override   Stream&lt;int&gt; mapEventToState(CounterEvent event) async * {     switch(event){       case CounterEvent.decrement:         yield state-1;         break;       case CounterEvent.increment:         yield state+1;         break;       default:         throw Exception(&#39;oops&#39;);     }   } }</code></pre></li><li><p>counter_event.dart</p><pre><code class="lang-java"> enum CounterEvent {    increment,    decrement  }</code></pre></li></ol><h3 id="header-63">Provider</h3><p>Provider组件</p><p>pubspec.yaml</p><pre><code class="lang-yaml">dependencies:  # 状态管理  provider: ^4.3.2+2</code></pre><p><a href="https://www.jianshu.com/p/a87ebd2d3296" target="_blank" rel="external">https://www.jianshu.com/p/a87ebd2d3296</a><a href="http://www.cainiaoxueyuan.com/xcx/13599.html" target="_blank" rel="external">http://www.cainiaoxueyuan.com/xcx/13599.html</a><a href="https://www.cnblogs.com/crazycode2/p/11407967.html" target="_blank" rel="external">https://www.cnblogs.com/crazycode2/p/11407967.html</a><a href="https://www.jianshu.com/p/bf2f33b2b5ef" target="_blank" rel="external">https://www.jianshu.com/p/bf2f33b2b5ef</a><a href="https://cloud.tencent.com/developer/article/1485323" target="_blank" rel="external">https://cloud.tencent.com/developer/article/1485323</a></p><ul><li>注入/创建： <code>Provider.value</code> / <code>Provider.create</code> =&gt; 推荐create（在销毁时自动调用<code>ChangeNotifier</code>中的<code>dispose()</code>方法释放一些资源）</li><li>获取：<code>context.read</code> / <code>context.watch</code><ul><li>read 在Provider的build method / update callback 中使用，不会导致重构(等于 <code>Provider.of&lt;T&gt;(this, listen: false);</code>）</li><li>watch 会导致重构</li></ul></li><li>获取：<code>provider.of(context)</code> 所在子widget不管是否是const都被重建后刷新数据 =&gt; 将会把调用了该方法的<code>context</code>作为听众，并在 <code>notifyListeners</code> 的时候通知其刷新。</li><li>监听改变：组件被<code>Consumer</code>,<code>Select</code> 包裹，监听到T改变，会重新构建 =&gt; 极大地缩小你的控件刷新范围(可使用<code>Selector</code>达到更精细地控制,eg: 在list的长度发生改变时才会重新渲染，其内部元素改变时并不会触发重绘)<ul><li>Consumer做了什么: 从先祖获取Provider<t>然后传递给builder出的组件，本来代代相承的传家宝直接通过Consumer隔代传送</t></li><li>Consumer 使用了 Builder模式，收到更新通知就会通过 builder 重新构建</li><li>Consumer 的 builder 实际上就是一个 Function，它接收三个参数 <code>(BuildContext context, T model, Widget child)</code><ul><li>context： context 就是 build 方法传进来的 BuildContext</li><li>T: 就是获取到的最近一个祖先节点中的数据模型。</li><li>child：它用来构建那些与 Model 无关的部分，在多次运行 builder 中，child 不会进行重建。</li></ul></li><li>Consumer<t> 代表了它要获取哪一个祖先中的 Model</t></li><li>Consumer 的内部实现<pre><code class="lang-js">  @override    Widget build(BuildContext context) {      return builder(        context,        Provider.of&lt;T&gt;(context),        child,      );    }</code></pre></li></ul></li></ul><ul><li><code>Provider</code> 最基础的provider,它会获取一个值并将它暴露出来</li><li><code>ListenableProvider</code> 用来暴露可监听的对象，该provider将会监听对象的改变以便及时更新组件状态</li><li><code>ChangeNotifierProvider</code></li><li><code>ListerableProvider</code> 依托于ChangeNotifier的一个实现，它将会在需要的时候自动调用ChangeNotifier.dispose方法</li><li><code>ValueListenableProvider</code> 监听一个可被监听的值，并且只暴露ValueListenable.value方法</li><li><code>StreamProvider</code> 监听一个流，并且暴露出其最近发送的值</li><li><code>FutureProvider</code> 接受一个Future作为参数，在这个Future完成的时候更新依赖</li><li><code>ProxyProvider</code> 能够将不同provider中的多个值整合成一个对象，并将其发送给外层provider，当所依赖的多个provider中的任意一个发生变化时，这个新的对象都会更新</li></ul><h3 id="header-64">Consumer</h3><p>使用目的：</p><ol><li><p>当没有BuildContext时可以使用Consumer</p><pre><code class="lang-js"> @override // ERROR：ProviderNotFoundError 因为该context中并没有Provider Widget build(BuildContext context) {   return ChangeNotifierProvider(     builder: (_) =&gt; Foo(),     child: Text(Provider.of&lt;Foo&gt;(context).value),   ); } @override // OK  Widget build(BuildContext context) {   return ChangeNotifierProvider(     builder: (_) =&gt; Foo(),     child: Consumer&lt;Foo&gt;(       builder: (_, foo, __) =&gt; Text(foo.value),     },   ); }</code></pre></li><li><p>它通过更细粒度的重构来帮助性能优化。</p><pre><code class="lang-js"> class RedBox extends StatelessWidget {   @override   Widget build(BuildContext context) {     print(&quot;---------RedBox---------build---------&quot;);     return Container(       color: Colors.red,       width: 150,       height: 150,       alignment: Alignment.center,       child: Consumer&lt;CountState&gt;(builder: (ctx,state,child){         print(&quot;---------RedBox----Consumer-----build---------&quot;);         return Text(&quot;Red:${state.count}&quot;,             style: TextStyle(fontSize: 20),);       }),     );   } }</code></pre></li></ol><p><strong> Consumer 源码 </strong></p><pre><code class="lang-js">class Consumer&lt;T&gt; extends SingleChildStatelessWidget {  /// {@template provider.consumer.constructor}  /// Consumes a [Provider&lt;T&gt;]  /// {@endtemplate}  Consumer({    Key key,    @required this.builder,    Widget child,  })  : assert(builder != null),        super(key: key, child: child);  /// {@template provider.consumer.builder}  /// Build a widget tree based on the value from a [Provider&lt;T&gt;].  ///  /// Must not be `null`.  /// {@endtemplate}  final Widget Function(BuildContext context, T value, Widget child) builder;  @override  Widget buildWithChild(BuildContext context, Widget child) {    return builder(      context,      Provider.of&lt;T&gt;(context),      child,    );  }}</code></pre><p>注：传入的context是谁的BuildContext？ 每个Widget都有属于自己的元素Element，在该Element进行mount的时候回将自身化作美丽的天使(Context)传入组件或State的build方法中来供你使用</p><h3 id="header-65">FutureBuilder &amp; StreamBuilder</h3><p><a href="https://book.flutterchina.club/chapter7/futurebuilder_and_streambuilder.html" target="_blank" rel="external">https://book.flutterchina.club/chapter7/futurebuilder_and_streambuilder.html</a></p><pre><code class="lang-java">FutureBuilder({  this.future,  this.initialData,  @required this.builder,       // Function (BuildContext context, AsyncSnapshot snapshot) snapshot 包含当前异步任务的状态信息及结果信息})</code></pre><pre><code class="lang-java">StreamBuilder({  Key key,  this.initialData,  Stream&lt;T&gt; stream,  @required this.builder,})</code></pre><p><code>snapshot.hasError</code>判断异步任务是否有错误<code>snapshot.connectionState</code> 获取异步任务的状态信息</p><pre><code class="lang-java">enum ConnectionState {  /// 当前没有异步任务，比如[FutureBuilder]的[future]为null时  none,  /// 异步任务处于等待状态  waiting,  /// Stream处于激活状态（流上已经有数据传递了），对于FutureBuilder没有该状态。  active,  /// 异步任务已经终止.  done,}</code></pre><h3 id="header-66">MVVM</h3><p>Flutter 实践 MVVM<a href="https://cloud.tencent.com/developer/article/1372224" target="_blank" rel="external">https://cloud.tencent.com/developer/article/1372224</a></p><ul><li>Model: MovieItem</li><li>View: MovieView</li><li>ViewModel: MovieState</li></ul><h2 id="header-67">应用</h2><h3 id="header-68">获取某个控件的坐标</h3><p><a href="https://blog.csdn.net/baidu_34120295/article/details/86495861" target="_blank" rel="external">https://blog.csdn.net/baidu_34120295/article/details/86495861</a></p><p>1.首先先需要对控件进行渲染</p><p>初始化GlobalKey ：<code>GlobalKey anchorKey = GlobalKey();</code></p><p>2.在需要测量的控件的下面添加key：</p><pre><code>child: Text(&quot;点击弹出悬浮窗&quot;,  style: TextStyle(fontSize: 20),  key: anchorKey),</code></pre><p>3.获取控件的坐标：</p><pre><code>RenderBox renderBox = anchorKey.currentContext.findRenderObject();var offset =  renderBox.localToGlobal(Offset.zero);</code></pre><p>控件的横坐标：<code>offset.dx</code></p><p>控件的纵坐标：<code>offset.dy</code></p><p>如果想获得控件正下方的坐标：</p><pre><code>RenderBox renderBox = anchorKey.currentContext.findRenderObject();var offset =  renderBox.localToGlobal(Offset(0.0, renderBox.size.height));</code></pre><p>控件下方的横坐标：<code>offset.dx</code></p><p>控件下方的纵坐标：<code>offset.dy</code></p><h3 id="header-69">隐藏和显示widget</h3><p><a href="https://www.cnblogs.com/pjl43/p/9615685.html" target="_blank" rel="external">https://www.cnblogs.com/pjl43/p/9615685.html</a></p><p>通常情况下，显示有四种情况：</p><p>1.（visible)显示2.（invisible)隐藏：这种隐藏是指在屏幕中占据空间，只是没有显示。这种情况出现场景如：用带有背景色的Container Widget去包含一个不可见的Image，当从网络中加载图片后才让它显示，这是为了避免图片显示后让页面布局改变发生跳动。3.（Offscreen)超出屏幕，同样占据空间4.（Gone)消失：这种是指Widget没有被rendered，不存在于wedget tree中</p><h3 id="header-70">透明渐变 AppBar</h3><p><a href="https://blog.csdn.net/u012109585/article/details/108127209" target="_blank" rel="external">https://blog.csdn.net/u012109585/article/details/108127209</a></p><p>Flutter之自定义AppBar并实现滑动渐变<a href="https://blog.csdn.net/u013600907/article/details/101456290" target="_blank" rel="external">https://blog.csdn.net/u013600907/article/details/101456290</a><a href="https://www.jianshu.com/p/6fe2e74d35bf" target="_blank" rel="external">https://www.jianshu.com/p/6fe2e74d35bf</a></p><p>用到了NotificationListener这个widget，借助这个widget可以监听滚动的高度。appBar则使用自定义widget实现，给外层嵌套一个opacity组件，通过滚动监听高度变化然后改变appBar透明度即可。</p><p>scrollNotification.depth 的值 0 表示其子组件(只监听子组件，不监听孙组件)；scrollNotification is ScrollUpdateNotification 来判断组件是否已更新，ScrollUpdateNotification 是 notifications 的生命周期一种情况，分别有一下几种：</p><ul><li>ScrollStartNotification 组件开始滚动</li><li>ScrollUpdateNotification 组件位置已经发生改变</li><li>ScrollEndNotification 组件停止滚动</li><li>UserScrollNotification 不清楚</li></ul><pre><code class="lang-python">NotificationListener(  onNotification: (scrollNotification) {  if (scrollNotification is ScrollUpdateNotification &amp;&amp; scrollNotification.depth==0) {       _onScroll(scrollNotification.metrics.pixels);    }}</code></pre><p>判断条件里的ScrollUpdateNotification是指widget组件位置发生改变才会执行相应的逻辑</p><pre><code class="lang-js">_onScroll (offset) {    double alpha = offset / APPBAE_SCROLL_OFFSET; // APPBAE_SCROLL_OFFSET为appBar高度    if (alpha &lt; 0) {      // alpha = 0;      return ;    } else if (alpha &gt; 1) {      // alpha = 1;      return ;    }    setState(() {      alphaAppBar = alpha;    })；  }</code></pre><p>ScrollController / NotificationListener<a href="https://www.jianshu.com/p/b0b1c6308674" target="_blank" rel="external">https://www.jianshu.com/p/b0b1c6308674</a></p><p>=&gt; 内容如果过多的话，你这种写法会造成页面的严重卡顿?</p><h3 id="header-71">LayoutBuilder</h3><p>通过LayoutBuilder组件可以获取父组件的约束尺寸eg: 根据组件的大小确认组件的外观，比如竖屏的时候上下展示，横屏的时候左右展示，</p><p>Flutter如何检查Sliver AppBar是否展开或折叠？<a href="https://www.javaroad.cn/questions/81420" target="_blank" rel="external">https://www.javaroad.cn/questions/81420</a></p><pre><code class="lang-js">_buildSliverToBoxAdapter(){    return SliverToBoxAdapter(      child:Container(        height: 30,         // 当设置父组件的宽高大于100时显示蓝色，小于100时显示红色。        child: _buildLayoutBuilder()      ),    );  }</code></pre><pre><code class="lang-java">  _buildLayoutBuilder(){    return LayoutBuilder(      builder: (BuildContext context, BoxConstraints constraints) {        var color = Colors.red;        debugPrint(&quot;$constraints&quot;);        if (constraints.maxHeight &gt; 100) {          color = Colors.blue;        }        return Container(          height: 30,          width: 50,          color: color,        );      },    );  }</code></pre><h3 id="header-72">Json处理</h3><ol><li><code>json_serializable: ^3.5.0</code></li><li><p>person.dart</p><pre><code class="lang-js"> import &#39;package:json_annotation/json_annotation.dart&#39;; part &quot;person.g.dart&quot;; @JsonSerializable(nullable: false) class Person {   final String firstName;   final String lastName;   final DateTime dateOfBirth;   Person({this.firstName, this.lastName, this.dateOfBirth});   factory Person.fromJson(Map&lt;String, dynamic&gt; json) =&gt; _$PersonFromJson(json);   Map&lt;String, dynamic&gt; toJson() =&gt; _$PersonToJson(this); }</code></pre></li><li><p>cmd: <code>flutter packages pub run build_runner build</code>  =&gt; generate <code>person.g.dart</code></p><pre><code class="lang-js"> import &#39;package:json_annotation/json_annotation.dart&#39;; part &quot;person.g.dart&quot;; @JsonSerializable(nullable: false) class Person {   final String firstName;   final String lastName;   final DateTime dateOfBirth;   Person({this.firstName, this.lastName, this.dateOfBirth});   factory Person.fromJson(Map&lt;String, dynamic&gt; json) =&gt; _$PersonFromJson(json);   Map&lt;String, dynamic&gt; toJson() =&gt; _$PersonToJson(this); }</code></pre></li></ol><p>或使用 json to code 工具（根据json生成dart code）： <a href="https://app.quicktype.io/" target="_blank" rel="external">https://app.quicktype.io/</a></p><p>或使用vscode 插件 Paste JSON as Code</p><h3 id="header-73">ios不受信任的应用开发者如何设置</h3><p><a href="https://jingyan.baidu.com/article/574c52196f55486c8d9dc106.html" target="_blank" rel="external">https://jingyan.baidu.com/article/574c52196f55486c8d9dc106.html</a></p><ol><li>打开苹果手机,点击“设置”,进入设置页面;</li><li>进入设置页面后,滑动手机屏幕找到“通用”,点击进入“通用”页面;</li><li>进入通用页面后,滑动手机找到“描述文件与设备管理”,点击进入描述文件与设备管理页面;</li><li>进入描述文件与设备管理页面后,看到“企业级应用”,然后点击进入企业级应用下面的按钮;</li></ol><h2 id="header-74">综合Demo</h2><h3 id="header-75">启动初始化设置</h3><ol><li><p>lib/main.dart:</p><pre><code class="lang-java"> import &#39;dart:async&#39;; import &#39;package:five_demo/pages/app/app_page.dart&#39;; import &#39;package:five_demo/utils/log_utils.dart&#39;; import &#39;package:flutter/material.dart&#39;; import &#39;global/global.dart&#39;; // void main() { //   runApp(MyApp()); // } void main() async {   // catch uncatched dart error   runZonedGuarded(() async {     Global.init().then((value) {       // runApp(Global.wrapGlobalProviders(MyApp()));       runApp(AppPage());     });   }, (error,stack)=&gt;LogUtils.error(&quot;$error \n $stack&quot;)); }</code></pre></li><li><p>lib/global/global.dart</p><pre><code class="lang-java"> import &#39;dart:io&#39;; import &#39;package:five_demo/entities/platform_info.dart&#39;; import &#39;package:five_demo/global/global_configs.dart&#39;; import &#39;package:five_demo/utils/log_utils.dart&#39;; import &#39;package:five_demo/utils/storage_utils.dart&#39;; import &#39;package:flutter/material.dart&#39;; import &#39;package:flutter/services.dart&#39;; class Global{   static bool isFirstOpen;   static PlatformInfo platformInfo;   // static LoginUserInfo loginUserInfo;   // static CheckInInfo checkInInfo;   static Future init() async {     LogUtils.info(&quot;[Global] init() start&quot;);     WidgetsFlutterBinding.ensureInitialized();     LogUtils.info(&quot;[Global] set FlutterErrorHander&quot;);     LogUtils.setFlutterErrorWidgetOnDebug();     LogUtils.setFlutterErrorHandlerOnRelease();     LogUtils.info(&quot;[Global] storage.init() start&quot;);     var storage = StorageUtils();     await storage.init();     LogUtils.info(&quot;[Global] storage.init() end&quot;);     /// isFirstOpen?     isFirstOpen = storage.getBool(GlobalConfigs.Storage_App_First_Open,defalutValue:true);     LogUtils.info(&quot;[Global] isFirstOpen: $isFirstOpen&quot;);     /// do after Welcome Page Loaded:      // if(isFirstOpen){         //   storage.setBool(GlobalConfigs.Storage_App_First_Open, false);     // }     // /// loginUser? =&gt; autoLogin     // Map&lt;String,dynamic&gt; loginUserMap = storage.getMap(GlobalConfigs.Storage_App_Login_User,defalutValue: null);     // if(loginUserMap!=null){     //   loginUserInfo=LoginUserInfo.fromMap(loginUserMap);     //   /// Do auto login and update storage     //   LogUtils.info(&quot;[Global] Trigger autoLogin&quot;);     //   // ...     // }     // LogUtils.info(&quot;[Global] LoginUserInfo: $loginUserInfo&quot;);     /// platformInfo     platformInfo = PlatformInfo(       operatingSystem: Platform.operatingSystem,       operatingSystemVersion: Platform.operatingSystemVersion,       version: Platform.version     );     // android 状态栏为透明的沉浸     if (Platform.isAndroid) {       SystemUiOverlayStyle systemUiOverlayStyle =           SystemUiOverlayStyle(statusBarColor: Colors.transparent);       SystemChrome.setSystemUIOverlayStyle(systemUiOverlayStyle);     }     LogUtils.info(&quot;[Global] PlatformInfo: $platformInfo&quot;);     // ...     // await Future.delayed(Duration(seconds: 1));     LogUtils.info(&quot;[Global] init() end&quot;);   } }</code></pre></li></ol><h3 id="header-76">SharedPreferences本地存储</h3><ol><li><p>pubspec.yaml:</p><pre><code class="lang-yaml"> dependencies:     # 本地存储     shared_preferences: ^0.5.12+4</code></pre></li><li><p>storage_utils.dart:</p><pre><code class="lang-java"> import &#39;dart:convert&#39;; import &#39;package:shared_preferences/shared_preferences.dart&#39;; class StorageUtils{   static final StorageUtils _instance = new StorageUtils._internal();   factory StorageUtils() =&gt; _instance;    // 工厂构造   StorageUtils._internal();               // 命名构造   static SharedPreferences _prefs;   Future&lt;void&gt; init() async {     if (_prefs == null) {       _prefs = await SharedPreferences.getInstance();     }   }   Future&lt;bool&gt; setMap(String key, Map&lt;String,dynamic&gt; map) async {     String jsonStr = jsonEncode(map);     return _prefs.setString(key, jsonStr);   }   Map&lt;String,dynamic&gt; getMap(String key,{Map&lt;String,dynamic&gt; defalutValue}) {     String jsonStr = _prefs.getString(key);     return jsonStr == null ? defalutValue : jsonDecode(jsonStr);   }   Future&lt;bool&gt; setBool(String key, bool val) {     return _prefs.setBool(key, val);   }   bool getBool(String key,{bool defalutValue=false}) {     bool val = _prefs.getBool(key);     return val == null ? defalutValue : val;   }   Future&lt;bool&gt; remove(String key) {     return _prefs.remove(key);   } }</code></pre></li><li><p>使用（global.dart)</p><pre><code class="lang-java"> import &#39;dart:io&#39;; import &#39;package:five_demo/utils/storage_utils.dart&#39;; class Global{   static bool isFirstOpen;   // static LoginUserInfo loginUserInfo;   static Future init() async {     LogUtils.info(&quot;[Global] init() start&quot;);     WidgetsFlutterBinding.ensureInitialized();     var storage = StorageUtils();     await storage.init();     LogUtils.info(&quot;[Global] storage.init() end&quot;);     /// isFirstOpen?     isFirstOpen = storage.getBool(GlobalConfigs.Storage_App_First_Open,defalutValue:true);     LogUtils.info(&quot;[Global] isFirstOpen: $isFirstOpen&quot;);     /// do after Welcome Page Loaded:      // if(isFirstOpen){         //   storage.setBool(GlobalConfigs.Storage_App_First_Open, false);     // }     // /// loginUser? =&gt; autoLogin     // Map&lt;String,dynamic&gt; loginUserMap = storage.getMap(GlobalConfigs.Storage_App_Login_User,defalutValue: null);     // if(loginUserMap!=null){     //   loginUserInfo=LoginUserInfo.fromMap(loginUserMap);     //   /// Do auto login and update storage     //   LogUtils.info(&quot;[Global] Trigger autoLogin&quot;);     //   // ...     // }     // LogUtils.info(&quot;[Global] LoginUserInfo: $loginUserInfo&quot;);     // ...     LogUtils.info(&quot;[Global] init() end&quot;);   } }</code></pre></li></ol><h3 id="header-77">全局状态控制</h3><ul><li>是否第一次使用此app: <code>Global.isFirstOpen?WelcomePage():IndexPage()</code></li><li>是否全局黑灰蒙布: <code>isGreyFilter</code> 使用Provider状态管理 （MVVM模式）</li></ul><p>pubspec.yaml</p><pre><code class="lang-yaml">dependencies:    # 状态管理    provider: ^4.3.2+2</code></pre><ol><li><p>app_page.dart</p><pre><code class="lang-js"> import &#39;package:five_demo/global/global.dart&#39;; import &#39;package:five_demo/global/global_routes.dart&#39;; import &#39;package:five_demo/global/global_themes.dart&#39;; import &#39;package:five_demo/pages/pages.dart&#39;; import &#39;package:five_demo/utils/log_utils.dart&#39;; import &#39;package:flutter/material.dart&#39;; import &#39;package:provider/provider.dart&#39;; import &#39;app_state.dart&#39;; class AppPage extends StatefulWidget {   final AppState appState = AppState.getInstance();   final Map args;   AppPage({Key key,this.args}) : super(key: key);   @override   _AppPageState createState() =&gt; _AppPageState(); } class _AppPageState extends State&lt;AppPage&gt; {   @override   void initState() {     debugPrint(&quot;+++ AppPage.initState() +++&quot;);     super.initState();   }   @override   void dispose() {     debugPrint(&quot;+++ AppPage.dispose() +++&quot;);     super.dispose();   }   @override   Widget build(BuildContext context) {     return MultiProvider(       providers: [         ChangeNotifierProvider&lt;AppState&gt;.value(           value: widget.appState,          ),       ],       child: _selectIsGrey(),     );   }   _selectIsGrey(){     return Selector&lt;AppState,bool&gt;(       selector: (_,appState)=&gt;appState.isGreyFilter,       builder: (_,value,child){         return value? ColorFiltered(           colorFilter: ColorFilter.mode(Colors.white, BlendMode.color),           child: _buildMaterialApp()         ):_buildMaterialApp();       }     );   }   _buildMaterialApp(){     return MaterialApp(       title: &#39;Hey,Dear!&#39;,       theme: GlobalThemes.mainThemeData,       debugShowCheckedModeBanner:LogUtils.isInDebugMode,       onGenerateRoute: GlobalRoutes.router.generator,       home: Global.isFirstOpen?WelcomePage():IndexPage(),     );   } }</code></pre></li><li><p>app_state.dart</p><pre><code class="lang-java"> import &#39;package:flutter/material.dart&#39;; import &#39;package:provider/provider.dart&#39;; class AppState with ChangeNotifier{   static final AppState _instance = AppState._internal();   factory AppState.getInstance(){     debugPrint(&quot;++++ 1. AppState.getInstance() +++&quot;);     return _instance;   }   AppState._internal(){     debugPrint(&quot;++++ 2. AppState._internal() +++&quot;);   }   @override   dispose(){     debugPrint(&quot;++++ 3. AppState.dispose() +++&quot;);     super.dispose();   }   bool _isGreyFilter=false;   /// isGreyFilter 灰色滤镜   get isGreyFilter {     return  _isGreyFilter;   }   set isGreyFilter(String value) {     isGreyFilter = value;     notifyListeners();   }   switchGrayFilter(){     _isGreyFilter=!_isGreyFilter;     notifyListeners();   } }</code></pre></li><li><p>global_themes.dart</p><pre><code class="lang-js"> class GlobalThemes{   static ThemeData mainThemeData= ThemeData(     primaryColor: Colors.white,     visualDensity: VisualDensity.adaptivePlatformDensity,     // 去除水波纹     highlightColor: Colors.transparent,     splashColor:Colors.transparent,   ); }</code></pre></li><li><p>welcome_page.dart</p><pre><code class="lang-js"> import &#39;package:five_demo/global/global_configs.dart&#39;; import &#39;package:five_demo/global/global_routes.dart&#39;; import &#39;package:five_demo/utils/storage_utils.dart&#39;; import &#39;package:flutter/material.dart&#39;; class WelcomePage extends StatelessWidget {   final Map args;   WelcomePage({Key key,this.args}) : super(key: key);   @override   Widget build(BuildContext context) {     return Scaffold(       body: Container(         width: double.infinity,         decoration: BoxDecoration(           image: DecorationImage(             image: new AssetImage(&quot;assets/images/default/记录.png&quot;),           )         ),         child: Column(           mainAxisAlignment: MainAxisAlignment.spaceAround,           children:[             _buildTitle(context),             // Image.network(&quot;https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3103964819,2015218737&amp;fm=26&amp;gp=0.jpg&quot;),             // Image.asset(&quot;assets/images/default/记录.png&quot;),             _buildNextBtn(context)           ]         )       ),     );   }   _buildTitle(context){     return Text(&quot;Welcome&quot;,style: Theme.of(context).textTheme.headline4);   }   _buildNextBtn(context){     return IconButton(       icon: Icon(Icons.arrow_forward),       onPressed: (){         StorageUtils().setBool(GlobalConfigs.Storage_App_First_Open, false);         // Navigator.of(context).pushNamed(GlobalRoutes.Route_Index);         Navigator.of(context).pushNamedAndRemoveUntil(GlobalRoutes.Route_Index, (route) =&gt; false);       }     );   } }</code></pre></li></ol><h3 id="header-78">路由</h3><p>使用Fluro动态路由框架</p><p>pubspec.yaml</p><pre><code class="lang-yaml">dependencies:    # 动态路由 fluro    fluro: 1.7.7</code></pre><ol><li><p>global_routes.dart</p><pre><code class="lang-js"> import &#39;package:five_demo/pages/do/do_page.dart&#39;; import &#39;package:fluro/fluro.dart&#39;; import &#39;package:five_demo/pages/pages.dart&#39;; class GlobalRoutes{   // Index,Welcome,Home,Do,My,Detail,Login,Error   static const String Route_App = &quot;/&quot;;   static const String Route_Index = &quot;/index&quot;;   static const String Route_Welcome = &quot;/welcome&quot;;   static const String Route_Home = &quot;/home&quot;;   static const String Route_Do = &quot;/do&quot;;   static const String Route_My=&quot;/my&quot;;   static const String Route_Detail =&quot;/detail/:id&quot;;   static const String Route_Login = &quot;/login&quot;;   static const String Route_Mall=&quot;/mall&quot;;   static const String Route_Error = &quot;/error&quot;;   static const List&lt;String&gt; routePaths=[     Route_App,     Route_Index,     Route_Welcome,     Route_Home,     Route_Do,     Route_My,     Route_Detail,     Route_Login,     Route_Error   ];   static FluroRouter router = init();   static init(){     FluroRouter router = FluroRouter();     routePaths.forEach((element) {       router.define(         element,          handler: buildHandler(element),         transitionType: TransitionType.native       );     });     router.notFoundHandler=buildHandler(Route_Error);     return router;   }   static buildHandler(String path){     return Handler(       handlerFunc: (context,params)=&gt;getRoutePageWidget(path, context.settings.arguments)     );   }     static getRoutePageWidget(String path,Map args){     // Index,Welcome,Home,Do,My,Detail,Login,Error     switch(path){       case Route_App:         return AppPage(args:args);       case Route_Index:         return IndexPage(args: args);       case Route_Welcome:         return WelcomePage(args:args);       case Route_Home:         return HomePage(args: args);       case Route_Do:         return DoPage(args:args);       case Route_My:         return MyPage(args:args);       case Route_Detail:         return DetailPage(args:args);       case Route_Login:         return LoginPage(args:args);       case Route_Mall:         return MallPage(args:args);       default:         return ErrorPage(args:args);     }   } }</code></pre></li><li><p>app_page.dart</p><pre><code class="lang-js"> class AppPage extends StatefulWidget {   final AppState appState = AppState.getInstance();   final Map args;   AppPage({Key key,this.args}) : super(key: key);   @override   _AppPageState createState() =&gt; _AppPageState(); } class _AppPageState extends State&lt;AppPage&gt; {   @override   void initState() {     super.initState();   }   @override   Widget build(BuildContext context) {     // ...     // _buildMaterialApp();   }   _buildMaterialApp(){     return MaterialApp(       title: &#39;Hey,Dear!&#39;,       theme: GlobalThemes.mainThemeData,       debugShowCheckedModeBanner:LogUtils.isInDebugMode,       onGenerateRoute: GlobalRoutes.router.generator,           // route!       home: Global.isFirstOpen?WelcomePage():IndexPage(),     );   } }</code></pre></li><li><p>使用:</p><pre><code class="lang-java"> // welcome_page.dart: onPressed: (){     StorageUtils().setBool(GlobalConfigs.Storage_App_First_Open, false);     // Navigator.of(context).pushNamed(GlobalRoutes.Route_Index);     Navigator.of(context).pushNamedAndRemoveUntil(GlobalRoutes.Route_Index, (route) =&gt; false); } // banner_view.dart onTap: (index){   debugPrint(&quot;banner onTap:$index ${value.bannerItems[index].targetPath}&quot;);   Navigator.pushNamed(     ctx,      value.bannerItems[index].targetPath,     arguments:{&#39;title&#39;:value.bannerItems[index].title}   ); } // channel_view.dart onTap: () =&gt; Navigator             .of(context)             .pushNamed(               GlobalRoutes.Route_Detail,               arguments: {&#39;item&#39;:e,&#39;targetType&#39;:e.targetType,&#39;targetPath&#39;:e.targetPath}             ) // channel_fm_index.dart onTap: (){   Navigator.pushNamed(     context,     GlobalRoutes.Route_Detail,     arguments: {&#39;item&#39;:item,&#39;targetPath&#39;:item[&#39;targetPath&#39;],&#39;targetType&#39;:item[&#39;targetType&#39;]}    ); } // pop onPressed: () =&gt; Navigator.of(context).pop() onPressed: () =&gt; Navigator.pop(context); onPressed: () =&gt; Navigator.pop(context,controller.text);</code></pre></li></ol><h3 id="header-79">底部导航</h3><p>使用 BottomAppBar &amp; IndexedStack &amp; Provider（MVVM）</p><p>pubspec.yaml</p><pre><code class="lang-yaml">dependencies:  # 状态管理  provider: ^4.3.2+2</code></pre><ol><li><p>index_page.dart</p><pre><code class="lang-js"> class IndexPage extends StatefulWidget {   final IndexState indexState = IndexState.getInstance();   final Map args;   IndexPage({Key key,this.args}) : super(key: key);   @override   _IndexPageState createState() =&gt; _IndexPageState(); } class _IndexPageState extends State&lt;IndexPage&gt; {   @override   void initState() {     debugPrint(&quot;+++ IndexPage.initState() +++&quot;);     super.initState();   }   @override   void dispose() {     debugPrint(&quot;+++ IndexPage.dispose() +++&quot;);     super.dispose();   }   @override   Widget build(BuildContext context) {     ScreenUtil.init(       context,       designSize:GlobalConfigs.ScreenDesignSize,       allowFontScaling:true);     return MultiProvider(       providers: [         ChangeNotifierProvider&lt;IndexState&gt;.value(value: widget.indexState),       ],       child: Scaffold(         /// header         // appBar: wds.buildAppBar(&quot;Index&quot;),         /// body         body: _selectCurrentIndex(_bodyBuilder),         /// bottom          bottomNavigationBar: BottomAppBar(           child: Column(             mainAxisSize: MainAxisSize.min,             children: [               _selectCurrentIndex(_bottomNavBuilder),             ],           ),         ),         /// end       ),     );   }   _selectCurrentIndex(builder){    return Selector&lt;IndexState,int&gt;(       selector: (_,indexState)=&gt;indexState.currentIndex,       builder:builder     );   }   Widget _bodyBuilder(BuildContext context,int value,Widget child){     return IndexedStack(       index: value,       children: IndexState.items.map((e) =&gt; e.page).toList(),     );   }   Widget _bottomNavBuilder(BuildContext context,int value,Widget child){     return Container(       padding: GlobalThemes.containerPadding,       child: Row(         mainAxisAlignment: MainAxisAlignment.spaceAround,         crossAxisAlignment: CrossAxisAlignment.end,         children: IndexState.items.map(           (e) =&gt; InkWell(             child:_buildBottomNavItem(e,value),             onTap: ()=&gt;_onTapHandler(e.index),           )         ).toList()       ),     );   }   _onTapHandler(index){     if (widget.indexState.currentIndex != index) {       debugPrint(&quot;$index&quot;);       widget.indexState.currentIndex = index;     }   }   Widget _buildBottomNavItem(IndexPageItem item,int currentIndex) {     // debugPrint(&quot;_buildBottomMenuItem $index active: $active &quot;);     bool active = currentIndex==item.index;     if (item.iconData == null) {       return Container(         padding: GlobalThemes.containerCirclePadding,         decoration: IndexThemes.getBottomBarCircleDecoration(active),         child: Text(           item.label,            style: IndexThemes.getBottomBarCircleTextStyle(active)         ),       );     }      return Theme(       data: ThemeData(         iconTheme: IndexThemes.getBottomBarIconThemeData(active)       ),       child:Column(         mainAxisSize: MainAxisSize.min,         children: [           Icon(active?item.activeIconData:item.iconData),           Text(             item.label,             style: IndexThemes.getBottomBarLabelTextStyle(active)           )         ],       )     );   } }</code></pre></li><li><p>index_state.dart</p><pre><code class="lang-java"> class IndexPageItem{   int index;   IconData iconData;   IconData activeIconData;   String label;   Widget page;   IndexPageItem({this.index,this.iconData,this.activeIconData,this.label,this.page}); } class IndexState with ChangeNotifier{   static List&lt;IndexPageItem&gt; items=[     IndexPageItem(       index: 0,       iconData:Icons.home_outlined,       activeIconData: Icons.home,       label:&quot;首页&quot;,       page:HomePage(args:{&#39;title&#39;:&#39;首页&#39;})     ),     IndexPageItem(       index: 1,       // iconData:Icons.list,       label:&quot;Do&quot;,       page:DoPage(args:{&#39;title&#39;:&#39;Do&#39;})     ),     IndexPageItem(       index: 2,       iconData:Icons.person_outline,       activeIconData: Icons.person,       label:&quot;我的&quot;,       page:MyPage(args:{&#39;title&#39;:&#39;我的&#39;})     ),   ];   int _currentIndex = 0;   static final IndexState _instance = IndexState._internal();   factory IndexState.getInstance() =&gt; _instance;   // IndexState._internal() {   //   _currentIndex = 0;   // }   IndexState._internal();   /// currentIndex   get currentIndex {     return _currentIndex;   }   set currentIndex(int value) {     _currentIndex = value;     notifyListeners();   } }</code></pre></li></ol><h3 id="header-80">Login</h3><p>登录注册方式：</p><ul><li>用户名(手机号) &amp; 验证码（60s发送到手机）</li><li>第三方授权</li></ul><p>Flutter 中“倒计时”的那些事儿<a href="https://blog.csdn.net/weixin_45189747/article/details/103370289" target="_blank" rel="external">https://blog.csdn.net/weixin_45189747/article/details/103370289</a></p><p>Flutter倒计时/计时器的实现<a href="https://zhuanlan.zhihu.com/p/61970955" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/61970955</a></p><p><img src="/2020/08/20/login.png" alt="Login"></p><p>pubspec.yaml</p><pre><code class="lang-yaml">dependencies:  # 提示框  fluttertoast: ^7.1.6</code></pre><ol><li><p>login_page.dart</p><pre><code class="lang-java"> import &#39;dart:async&#39;; import &#39;package:five_demo/global/global_values.dart&#39;; import &#39;package:five_demo/widgets/widgets.dart&#39;; import &#39;package:flutter/material.dart&#39;; import &#39;package:flutter/services.dart&#39;; import &#39;package:fluttertoast/fluttertoast.dart&#39;; class LoginPage extends StatefulWidget {   final Map args;   LoginPage({Key key,this.args}) : super(key: key);   @override   _LoginPageState createState() =&gt; _LoginPageState(); } class _LoginPageState extends State&lt;LoginPage&gt; {   String phoneNo;   String verificationCode;   GlobalKey&lt;FormState&gt; formGlobalKey = GlobalKey&lt;FormState&gt;();   final TextEditingController _phoneNoController = TextEditingController();   final TextEditingController _codeController = TextEditingController();   Timer _timer;   int _timeCount = 60;   startTimer(){     _timeCount=60;     _timer = Timer.periodic(Duration(seconds: 1), (Timer timer){       if(_timeCount&lt;=0){         debugPrint(&quot;倒计时结束&quot;);         _timer.cancel();         setState((){           _timer=null;         });       }else{         setState((){           _timeCount-=1;         });       }     });   }   getCodeText(){     if(_timer!=null &amp;&amp; _timeCount&gt;=0)       return &quot;${_timeCount}s&quot;;     return &quot;获取验证码&quot;;   }   @override   void dispose() {     super.dispose();     if (_timer != null) {       debugPrint(&quot;销毁啦&quot;);       _timer.cancel();       _timer=null;     }   }   @override   Widget build(BuildContext context) {     return Scaffold(       resizeToAvoidBottomInset: false,       appBar: _buildAppBar(),       body: GestureDetector(         onTap: (){           debugPrint(&quot;gesture onTap&quot;);           FocusScope.of(context).requestFocus(new FocusNode());           // FocusScopeNode currentFocus = FocusScope.of(context);           // if (!currentFocus.hasPrimaryFocus &amp;&amp;           //     currentFocus.focusedChild != null) {           //   FocusManager.instance.primaryFocus.unfocus();           // }         },         child: Container(           color: Colors.grey[50],           child: Column(             mainAxisAlignment: MainAxisAlignment.start,             children: [               _buildHeader(),               _buildForm(),               SizedBox(height: 100,),               _buildThirdPart(),             ],           ),         ),       ),       bottomNavigationBar: _buildPolicy(),     );   }   _buildAppBar(){     return AppBar(       backgroundColor: Colors.grey[50],       elevation: 0.0,       toolbarHeight: 40,     );   }   _buildHeader(){     return Container(       padding: EdgeInsets.only(top:10,bottom: 30),       child: Text(&quot;Hey,Dear&quot;,style: TextStyle(fontSize: 22,fontWeight: FontWeight.w500,color: Colors.deepOrange)),     );   }   _buildForm(){     return Container(       padding: EdgeInsets.symmetric(horizontal: 30),       // height: 300,       child: Form(         key: formGlobalKey,         child: Column(           // padding: EdgeInsets.all(20),           children: [             _buildPhoneNoField(),             _buildCodeField(),             _buildSubmit(),           ],         ),       ),     );   }   _buildPhoneNoField(){     return Container(       height: 45,       padding: EdgeInsets.symmetric(horizontal: 10),       margin: EdgeInsets.only(top: 10),       decoration: BoxDecoration(         // borderRadius: BorderRadius.circular(10),         // border: Border.all(color: Colors.grey,),         border: Border(bottom: BorderSide(color: Colors.grey)),       ),       child: Row(         crossAxisAlignment: CrossAxisAlignment.center,         children: [           Text(&quot; + 86  |&quot;,style: TextStyle(fontSize: 14),),           Expanded(             child:TextFormField(               controller: _phoneNoController,               decoration: InputDecoration(                 hintText: &quot;手机号码&quot;,                 hintStyle: TextStyle(fontSize: 14,color: Colors.grey),                 isDense: true,                 contentPadding: EdgeInsets.only(left: 10,top: 5,bottom: 0,right: 10),                 border: const OutlineInputBorder(                   gapPadding: 0,                   borderSide: BorderSide(width: 0,style: BorderStyle.none,),                 ),                 suffix: InkWell(                   onTap: (){                     _phoneNoController.clear();                   },                   child: Icon(Icons.clear,size: 14,),                 )               ),               keyboardType: TextInputType.phone,               inputFormatters: [                 FilteringTextInputFormatter.digitsOnly,                 LengthLimitingTextInputFormatter(11)               ],               // onSaved: (value){               //   debugPrint(&quot;phoneNo onSaved&quot;);               //   this.phoneNo=value;               // },           )),           // IconButton(icon: Icon(Icons.clear,size: 16,), onPressed: (){})         ],       ),     );   }   _buildCodeField(){     return Container(       height: 45,       padding: EdgeInsets.only(left: 10),       margin: EdgeInsets.only(top: 10),       decoration: BoxDecoration(         // borderRadius: BorderRadius.circular(10),         // border: Border.all(color: Colors.grey,),         border: Border(bottom: BorderSide(color: Colors.grey)),       ),       child: Row(         crossAxisAlignment: CrossAxisAlignment.center,         children: [           Expanded(             child:TextFormField(               controller: _codeController,               decoration: InputDecoration(                 hintText: &quot;验证码&quot;,                 hintStyle: TextStyle(fontSize: 14,color: Colors.grey),                 isDense: true,                 contentPadding: EdgeInsets.only(left: 10,top: 5,bottom: 0,right: 10),                 border: const OutlineInputBorder(                   gapPadding: 0,                   borderSide: BorderSide(width: 0,style: BorderStyle.none,),                 ),               ),               keyboardType: TextInputType.phone,               inputFormatters: [                 FilteringTextInputFormatter.digitsOnly,                 LengthLimitingTextInputFormatter(8),               ],               // onSaved: (value){               //   debugPrint(&quot;verificationCode onSaved&quot;);               //   this.verificationCode=value;               // },           )),           _buildCodeBtn()         ],       ),     );   }   _buildCodeBtn(){     return Container(       // height: 35,       // decoration: BoxDecoration(       //   borderRadius: BorderRadius.circular(20),       //   color: Colors.grey[200],       // ),       child: FlatButton(         onPressed: (){           if(_phoneNoController.text==null || _phoneNoController.text.length!=11){             Fluttertoast.showToast(               msg:&quot;请先输入手机号！&quot;,               toastLength: Toast.LENGTH_SHORT,               gravity: ToastGravity.CENTER,               timeInSecForIosWeb: 1,               backgroundColor: Colors.grey[100],               fontSize: 14,               textColor: Colors.deepOrange[300]             );             return;           }           if(_timer==null)             startTimer();           else             debugPrint(&quot;等等&quot;);         },         child: Text(getCodeText(),style: TextStyle(color: Colors.deepOrange[300],fontSize: 14),),       ),     );   }   _buildSubmit(){     return Container(       width: double.infinity,       margin: EdgeInsets.only(top: 20),       child: RaisedButton(         child: Text(&quot;登 录&quot;, style: TextStyle(color: Colors.white,fontSize: 16)),         color: Colors.deepOrange.withOpacity(0.8),         elevation: 0,         shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),         onPressed: () {           debugPrint(&quot;Submit Clicked&quot;);           // formGlobalKey.currentState.save();           // debugPrint(&quot;Submit get username: $username | password: $password&quot;);           bool result = formGlobalKey.currentState.validate();           debugPrint(&quot;validate result: $result&quot;);           if (result) {             formGlobalKey.currentState.save();             debugPrint(&quot;Submit get phoneNo: $phoneNo | verificationCode: $verificationCode&quot;);             debugPrint(&quot;Submit controller phoneNo: ${_phoneNoController.text} | verificationCode: ${_codeController.text}&quot;);           }         },       ),     );   }   _buildPolicy(){     return Container(       padding: EdgeInsets.symmetric(vertical: 10),       child: Text.rich(TextSpan(         style: TextStyle(fontSize: 12,color: Colors.grey),         children: [           TextSpan(text:&quot;首次登录会自动创建账号，且代表同意&quot;),           TextSpan(text: &quot;《用户服务协议》《隐私政策》&quot;,style: TextStyle(color: Colors.deepOrange)),         ]       ))     );   }   /* --------------------- */   _buildThirdPart(){     return Container(       padding: EdgeInsets.symmetric(horizontal: 15),       child: Column(         children: [           Text(&quot;使用第三方账号登录&quot;,style: TextStyle(color: Colors.grey),),           SizedBox(height: 15,),           Row(             mainAxisAlignment: MainAxisAlignment.spaceEvenly,             children: [               IconButton(icon: Icon(Iconfont.wechat,color: Colors.green,size:36), onPressed: (){}),               IconButton(icon: Icon(Iconfont.qq, color: Colors.blue,size:36), onPressed: (){}),               IconButton(icon: Icon(Iconfont.weibo, color: Colors.red,size:36), onPressed: (){}),             ],           )         ],       ),     );   } }</code></pre></li></ol><h3 id="header-81">Banner</h3><ul><li>使用第三方库 flitter_swiper</li><li>MVVM: <ul><li>V(View): banner_view.dart</li><li>VM(ViewModel): banner_state.dart =&gt; HttpRequest(dio)</li><li>M(Model): banner_item.art</li></ul></li></ul><p><img src="/2020/08/20/home-1.png" alt="Banner"></p><p>pubspec.yaml</p><pre><code class="lang-yaml">dependencies:  # 轮播图  flutter_swiper: ^1.1.6  # 状态管理  provider: ^4.3.2+2  # http - dio  dio: ^3.0.10  dio_log : ^1.3.3</code></pre><p>index_page -&gt; home_page: View(banner_view),VM(banner_state),M(banner_item)</p><ol><li><p>index_page.dart</p><pre><code class="lang-java"> class IndexPage extends StatefulWidget {   final IndexState indexState = IndexState.getInstance();   final BannerState bannerState = BannerState.getInstance();   final ActivityState activityState = ActivityState.getInstance();   // ... } class _IndexPageState extends State&lt;IndexPage&gt; {     // ...     @override     Widget build(BuildContext context) {         return MultiProvider(           providers: [             ChangeNotifierProvider&lt;IndexState&gt;.value(value: widget.indexState),             ChangeNotifierProvider&lt;BannerState&gt;.value(value: widget.bannerState),             ChangeNotifierProvider&lt;ActivityState&gt;.value(value: widget.activityState),           ],           child: Scaffold(             body: _selectCurrentIndex(_bodyBuilder),             // ...           ),         );     } }</code></pre></li><li><p>home_page.dart</p><pre><code class="lang-java"> class HomePage extends StatefulWidget {   final Map args;   HomePage({Key key, this.args}) : super(key: key);   @override   _HomePageState createState() =&gt; _HomePageState(); } class _HomePageState extends State&lt;HomePage&gt; {   @override   Widget build(BuildContext context) {     return Scaffold(       appBar: wds.buildAppBar(widget.args != null ? widget.args[&#39;title&#39;] ?? &#39;&#39; : &#39;&#39;),       // body: _buildBody(context),       body: _buildWrapRefresh(context)     );   }   _onRefresh(BuildContext context) {     context.read&lt;CheckInState&gt;().doCheckIn();     context.read&lt;BannerState&gt;().load();     context.read&lt;ActivityState&gt;().reload();     // ...    }   _buildWrapRefresh(BuildContext ctx) {     return RefreshIndicator(         onRefresh: () async {           debugPrint(&quot;+++ HomePage onRefresh! +++&quot;);           _onRefresh(ctx);         },         child: _buildBody(ctx));   }   _buildBody(context) {     return ListView(       controller: Provider.of&lt;ActivityState&gt;(context).scrollController,       children: [         Consumer&lt;CheckInState&gt;(           builder: (_, value, child) =&gt; CheckInView(checkInState: value),         ),         Consumer&lt;BannerState&gt;(builder: (_, value, child) =&gt; BannerView(bannerState: value,)),         Consumer&lt;ActivityState&gt;(builder: (_, value, child) =&gt; ActivityView()),         // ...       ],     );   } }</code></pre></li><li><p>banner_view.dart</p><pre><code class="lang-java"> import &#39;package:five_demo/pages/home/state/banner_state.dart&#39;; import &#39;package:five_demo/widgets/widgets.dart&#39;; import &#39;package:flutter/material.dart&#39;; import &#39;package:flutter_swiper/flutter_swiper.dart&#39;; import &#39;package:provider/provider.dart&#39;; class BannerTheme{   static Color activePaginationColor = Colors.lightBlue[100];   static double bannerHeight=150; } class BannerView extends StatelessWidget {   final BannerState bannerState;   BannerView({Key key,this.bannerState}) : super(key: key);   @override   Widget build(BuildContext context) {     debugPrint(&quot;--- BannerView Build ---&quot;);     // var value = Provider.of&lt;BannerState&gt;(context);     return _buildBody(context, bannerState);   }   _buildBody(ctx,value){     if(value.isLoading){       return buildLoading(height:BannerTheme.bannerHeight);     }     if(value.bannerItems==null || value.bannerItems.length==0){       return buildEmpty();     }     return _buildContent(ctx,value);   }   _buildContent(ctx,value){     return Container(       height: BannerTheme.bannerHeight,       child: Swiper(         itemCount: value.bannerItems.length,         itemBuilder: (context, index) {           return Image.network(value.bannerItems[index].imageUrl, fit: BoxFit.cover);         },         pagination: SwiperPagination(           builder: DotSwiperPaginationBuilder(activeColor: BannerTheme.activePaginationColor)         ),         autoplay: true,         autoplayDelay:3000,         onTap: (index){           debugPrint(&quot;banner onTap:$index ${value.bannerItems[index].targetPath}&quot;);           Navigator.pushNamed(             ctx,              value.bannerItems[index].targetPath,             arguments:{&#39;title&#39;:value.bannerItems[index].title}           );         }       )     );   } }</code></pre></li><li><p>banner_state.dart</p><pre><code class="lang-java"> import &#39;package:five_demo/entities/banner_item.dart&#39;; import &#39;package:five_demo/entities/response_entity.dart&#39;; import &#39;package:flutter/material.dart&#39;; class BannerState with ChangeNotifier{   List&lt;BannerItem&gt; bannerItems;   bool isLoading;   static final BannerState _instance = BannerState._internal();   factory BannerState.getInstance() =&gt; _instance;   BannerState._internal(){     load();   }   @override   dispose(){     debugPrint(&quot;-- BannerState dispose --&quot;);     bannerItems=null;     super.dispose();   }     load() async {     // HttpUtils.get(HttpConfig.HomeBannerRequestPath)     // .then((response){     //   if(response.statusCode==200){     //     var data = ResponseEntity&lt;List&lt;Map&lt;String,dynamic&gt;&gt;&gt;.fromMap(response.data[&#39;data&#39;]);     //     debugPrint(&quot;${data.toJson()}&quot;);     //     bannerItems=data.result?.map((item) =&gt; BannerItem.fromMap(item));     //     notifyListeners();     //   }     // });     Map&lt;String,dynamic&gt; responseData={       &#39;success&#39;:false,       &#39;result&#39;:[           {           &#39;id&#39;:&#39;1&#39;,           &#39;imageUrl&#39;:&#39;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2386581431,1215568659&amp;fm=26&amp;gp=0.jpg&#39;,           &#39;title&#39;:&#39;bannerPic1&#39;,           &#39;subtitle&#39;:&#39;this is banner1 picture&#39;,           &#39;targetPath&#39;:&#39;/detail/a&#39;,           &#39;seqNo&#39;:&#39;1&#39;         },         {           &#39;id&#39;:&#39;2&#39;,           &#39;imageUrl&#39;:&#39;https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=35517157,3504012963&amp;fm=26&amp;gp=0.jpg&#39;,           &#39;title&#39;:&#39;bannerPic2&#39;,           &#39;subtitle&#39;:&#39;this is banner2 picture&#39;,           &#39;targetPath&#39;:&#39;/detail/b&#39;,           &#39;seqNo&#39;:&#39;2&#39;         },         {           &#39;id&#39;:&#39;3&#39;,           &#39;imageUrl&#39;:&#39;https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1123133791,1776909836&amp;fm=26&amp;gp=0.jpg&#39;,           &#39;title&#39;:&#39;bannerPic3&#39;,           &#39;subtitle&#39;:&#39;this is banner3 picture&#39;,           &#39;targetPath&#39;:&#39;/detail/c&#39;,           &#39;seqNo&#39;:&#39;3&#39;         },       ]     };     isLoading=true;     notifyListeners();     await Future.delayed(Duration(seconds: 2));     var data = ResponseEntity&lt;List&lt;Map&gt;&gt;.fromMap(responseData);     bannerItems=data.result.map(       (item){         // debugPrint(&quot;$item&quot;);         return BannerItem.fromMap(item);       }     ).toList();     isLoading=false;     notifyListeners();   } }</code></pre></li><li><p>banner_item.dart</p><pre><code class="lang-java"> class BannerItem{   String id;   String imageUrl;   String title;   String subtitle;   String targetPath;   Map&lt;String,dynamic&gt; args;   int seqNo;   BannerItem.fromMap(Map&lt;String, dynamic&gt; map){     id=map[&#39;id&#39;];     imageUrl=map[&#39;imageUrl&#39;];     title=map[&#39;title&#39;];     subtitle=map[&#39;subtitle&#39;];     targetPath=map[&#39;targetPath&#39;];     args=map[&#39;args&#39;];     seqNo=int.parse(map[&#39;seqNo&#39;]??&quot;0&quot;);   } }</code></pre></li><li><p>http_utils.dart</p><pre><code class="lang-java"> import &#39;package:dio/dio.dart&#39;; import &#39;package:dio_log/interceptor/dio_log_interceptor.dart&#39;; class HttpUtils {   Dio dio;   static final HttpUtils _instance = new HttpUtils._internal();   factory HttpUtils() =&gt; _instance; // 工厂构造   HttpUtils._internal() {     BaseOptions options = new BaseOptions(         contentType: &#39;application/json; charset=utf-8&#39;,         headers: {&#39;Authorization&#39;: null});     dio = Dio(options);     // Interceptor interceptor = InterceptorsWrapper(     //   onRequest: (RequestOptions options) =&gt; options,     //   onResponse: (Response response) =&gt; response,     //   onError: (DioError error) =&gt; error,     // );     // _dio.interceptors.add(interceptor);     dio.interceptors.add(DioLogInterceptor()); // showDebugBtn(context);   }   static String getPath(String path,Map&lt;String,dynamic&gt; args){     // print(&quot;input path:$path&quot;);     Pattern pattern = RegExp(r&#39;:([^/|?|:]+)|([*])&#39;);     String result = path.replaceAllMapped(       pattern,        (match){         print(&quot;match group: ${match.group(0)}&quot;);         print(&quot;match group: ${match.group(1)}&quot;);         return &quot;${args[match.group(1)]??match.group(0)}&quot;;       }     );     // print(result);     return result;   }   Future get(     String path, {     Map&lt;String, dynamic&gt; queryParameters,     Options options,     CancelToken cancelToken,     ProgressCallback onReceiveProgress,   }) async {   return dio.get(path,        queryParameters: queryParameters,       options:options,       cancelToken:cancelToken,       onReceiveProgress:onReceiveProgress     );   }   // get dio =&gt; _dio; }</code></pre></li></ol><h3 id="header-82">ListView 下滑加载更多</h3><p>index_page -&gt; home_page : View(activity_view),VM(activity_state),M(activity_item &amp; link_item)</p><p><img src="/2020/08/20/home-4.png" alt="Activities"></p><ol><li><p>index_page.dart</p><pre><code class="lang-java"> class IndexPage extends StatefulWidget {   final IndexState indexState = IndexState.getInstance();   final BannerState bannerState = BannerState.getInstance();   final ActivityState activityState = ActivityState.getInstance();   // ... } class _IndexPageState extends State&lt;IndexPage&gt; {     // ...     @override     Widget build(BuildContext context) {         return MultiProvider(           providers: [             ChangeNotifierProvider&lt;IndexState&gt;.value(value: widget.indexState),             ChangeNotifierProvider&lt;BannerState&gt;.value(value: widget.bannerState),             ChangeNotifierProvider&lt;ActivityState&gt;.value(value: widget.activityState),             // ...           ],           child: Scaffold(             body: _selectCurrentIndex(_bodyBuilder),             // ...           ),         );     } }</code></pre></li><li><p>home_page.dart</p><pre><code class="lang-js"> class HomePage extends StatefulWidget {   final Map args;   HomePage({Key key, this.args}) : super(key: key);   @override   _HomePageState createState() =&gt; _HomePageState(); } class _HomePageState extends State&lt;HomePage&gt; {   @override   Widget build(BuildContext context) {     return Scaffold(       appBar: wds.buildAppBar(widget.args != null ? widget.args[&#39;title&#39;] ?? &#39;&#39; : &#39;&#39;),       // body: _buildBody(context),       body: _buildWrapRefresh(context)     );   }   _onRefresh(BuildContext context) {     context.read&lt;CheckInState&gt;().doCheckIn();     context.read&lt;BannerState&gt;().load();     context.read&lt;ActivityState&gt;().reload();     // ...    }   _buildWrapRefresh(BuildContext ctx) {     return RefreshIndicator(         onRefresh: () async {           debugPrint(&quot;+++ HomePage onRefresh! +++&quot;);           _onRefresh(ctx);         },         child: _buildBody(ctx));   }   _buildBody(context) {     return ListView(       controller: Provider.of&lt;ActivityState&gt;(context).scrollController,       children: [         Consumer&lt;CheckInState&gt;(           builder: (_, value, child) =&gt; CheckInView(checkInState: value),         ),         Consumer&lt;BannerState&gt;(builder: (_, value, child) =&gt; BannerView(bannerState: value,)),         Consumer&lt;ActivityState&gt;(builder: (_, value, child) =&gt; ActivityView()),         // ...       ],     );   } }</code></pre></li><li><p>activity_view.dart</p><pre><code class="lang-java"> import &#39;package:five_demo/pages/home/state/activity_state.dart&#39;; import &#39;package:flutter/material.dart&#39;; import &#39;package:provider/provider.dart&#39;; class ActivityTheme{   // ... } class ActivityView extends StatelessWidget {   ActivityView({Key key}) : super(key: key);   @override   Widget build(BuildContext context) {     var value = Provider.of&lt;ActivityState&gt;(context);     return _buildBody(context, value);   }   _buildBody(context,value){     // if(value.isLoading){     //   return buildMsg(&quot;Loading...&quot;);     // }     // if(value.activityItems==null || value.activityItems.length==0){     //   return buildEmpty();     // }     return _buildContent(context,value);   }   _buildContent(context,value){     return Container(       margin: EdgeInsets.all(8),       padding: EdgeInsets.all(8),       // color: Colors.lightBlue[50],       child: Column(         children: [           _buildHeader(),           SizedBox(height: 10),           _buildItems(value),         ],       )     );   }   _buildHeader(){     // ...   }   _buildItems(value){     return ListView.builder(       itemCount: value.activityItems.length+1,       shrinkWrap: true,       physics: new NeverScrollableScrollPhysics(),       itemBuilder:  (ctx,index){         if(index==value.activityItems.length){           return _buildEndInfo(value);         }         return _buildActivity(value.activityItems[index]);       }     );   }   _buildActivity(item){     // ...   }   _buildEndInfo(value){     var msg=&quot;&quot;;     if((value.activityItems==null || value.activityItems.length==0)){       if(value.isLoading)         msg=&quot;More Loading ... &quot;;       else         msg=&quot;No Data!&quot;;     }else{       if(value.isLoading)         msg=&quot;More Loading ... &quot;;       else{         msg=&quot;End!&quot;;       }     }     return Container(       padding: EdgeInsets.all(10),       alignment: Alignment.center,       child: Text(msg,style: TextStyle(fontSize: 14,color: Colors.grey),)     );   }  }</code></pre></li><li><p>activity_state.dart</p><pre><code class="lang-java"> import &#39;package:five_demo/entities/activity_item.dart&#39;; import &#39;package:five_demo/entities/response_entity.dart&#39;; import &#39;package:flutter/material.dart&#39;; class ActivityState with ChangeNotifier{   List&lt;ActivityItem&gt; activityItems;   bool isLoading;   int start=0;   int limit=10;   ScrollController scrollController;   static final ActivityState _instance = ActivityState._internal();   factory ActivityState.getInstance() =&gt; _instance;   ActivityState._internal(){     scrollController=new ScrollController();     scrollController.addListener(() {       // debugPrint(&quot;_scrollController:${_scrollController.position.pixels}&quot;);       if(scrollController.position.pixels==scrollController.position.maxScrollExtent){         debugPrint(&quot;-- ActivityState ScrollController Trigger load --&quot;);         load();       }     });     activityItems=[];     load();   }   @override   dispose(){     debugPrint(&quot;-- ActivityState dispose --&quot;);     activityItems=null;     super.dispose();   }   reload(){     start=0;     limit=10;     activityItems.clear();     load();   }   load() async {     /**       String id;       String avatar;       String postUser;       String postTag;       String postTime;       String postFrom;       String postContent;       String postLink;       int likes;       int comments;       String targetPath;      */     isLoading=true;     notifyListeners();      Map&lt;String,dynamic&gt; responseData={       &#39;success&#39;:false,       &#39;result&#39;:[         {           &#39;id&#39;:&#39;1&#39;,           &#39;avatar&#39;:&#39;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2102119556,3949762144&amp;fm=26&amp;gp=0.jpg&#39;,           &#39;postUser&#39;:&#39;小甜甜&#39;,           &#39;postTag&#39;:&#39;官方&#39;,           &#39;postFrom&#39;:&#39;Hey!Dear&#39;,           &#39;postTime&#39;:&#39;2020-12-17&#39;,           &#39;postContent&#39;:&#39;喜洋洋与灰太狼的日常更新啦&#39;,           &#39;postLink&#39;:{             &#39;cover&#39;:&#39;https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1668316143,3125260297&amp;fm=26&amp;gp=0.jpg&#39;,             &#39;title&#39;:&#39;我在这里，我在这里&#39;,             &#39;subtitle&#39;:&#39;快来呀快来呀&#39;,             &#39;targetPath&#39;:&#39;/detail/link/1&#39;,             &#39;linkType&#39;:&#39;html&#39;           },           &#39;targetPath&#39;:&#39;/detail/activity/1&#39;,           &#39;likes&#39;:93840,           &#39;comments&#39;:3         },        {           &#39;id&#39;:&#39;2&#39;,           &#39;avatar&#39;:&#39;https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=3224388312,1750026865&amp;fm=26&amp;gp=0.jpg&#39;,           &#39;postUser&#39;:&#39;肉嘟嘟&#39;,           &#39;postTag&#39;:&#39;官方&#39;,           &#39;postFrom&#39;:&#39;Hey!Dear&#39;,           &#39;postTime&#39;:&#39;2020-12-18&#39;,           &#39;postContent&#39;:&#39;健身啦健身啦&#39;,           &#39;postLink&#39;:{             &#39;cover&#39;:&#39;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1832065145,3723585217&amp;fm=26&amp;gp=0.jpg&#39;,             &#39;title&#39;:&#39;全民运动节，礼品等你拿&#39;,             &#39;targetPath&#39;:&#39;/detail/link/2&#39;,             &#39;linkType&#39;:&#39;html&#39;           },           &#39;targetPath&#39;:&#39;/detail/activity/2&#39;,           &#39;likes&#39;:938,           &#39;comments&#39;:0         },         {           &#39;id&#39;:&#39;3&#39;,           &#39;avatar&#39;:&#39;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1715123681,2767202506&amp;fm=26&amp;gp=0.jpg&#39;,           &#39;postUser&#39;:&#39;酷哥&#39;,           &#39;postTag&#39;:&#39;官方&#39;,           &#39;postFrom&#39;:&#39;Hey!Dear&#39;,           &#39;postTime&#39;:&#39;2020-12-18&#39;,           &#39;postContent&#39;:&#39;Rap! Rap! 跟着我的步伐&#39;,           &#39;postLink&#39;:{             &#39;cover&#39;:&#39;https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1996869834,1902662910&amp;fm=26&amp;gp=0.jpg&#39;,             &#39;title&#39;:&#39;嘿，你敢来么&#39;,             &#39;targetPath&#39;:&#39;/detail/link/3&#39;,             &#39;linkType&#39;:&#39;html&#39;           },           &#39;targetPath&#39;:&#39;/detail/activity/3&#39;,           &#39;likes&#39;:99,           &#39;comments&#39;:9         },       ],     };     isLoading=true;     notifyListeners();     await Future.delayed(Duration(seconds: 2));     var data = ResponseEntity&lt;List&lt;Map&gt;&gt;.fromMap(responseData);     activityItems.addAll(       data.result.map(         (item){           // debugPrint(&quot;$item&quot;);           return ActivityItem.fromMap(item);         }       ).toList()     );     start+=limit;     isLoading=false;     notifyListeners();   } }</code></pre></li><li><p>activity_item.dart</p><pre><code class="lang-java"> import &#39;package:five_demo/entities/link_item.dart&#39;; class ActivityItem{   String id;   String avatar;   String postUser;   String postTag;   String postTime;   String postFrom;   String postContent;   LinkItem postLink;   int likes;   int comments;   String targetPath;   ActivityItem.fromMap(Map map){     id=map[&#39;id&#39;];     avatar=map[&#39;avatar&#39;];     postUser=map[&#39;postUser&#39;];     postTag=map[&#39;postTag&#39;];     postFrom=map[&#39;postFrom&#39;];     postTime=map[&#39;postTime&#39;];     postContent=map[&#39;postContent&#39;];     postLink=map[&#39;postLink&#39;]!=null?LinkItem.fromMap(map[&#39;postLink&#39;]):null;     likes=map[&#39;likes&#39;];     comments=map[&#39;comments&#39;];     targetPath=map[&#39;targetPath&#39;];   }   Map toJson()=&gt;{     &#39;id&#39;:id,     &#39;avatar&#39;:avatar,     &#39;postUser&#39;:postUser,     &#39;postTag&#39;:postTag,     &#39;postFrom&#39;:postFrom,     &#39;postTime&#39;:postTime,     &#39;postContent&#39;:postContent,     &#39;postLink&#39;:postLink,     &#39;likes&#39;:likes,     &#39;comments&#39;:comments,     &#39;targetPath&#39;:targetPath   };   @override   String toString() {     return toJson().toString();   } }</code></pre></li><li><p>link_item.dart</p><pre><code class="lang-java"> class LinkItem{   String cover;   String title;   String subtitle;   String targetPath;   String linkType;   LinkItem.fromMap(Map map){     cover=map[&#39;cover&#39;];     title=map[&#39;title&#39;];     subtitle=map[&#39;subtitle&#39;];     targetPath=map[&#39;targetPath&#39;];     linkType=map[&#39;linkType&#39;];   } }</code></pre></li></ol><h3 id="header-83">Provider</h3><p>do_page</p><ul><li>View: doModuleView<ul><li>VM: doModuleState ( Module: List<domodule> doModules)</domodule></li><li>VM: doInfoState ( Module: Map<string,doinfoitem> doInfoMap)</string,doinfoitem></li></ul></li><li>View: doRecomendView</li></ul><p><img src="/2020/08/20/do.png" alt="Do Page"></p><ol><li><p>do_page.dart</p><pre><code class="lang-js"> class DoPage extends StatelessWidget {   final Map args;   DoPage({Key key,this.args}) : super(key: key);   @override   Widget build(BuildContext context) {     return MultiProvider(       providers: [         ChangeNotifierProvider&lt;DoModuleState&gt;(create: (_)=&gt; DoModuleState.getInstance()),         ChangeNotifierProvider&lt;DoInfoState&gt;(create:(_)=&gt;DoInfoState.getInstance()),         ChangeNotifierProvider&lt;DoRecommendState&gt;(create:(_)=&gt;DoRecommendState.getInstance()),       ],       builder: (_,child){         return RefreshIndicator(           onRefresh: () async {             debugPrint(&quot;+++ DoPage onRefresh! +++&quot;);             _onRefresh(_);           },           child: child         );       },      child: Scaffold(       //  appBar: buildAppBar(&quot;Do&quot;),        appBar: _buildDoBar(),        body: ListView(          children: [             Consumer&lt;DoModuleState&gt;(builder: (_,value,child)=&gt;DoModuleView(),),             Consumer&lt;DoRecommendState&gt;(builder: (_,value,child)=&gt;DoRecommendView(),),          ],        ),      ),     );   }   _onRefresh(BuildContext context) {     Provider.of&lt;DoModuleState&gt;(context,listen: false).load();     Provider.of&lt;DoInfoState&gt;(context,listen: false).load();     Provider.of&lt;DoRecommendState&gt;(context,listen: false).load();   }   _buildDoBar(){     // ...   } }</code></pre></li><li><p>do_module_view.dart</p><pre><code class="lang-java"> class DoModuleView extends StatelessWidget {   DoModuleView({Key key}) : super(key: key);   @override   Widget build(BuildContext context) {     var value = Provider.of&lt;DoModuleState&gt;(context);     return _buildBody(context, value);   }   _buildBody(BuildContext context,DoModuleState value){     if(value.isLoading){       return buildMsg(&quot;Loading...&quot;);     }     if(value.doModules==null || value.doModules.length==0){       return buildEmpty();     }     return _buildContent(context,value);   }   _buildContent(BuildContext context,DoModuleState value){     return Container(       child: Column(         crossAxisAlignment: CrossAxisAlignment.start,         children: value.doModules.map&lt;Widget&gt;(           (e) =&gt;_buildModule(context,e)         ).toList(),       ),     );   }   _buildModule(BuildContext context,DoModule module){     return Container(       child: Column(         crossAxisAlignment: CrossAxisAlignment.start,         children: [           _buildModuleHeader(context,module),           _buildModuleProjects(context,module.children)         ],       ),     );   }   _buildModuleHeader(BuildContext context,DoModule module){     // ...   }   _buildModuleProjects(BuildContext context,List&lt;DoProject&gt; items){     return buildPanel(       Column(         crossAxisAlignment: CrossAxisAlignment.start,         children: ListTile.divideTiles(           context: context,           tiles: items.map&lt;Widget&gt;((e){             return Column(               children: [                 _buildProjectContent(e),                 _buildProjectItems(context,e.children),               ],             );           })         ).toList(),       )     );   }   _buildProjectContent(DoProject project){     return Selector&lt;DoInfoState,DoInfoItem&gt;(       selector: (_,value){         if(value.doInfoMap!=null)           return value.doInfoMap[project.id];         return null;       },       builder: (context, info, child) {         // debugPrint(&quot;build project ${project.id} cause info change&quot;);         return ListTile(           dense: true,           contentPadding: EdgeInsets.all(0),           leading: _buildProjectLeading(project,info),           title: Text(project.title,style: project.level==2?DoModuleViewTheme.level2Title:DoModuleViewTheme.level1Title),           subtitle: _buildProjectSubtitle(info),           trailing: _buildProjectTrailing(project,info),           onTap: (){             debugPrint(&quot;do Project onTap: ${project.id} ${project.title}&quot;);             Navigator.pushNamed(               context,               GlobalRoutes.Route_Detail,arguments: {&#39;item&#39;:project,&#39;info&#39;:info,&#39;targetPath&#39;:project.targetPath,&#39;targetType&#39;:project.targetType}              );             context.read&lt;DoInfoState&gt;()?.reset(project.id);           },         );       },     );   }   _buildProjectItems(BuildContext context,List&lt;DoProject&gt; items){     if(items==null || items.length==0)       return Container();     return Container(       child: Column(         crossAxisAlignment: CrossAxisAlignment.start,         mainAxisAlignment: MainAxisAlignment.start,         children:  items.map&lt;Widget&gt;((e){             return Container(               child: _buildProjectContent(e)             );           }).toList(),       ),     );   } }</code></pre></li></ol><h3 id="header-84">Tab</h3><ul><li>TabController &amp; TabBar(Tab) &amp; TabBarView</li><li>AppBar (PreferredSize)</li><li>PopupMenuButton</li></ul><p><img src="/2020/08/20/channel-fm-tab1-1.png" alt="Channel FM Index"></p><p>channel_fm_index.dart:</p><pre><code class="lang-java">class ChannelFmIndex extends StatefulWidget {  ChannelFmIndex({Key key}) : super(key: key);  @override  _ChannelFmIndexState createState() =&gt; _ChannelFmIndexState();}class _ChannelFmIndexState extends State&lt;ChannelFmIndex&gt;  with SingleTickerProviderStateMixin {  TabController _tabController;  @override  void initState() {     super.initState();    _tabController = TabController(length: 3, vsync: this);  }  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: _buildHeader(),      body: _buildTabView(context),      floatingActionButton: _buildPopupMenu(),    );  }  _buildPopupMenu(){    return PopupMenuButton(      offset: Offset(0,-110),      icon: Icon(Icons.menu,color: Colors.black,),      itemBuilder: (BuildContext context) =&gt; &lt;PopupMenuEntry&gt;[          const PopupMenuItem(            child: FlatButton(onPressed: null, child: Text(&quot;@ 客服&quot;))          ),          PopupMenuItem(            child: FlatButton.icon(              onPressed: null,               icon: Icon(Icons.edit,size: 16,),               label: Text(&quot;投稿&quot;)            )          ),        ]    );  }  _buildHeader(){    return AppBar(      elevation: 0,      automaticallyImplyLeading: false,      titleSpacing: 0,      toolbarHeight: 160,      title: _buildHeadCard(),      bottom: PreferredSize(        preferredSize: Size.fromHeight(50),        child: _buildHeadTabBar(),      ),    );  }  _buildHeadCard(){    return Container(      child: Row(        children: [          // ...        ],      ),    );  } /* ------------------------------------ */  _buildHeadTabBar(){    return Container(      decoration: BoxDecoration(        color: Colors.white,        border: Border.symmetric(          horizontal: BorderSide(color: Colors.grey[50],width: 8)        )      ),      child: TabBar(        controller: _tabController,        indicatorColor: Colors.black87,        indicatorSize: TabBarIndicatorSize.label,        indicatorWeight: 1.0,        tabs: [          Tab(child: Text(&quot;最新&quot;),),          Tab(child: Text(&quot;动态&quot;),),          Tab(child: Text(&quot;简介&quot;),),        ],      ),    );  }  _buildTabView(BuildContext context){    return TabBarView(      controller: _tabController,      children: &lt;Widget&gt;[        _buildRefreshIndicator(&quot;Latest&quot;,_buildTabOfLatest(context)),        _buildRefreshIndicator(&quot;Activity&quot;,_buildTabOfActivity(context)),        _buildRefreshIndicator(&quot;Intro&quot;,_buildTabOfIntro()),      ],    );  }  /* ------------------------------------ */  _buildRefreshIndicator(String name,Widget child){    return RefreshIndicator(      onRefresh: () async {        debugPrint(&quot;+++ $name onRefresh! +++&quot;);      },      child: child    );  }  _buildTabOfLatest(BuildContext context){    // ...  }  _buildTabOfActivity(context){    // ...  }  _buildTabOfIntro(){   // ...   }}</code></pre><h3 id="header-85">Radio Play</h3><p><a href="https://pub.dev/packages/audioplayers" target="_blank" rel="external">https://pub.dev/packages/audioplayers</a><a href="https://dengxiaolong.com/article/2019/07/how-to-play-audioplaxyers-in-flutter.html" target="_blank" rel="external">https://dengxiaolong.com/article/2019/07/how-to-play-audioplaxyers-in-flutter.html</a><a href="https://www.jianshu.com/p/288f869690f0" target="_blank" rel="external">https://www.jianshu.com/p/288f869690f0</a>音效库 <a href="https://www.tukuppt.com/yinxiao/m101/zonghe_0_0_0_0_0_0_3.html" target="_blank" rel="external">https://www.tukuppt.com/yinxiao/m101/zonghe_0_0_0_0_0_0_3.html</a></p><p><img src="/2020/08/20/channel-media-tab1-1.png" alt="Channel FM Media"></p><p>pubspec.yaml</p><pre><code class="lang-yaml">dependencies:  # 音频播放  audioplayers: ^0.17.2</code></pre><p>channel_media_index.dart:</p><pre><code class="lang-java">class ChannelMediaIndex extends StatefulWidget {  ChannelMediaIndex({Key key}) : super(key: key);  @override  _ChannelMediaIndexState createState() =&gt; _ChannelMediaIndexState();}class _ChannelMediaIndexState extends State&lt;ChannelMediaIndex&gt; with SingleTickerProviderStateMixin {  TabController _tabController;  AudioPlayer _audioPlayer;  var _playingItem={};  Duration maxDuration;  Duration currentDuration;  AudioPlayerState playerState;  @override  void initState() {    super.initState();    _tabController = TabController(length: 3, vsync: this);    _initAudioPlayer();  }  _initAudioPlayer() {    _audioPlayer = new AudioPlayer();    _audioPlayer.onDurationChanged.listen((Duration d) {      debugPrint(&#39;Max duration: $d&#39;);      if(mounted)        setState(() =&gt; maxDuration = d);    });    // 位置事件: 此事件更新音频的当前播放位置    _audioPlayer.onAudioPositionChanged.listen((Duration p) {      // debugPrint(&#39;Current position: ${p.inMinutes}:${p.inSeconds}&#39;);      if(mounted)        setState(() =&gt; currentDuration = p);    });    // 状态事件: 此事件返回当前播放器状态。你可以用它来显示播放器是否在播放，或停止，或暂停    _audioPlayer.onPlayerStateChanged.listen((AudioPlayerState s) {      debugPrint(&#39;Current player state: $s&#39;);      if(mounted)        setState(() =&gt; playerState = s);    });    // 完成状态: 当音频结束播放时调用此事件(当使用pause或者stop方法中断播放时不会产生该事件)    _audioPlayer.onPlayerCompletion.listen((event) {      debugPrint(&#39;Current player completed&#39;);      // setState(() { position = duration;});    });    // 错误事件: 当在本地代码中抛出意外错误时    _audioPlayer.onPlayerError.listen((msg) {      print(&#39;audioPlayer error : $msg&#39;);      // setState(() {      //   playerState = PlayerState.stopped;      //   duration = Duration(seconds: 0);      //   position = Duration(seconds: 0);      // });    });  }  play(String resource, {bool isLocal = false}) async {    int result = await _audioPlayer.play(resource, isLocal: isLocal);    if (result == 1) {      debugPrint(&#39;play success&#39;);    } else {      debugPrint(&#39;play failed&#39;);    }  }  stop() async {    int result = await _audioPlayer.stop();    if (result == 1) {      debugPrint(&#39;stop success&#39;);    } else {      debugPrint(&#39;stop failed&#39;);    }  }  pause() async {    int result = await _audioPlayer.pause();    if (result == 1) {      // success      debugPrint(&#39;pause success&#39;);    } else {      debugPrint(&#39;pause failed&#39;);    }  }  resume() async {    int result = await _audioPlayer.resume();    if (result == 1) {      debugPrint(&#39;resume success&#39;);    } else {      debugPrint(&#39;resume failed&#39;);    }  }  seek(startMilliseconds) async {    int result =        await _audioPlayer.seek(new Duration(milliseconds: startMilliseconds));    if (result == 1) {      debugPrint(&#39;seek: go to $startMilliseconds success&#39;);      // await audioPlayer.resume();    } else {      debugPrint(&#39;seek: go to $startMilliseconds failed&#39;);    }  }  @override  void deactivate() async {    debugPrint(&#39;channel_media_index deactivate!&#39;);    int result = await _audioPlayer.release();    if (result == 1) {      debugPrint(&#39;audioPlayer release success&#39;);    } else {      debugPrint(&#39;audioPlayerrelease failed&#39;);    }    super.deactivate();  }  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: _buildAppBar(&quot;FM:风姿物语 - 2020.08&quot;),      body: _buidBody(),    );  }  _buidBody() {    return NestedScrollView(      headerSliverBuilder: (_,innerBoxIsScrolled){        return [          SliverToBoxAdapter(child: _buildPlayPanel(),),          SliverAppBar(            automaticallyImplyLeading: false,            elevation: 0,            floating: true,            pinned: true,            title: _buildTabBar()          ),        ];      },       body: _buildTabView()    );  }  _buildPlayPanel() {    return Container(      height: 330,      decoration: BoxDecoration(        gradient: RadialGradient(          radius: 1,          colors: [Colors.brown,Colors.brown[300],Colors.brown[100]]        ),      ),      child: Column(        children: [          SizedBox(height: 20,),          Expanded(child:_buildPlayCovers()),          SizedBox(height: 10,),          Text(_playingItem[&#39;title&#39;]!=null?_playingItem[&#39;title&#39;]:&quot;&quot;,style: TextStyle(color: Colors.white.withOpacity(0.7),fontWeight: FontWeight.bold,fontSize: 16),),          SizedBox(height: 10,),          _buildPlayCtls()        ],      ),    );  }  _buildPlayCovers(){    var covers=[      &quot;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2826031711,1618078016&amp;fm=26&amp;gp=0.jpg&quot;,      &quot;https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=1822980246,1716056569&amp;fm=26&amp;gp=0.jpg&quot;,      &quot;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3155864268,1264666725&amp;fm=26&amp;gp=0.jpg&quot;,      &quot;https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=1899644059,569818638&amp;fm=26&amp;gp=0.jpg&quot;    ];    return Swiper(      itemCount: covers.length,      itemBuilder: (_,index){        return Container(          decoration: BoxDecoration(            borderRadius: BorderRadius.circular(8),            image: DecorationImage(              image: NetworkImage(covers[index]),              fit: BoxFit.fill,            ),            // color: Colors.grey,          ),        );      },      autoplay: false,      viewportFraction: 0.8,      scale: 0.9,    );  }  _buildPlayCtls(){    return Container(      child: Column(children: [        Container(          padding: EdgeInsets.symmetric(horizontal: 10),          child: LinearProgressIndicator(            value: (maxDuration!=null &amp;&amp; currentDuration!=null)? currentDuration.inSeconds/maxDuration.inSeconds : 0,            backgroundColor: Colors.white.withOpacity(0.2),            valueColor: AlwaysStoppedAnimation&lt;Color&gt;(Colors.white.withOpacity(0.7)),            minHeight:2,          ),        ),        Container(          padding: EdgeInsets.only(left: 10,right: 10,top: 5),          child: Row(            mainAxisAlignment: MainAxisAlignment.spaceBetween,            children: [              Text(currentDuration!=null?&quot;${currentDuration.inMinutes}:${currentDuration.inSeconds.remainder(60)}&quot;:&quot;&quot;,style: TextStyle(fontSize: 12,color: Colors.white.withOpacity(0.5)),),              Text(maxDuration!=null?&quot;${maxDuration.inMinutes}:${maxDuration.inSeconds.remainder(60)}&quot;:&quot;&quot;,style: TextStyle(fontSize: 12,color: Colors.white.withOpacity(0.5)),),            ],          ),        ),        Container(          // color: Colors.grey,          child: Row(            mainAxisAlignment: MainAxisAlignment.spaceEvenly,            children: [              InkWell(                child:Icon(Icons.fast_rewind,color: Colors.white.withOpacity(0.5)),                onTap: (){},              ),              InkWell(                child: Icon(AudioPlayerState.PLAYING==playerState?Icons.play_arrow:Icons.pause,size: 34,color: Colors.white),                onTap: (){                  if(AudioPlayerState.PLAYING==playerState)                    pause();                  else if(_playingItem!=null &amp;&amp; _playingItem[&#39;resource&#39;]!=null)                    play(_playingItem[&#39;resource&#39;]);                },              ),              Icon(Icons.fast_forward,color: Colors.white.withOpacity(0.5)),            ],          ),        ),        SizedBox(height: 8,)      ],)    );  }  /* ----------------- */  _buildTabBar() {    return Container(      decoration: BoxDecoration(          color: Colors.white,          border: Border.symmetric(              horizontal: BorderSide(color: Colors.grey[50], width: 8))),      child: TabBar(        controller: _tabController,        indicatorColor: Colors.black87,        indicatorSize: TabBarIndicatorSize.label,        indicatorWeight: 1.0,        tabs: [          Tab(            child: Text(&quot;播放列表&quot;),          ), // 音频,点击 -&gt; 当前页切换播放内容 Rebuild (同一路由)          Tab(            child: Text(&quot;花絮周边&quot;),          ), // 动态，图文/影片,评论留言 -&gt; 底部弹框，关闭          Tab(            child: Text(&quot;简介&quot;),          )        ],      ),    );  }  _buildTabView() {    return TabBarView(      controller: _tabController,      children: &lt;Widget&gt;[        _buildTab1(),        _buildTab2(),        _buildTab3(),      ],    );  }  /* --------------------- */  getDataOfPlayList() {    return [      {        &#39;id&#39;: &#39;01&#39;,        &#39;title&#39;: &#39;风中有朵雨做的云&#39;,        &#39;duration&#39;: &#39;2:30&#39;,        &#39;subtitle&#39;: &#39;收录于专辑《听说》&#39;,        &#39;resource&#39;:&#39;https://img.tukuppt.com/newpreview_music/08/98/97/5c88d1231eeb570304.mp3&#39;      },      {        &#39;id&#39;: &#39;02&#39;,        &#39;title&#39;: &#39;雨一直下&#39;,        &#39;duration&#39;: &#39;5:30&#39;,        &#39;subtitle&#39;: &#39;收录于专辑《听说》&#39;,        &#39;resource&#39;: &#39;https://img.tukuppt.com/newpreview_music/09/00/75/5c894afe4de5f1618.mp3&#39;      },      {        &#39;id&#39;: &#39;03&#39;,        &#39;title&#39;: &#39;恶作剧幽默搞怪&#39;,        &#39;duration&#39;: &#39;02:03&#39;,        &#39;subtitle&#39;: &#39;猜猜是什么话题&#39;,        // &#39;resource&#39;:&#39;https://img.tukuppt.com/newpreview_music/09/00/44/5c8926ae5fdb676071.mp3&#39;,        &#39;resource&#39;:&#39;https://img.tukuppt.com/newpreview_music/09/00/75/5c894afdc4c1578647.mp3&#39;      },      {&#39;id&#39;: &#39;04&#39;, &#39;title&#39;: &#39;舒缓音乐&#39;, &#39;duration&#39;: &#39;12:30&#39;,&#39;resource&#39;:&#39;https://img.tukuppt.com/newpreview_music/09/00/76/5c894c2e6ad5854338.mp3&#39;},      {&#39;id&#39;: &#39;05&#39;, &#39;title&#39;: &#39;海边悠扬的海浪拍打声和海鸥鸣叫声&#39;, &#39;duration&#39;: &#39;3:30&#39;, &#39;subtitle&#39;: &#39;amazing！&#39;,&#39;resource&#39;:&#39;https://img.tukuppt.com/newpreview_music/09/00/40/5c8921fb5b7a586734.mp3&#39;},    ];  }  _buildTab1() {    return Container(      child: ListView(children: [        _buildPlayList(getDataOfPlayList()),        // ...      ])    );  }  _buildPlayList(playList) {    return Container(      color: Colors.white,      padding: EdgeInsets.all(10),      child: Column(        children: ListTile.divideTiles(            context: context,            tiles: playList.map&lt;Widget&gt;((e) {              bool isActive = (_playingItem!=null &amp;&amp; _playingItem[&#39;id&#39;]==e[&#39;id&#39;]);              return InkWell(                child: Container(                  padding: EdgeInsets.all(8),                  child: Row(                    children: [                      Icon(Icons.play_circle_outline,color: isActive?Colors.deepOrange:Colors.grey,),                      SizedBox(width:10),                      Expanded(                        child: Column(                          crossAxisAlignment: CrossAxisAlignment.start,                          children: [                            Text(&quot;${e[&#39;title&#39;]}&quot;),                            e[&#39;subtitle&#39;] != null                                ? Text(                                    &quot;${e[&#39;subtitle&#39;]}&quot;,                                    style: TextStyle(                                        color: Colors.grey, fontSize: 12),                                  )                                : SizedBox()                          ],                        ),                      ),                      Text(                        &quot;${e[&#39;duration&#39;]}&quot;,                        style: TextStyle(color: Colors.grey, fontSize: 12),                      )                    ],                  ),                ),                onTap: (){                  if(e[&#39;resource&#39;]==null)                    return;                  if(mounted){                    setState(() {                      _playingItem=e;                    });                    play(e[&#39;resource&#39;]);                  }                 },              );            })).toList(),      ),    );  }}</code></pre><h3 id="header-86">setState导致的内存泄漏</h3><p>Flutter中setState导致的内存泄漏——setState() called after dispose()</p><p><a href="https://blog.csdn.net/qq_26287435/article/details/89674247" target="_blank" rel="external">https://blog.csdn.net/qq_26287435/article/details/89674247</a>错误原因是异步消息未返回，所以在setState方法之前调用mouted属性进行判断即可。具体示例如下：</p><pre><code class="lang-js">if(mounted){    setState(() {      _listData.addAll(list);    }}</code></pre><h3 id="header-87">Video Player</h3><p>视频库<a href="http://www.cg002.com/" target="_blank" rel="external">http://www.cg002.com/</a></p><p>Flutter 中使用 video_player 播放视频<a href="http://www.ptbird.cn/flutter-video.html" target="_blank" rel="external">http://www.ptbird.cn/flutter-video.html</a></p><p>Flutter视频播放、Flutter VideoPlayer 视频播放组件精要<a href="https://blog.csdn.net/zl18603543572/article/details/111327310" target="_blank" rel="external">https://blog.csdn.net/zl18603543572/article/details/111327310</a></p><p>pubspec.yaml</p><pre><code class="lang-yaml">dependencies:  # 视频播放  video_player: ^1.0.1</code></pre><ol><li><p>video_play_widget.dart:</p><pre><code class="lang-java"> import &#39;package:flutter/material.dart&#39;; import &#39;package:video_player/video_player.dart&#39;; class VideoPlayWidget extends StatefulWidget {   final String url;   VideoPlayWidget({Key key,this.url}) : super(key: key);   @override   _VideoPlayWidgetState createState() =&gt; _VideoPlayWidgetState(); } class _VideoPlayWidgetState extends State&lt;VideoPlayWidget&gt; {   VideoPlayerController  _playerController ;   @override   void initState() {     super.initState();     _playerController = VideoPlayerController.network(widget.url);     _playerController.initialize()      //异步执行完的回调      ..whenComplete(() {        //刷新页面        setState(() {});      });   }   @override   void dispose() {     _playerController.dispose();     super.dispose();   }   @override   Widget build(BuildContext context) {     return GestureDetector(       onTap: () {         debugPrint(&quot;pop&quot;);         Navigator.pop(context);       },       child: Container(         color: Colors.black,         alignment: Alignment.center,         child: _buildPlayer(),       ),     );   }   _buildPlayer(){     return AspectRatio(       //设置视频的大小 宽高比。长宽比表示为宽高比。例如，16:9宽高比的值为16.0/9.0       aspectRatio: _playerController.value.aspectRatio,       //播放视频的组件       child: VideoPlayer(_playerController),     );   } }</code></pre></li><li><p>调用：</p><pre><code class="lang-java"> Navigator.push(context,   PopupRouteWidget(child: VideoPlayWidget(     url: entry.value[&#39;link&#39;]   )) );</code></pre></li></ol><h3 id="header-88">Photo Preview</h3><p><img src="/2020/08/20/channel-media-tab2-1.png" alt="Channel Media Photo"> <img src="/2020/08/20/channel-media-tab2-2.png" alt="Channel Media Photo"></p><p>pubspec.yaml</p><pre><code class="lang-yaml">dependencies:  # 弹出放大缩小图片  photo_view: ^0.10.3</code></pre><p>photo_preview_widget.dart:</p><pre><code class="lang-java">import &#39;package:flutter/material.dart&#39;;import &#39;package:photo_view/photo_view.dart&#39;;import &#39;package:photo_view/photo_view_gallery.dart&#39;;class PhotoPreviewWidget extends StatefulWidget {  final int initialIndex;  final List photoList;  final PageController pageController;  PhotoPreviewWidget({Key key,this.initialIndex,this.photoList}) : pageController = PageController(initialPage: initialIndex),super(key: key);  @override  _PhotoPreviewWidgetState createState() =&gt; _PhotoPreviewWidgetState();}class _PhotoPreviewWidgetState extends State&lt;PhotoPreviewWidget&gt; {  int _currentIndex;  @override  void initState() {    _currentIndex = widget.initialIndex;    super.initState();  }  void onPageChanged(int index) {    setState(() {      _currentIndex = index;    });  }  @override  Widget build(BuildContext context) {    return Container(      color: Colors.black,      child: Stack(        children: [          GestureDetector(            onTap: () =&gt; Navigator.pop(context),            child: _buildPhotoPreview(),          ),          Align(            alignment: Alignment.bottomCenter,            child: _buildPagination(),          )        ],      ),    );  }  _buildPhotoPreview(){    return Container(      child: PhotoViewGallery.builder(        scrollPhysics: const BouncingScrollPhysics(),        onPageChanged: onPageChanged,        itemCount: widget.photoList.length,        pageController: widget.pageController,        loadingBuilder: (context, event) =&gt; Center(          child: Container(            width: 20.0,            height: 20.0,            child: CircularProgressIndicator(              value: event == null                  ? 0                  : event.cumulativeBytesLoaded / event.expectedTotalBytes,            ),          ),        ),        builder: (BuildContext context, int index) {          return PhotoViewGalleryPageOptions(            imageProvider: NetworkImage(widget.photoList[index][&#39;cover&#39;]),            minScale: PhotoViewComputedScale.contained * 0.6,            maxScale: PhotoViewComputedScale.covered * 1.1,            initialScale: PhotoViewComputedScale.contained,          );        },      ),    );  }  _buildPagination(){    return Container(      child: Row(        mainAxisAlignment: MainAxisAlignment.center,        children: List.generate(          widget.photoList.length,          (i) =&gt; Container(            margin: EdgeInsets.all(5),            child: CircleAvatar(              radius: 4,              backgroundColor: _currentIndex == i ? Colors.white.withOpacity(0.9) : Colors.white.withOpacity(0.5),            ),          ),        ).toList(),      ),    );  }}</code></pre><h3 id="header-89">底部评论</h3><p><img src="/2020/08/20/channel-media-tab2-comment1.png" alt="Channel Media Comment"> <img src="/2020/08/20/channel-media-tab2-comment2.png" alt="Channel Media Comment"></p><ol><li><p>点击触发展示底部评论框 (channel_media_index.dart / project_activity_view.dart)</p><pre><code class="lang-java"> FlatButton.icon(   icon:Icon(Icons.comment,size:16,color:Colors.grey),   label: Text(&quot;评论&quot;,style:TextStyle(fontSize:12,color:Colors.grey)),   onPressed: (){     Navigator.push(context,       PopupRouteWidget(child: InputBottomWidget(         onEditingCompleteText: (text){             print(&#39;点击发送 ---$text&#39;);         },       ))     );   }), FlatButton(   onPressed: (){     Navigator.push(context,         PopupRouteWidget(child: InputBottomWidget(           draftText: activity[&#39;draftText&#39;],           onEditingCompleteText: (text){               print(&#39;点击发送 ---$text&#39;);           },         ))     ).then((value){       print(&quot;input draft: $value --&gt; cache local&quot;);       activity[&#39;draftText&#39;]=value;     });   },   child: Text(&quot;评论&quot;) ); FlatButton(   onPressed: (){     Navigator.push(context,         PopupRouteWidget(child: InputBottomWidget(               hintText: &quot;回复 ${reply[&#39;from&#39;]}&quot;,               onEditingCompleteText: (text){print(&#39;点击发送 ---$text&#39;);},         ))     );   },   child: Text(&quot;回复&quot;) );</code></pre></li><li><p>底部评论框 input_bottom_widget.dart （点击其他处/输入框回车发送 =&gt; 关闭）:</p><pre><code class="lang-java"> import &#39;package:flutter/material.dart&#39;; class InputBottomWidget extends StatelessWidget {   final String hintText;   final String draftText;   final ValueChanged onEditingCompleteText;   // typedef ValueChanged&lt;T&gt; = void Function(T value);   final TextEditingController controller = TextEditingController();   InputBottomWidget({     Key key,     this.onEditingCompleteText,     this.hintText=&quot;评论&quot;,     this.draftText   }) : super(key: key) {     controller.text=draftText;   }   @override   Widget build(BuildContext context) {     return Scaffold(       backgroundColor: Colors.transparent,       body: Column(         children: &lt;Widget&gt;[           Expanded(  // 蒙板               child: GestureDetector(                 child: Container(                   color: Colors.transparent,                   ),                 onTap: () {                   Navigator.pop(context,controller.text);   // 关闭此页                 },               )           ),           Container(               color: Colors.grey[100],               padding: EdgeInsets.symmetric(vertical: 8,horizontal: 16),               child:  _buildInputTextField(context)           )         ],       ),     );   }   _buildInputTextField(context){     return Container(       decoration: BoxDecoration(           color: Colors.white       ),       child: TextField(         decoration: InputDecoration(           hintText: hintText,           isDense: true,           contentPadding: EdgeInsets.only(left: 10,top: 5,bottom: 5,right: 10),           border: const OutlineInputBorder(             gapPadding: 0,             borderSide: BorderSide(width: 0,style: BorderStyle.none,),           ),         ),         controller: controller,         autofocus: true,         style: TextStyle(fontSize: 16),         //设置键盘按钮为发送         textInputAction: TextInputAction.send,         keyboardType: TextInputType.multiline,         minLines: 1,         maxLines: 5,         onEditingComplete: (){           //点击发送调用           print(&#39;onEditingComplete&#39;);           onEditingCompleteText(controller.text);           Navigator.pop(context);         },       ),     );   } }</code></pre></li><li><p>弹出消失动画 popup_route_widget.dart:</p><pre><code class="lang-java"> import &#39;package:flutter/material.dart&#39;; class PopupRouteWidget extends PopupRoute{   final Duration _duration = Duration(milliseconds: 300);   Widget child;   PopupRouteWidget({@required this.child});   @override   Color get barrierColor =&gt; null;   @override   bool get barrierDismissible =&gt; true;   @override   String get barrierLabel =&gt; null;   @override   Widget buildPage(BuildContext context, Animation&lt;double&gt; animation, Animation&lt;double&gt; secondaryAnimation) {     // return child;     return FadeTransition(       opacity: animation,       child: child,     );   }   @override   Duration get transitionDuration =&gt; _duration; }</code></pre></li></ol><h3 id="header-90">瀑布流</h3><p><img src="/2020/08/20/channel-daily-1.png" alt="Channel Daily Comment"></p><p>pubspec.yaml</p><pre><code class="lang-yaml">dependencies:  # 瀑布流  flutter_staggered_grid_view: ^0.3.2</code></pre><p>channel_daily_index.dart:</p><pre><code class="lang-java">_buildNoteItems(){    var noteList=[      {&#39;id&#39;:&#39;1&#39;,&#39;cover&#39;:&#39;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2248624002,2108517552&amp;fm=26&amp;gp=0.jpg&#39;,&#39;title&#39;:&#39;采茶之旅&#39;,&#39;postBy&#39;:&#39;砍柴人&#39;,&#39;avatar&#39;:&#39;https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3397053345,592981929&amp;fm=26&amp;gp=0.jpg&#39;,&#39;likes&#39;:5},      {&#39;id&#39;:&#39;2&#39;,&#39;cover&#39;:&#39;https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=3008435233,972423020&amp;fm=26&amp;gp=0.jpg&#39;,&#39;title&#39;:&#39;断桥边&#39;,&#39;postBy&#39;:&#39;砍柴人&#39;,&#39;avatar&#39;:&#39;https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3397053345,592981929&amp;fm=26&amp;gp=0.jpg&#39;,&#39;likes&#39;:0},      {&#39;id&#39;:&#39;3&#39;,&#39;cover&#39;:&#39;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2126854169,3585890470&amp;fm=26&amp;gp=0.jpg&#39;,&#39;title&#39;:&#39;亲子厨房&#39;,&#39;postBy&#39;:&#39;砍柴人&#39;,&#39;avatar&#39;:&#39;https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3397053345,592981929&amp;fm=26&amp;gp=0.jpg&#39;,&#39;likes&#39;:15},      {&#39;id&#39;:&#39;4&#39;,&#39;cover&#39;:&#39;https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2487663409,412721828&amp;fm=26&amp;gp=0.jpg&#39;,&#39;title&#39;:&#39;墙壁大作战&#39;,&#39;postBy&#39;:&#39;砍柴人&#39;,&#39;avatar&#39;:&#39;https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3397053345,592981929&amp;fm=26&amp;gp=0.jpg&#39;,&#39;likes&#39;:35},      {&#39;id&#39;:&#39;5&#39;,&#39;cover&#39;:&#39;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3647241271,3241631924&amp;fm=26&amp;gp=0.jpg&#39;,&#39;title&#39;:&#39;灰色灰色&#39;,&#39;postBy&#39;:&#39;砍柴人&#39;,&#39;avatar&#39;:&#39;https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3397053345,592981929&amp;fm=26&amp;gp=0.jpg&#39;,&#39;likes&#39;:45},    ];    return Container(      padding: EdgeInsets.symmetric(horizontal: 10),      child: StaggeredGridView.countBuilder(        shrinkWrap: true,        physics: NeverScrollableScrollPhysics(),        crossAxisCount: 4,        itemCount: noteList.length,        itemBuilder: (BuildContext context, int index) =&gt; _buildNoteContent(index, noteList[index]),        staggeredTileBuilder: (int index) =&gt;            new StaggeredTile.count(2, index.isEven ? 2:2.5),        mainAxisSpacing: 8,        crossAxisSpacing: 8,      ),    );  }  _buildNoteContent(index,item){    // return Container(    //   color: Colors.white,    //   child: Center(    //     child: CircleAvatar(    //       backgroundColor: Colors.grey[100],    //       child: Text(&#39;$index&#39;),    //     ),    //   )    // );    return Container(      decoration: BoxDecoration(        borderRadius: BorderRadius.circular(5),        color: Colors.white,      ),      child: Column(        crossAxisAlignment: CrossAxisAlignment.start,        children: [          Expanded(child:             ClipRRect(              borderRadius: BorderRadius.circular(5),              child: Image.network(item[&#39;cover&#39;],fit: BoxFit.cover,)            )          ),          SizedBox(height: 5,),          Text(item[&#39;title&#39;],style: TextStyle(fontWeight: FontWeight.w500),),          SizedBox(height: 5,),          Row(            children: [              CircleAvatar(radius: 10,backgroundImage: NetworkImage(item[&#39;avatar&#39;]),),              SizedBox(width: 5,),              Expanded(child:Text(item[&#39;postBy&#39;])),              Icon(Icons.favorite_outline,size: 15,color: Colors.grey,),              SizedBox(width:5,),              Text(&quot;${item[&#39;likes&#39;]}&quot;)            ],          ),          SizedBox(height: 5,),        ],      ),    );  }</code></pre><h3 id="header-91">Chat 聊天框</h3><p>project_chat_view.dart:</p><pre><code class="lang-java">class ProjectChatView extends StatefulWidget {  final FocusNode focusNode;  ProjectChatView({Key key,this.focusNode}) : super(key: key);  @override  _ProjectChatViewState createState() =&gt; _ProjectChatViewState();}class _ProjectChatViewState extends State&lt;ProjectChatView&gt; with AutomaticKeepAliveClientMixin {  @override  bool get wantKeepAlive =&gt; true;  ScrollController _scrollController = ScrollController() ;  final TextEditingController _inputController = TextEditingController();  @override  Widget build(BuildContext context) {    return Scaffold(      body: _buildChatList(getDataOfChatMsgs()),      bottomNavigationBar:BottomAppBar(        child:  _buildInputPanel(),      )    );  }  _buildInputPanel(){    return Container(      padding: EdgeInsets.all(8),      decoration: BoxDecoration(        color: Colors.grey[200],      ),      child: Row(children: [        Expanded(child: _buildInputTextField()),        SizedBox(width: 5,),        Icon(Icons.insert_emoticon),        SizedBox(width: 5,),        InkWell(          child:Icon(Icons.add_circle_outline),          onTap: (){            // _chatScrollController.jumpTo(_chatScrollController.position.maxScrollExtent);            // Future.delayed(Duration(milliseconds: 100), (){            //   _scrollController.jumpTo(_scrollController.position.maxScrollExtent);            // });          },        ),      ],)      // child: TextField(),    );  }  _buildInputTextField(){    return TextField(      decoration: InputDecoration(        isDense: true,        hintText: &#39;@ 管理员&#39;,        hintStyle: TextStyle(color: Colors.grey),        border: InputBorder.none,        filled: true,        fillColor: Colors.white,      ),      keyboardType: TextInputType.multiline,      textInputAction: TextInputAction.send,      minLines: 1,      maxLines: 5,      focusNode: widget.focusNode,      controller: _inputController,      onSubmitted: (value) {        debugPrint(&#39;submit: $value&#39;);        _inputController.clear();      },      onTap: (){        debugPrint(&quot;tap&quot;);        Future.delayed(Duration(milliseconds: 100), (){          _scrollController.jumpTo(_scrollController.position.maxScrollExtent);          // _scrollController.animateTo(          //   _scrollController.position.maxScrollExtent,          //   duration: Duration(milliseconds: 500), curve: Curves.ease);        });      },    );  }}</code></pre><h3 id="header-92">WebView</h3><p><a href="https://pub.flutter-io.cn/packages/webview_flutter/example" target="_blank" rel="external">https://pub.flutter-io.cn/packages/webview_flutter/example</a></p><p>Flutter WebView与JS交互简易指南<a href="https://blog.csdn.net/weixin_33739541/article/details/89571639" target="_blank" rel="external">https://blog.csdn.net/weixin_33739541/article/details/89571639</a></p><p>Flutter使用JsBridge方式处理Webview与H5通信的方法<a href="https://www.yht7.com/news/60783" target="_blank" rel="external">https://www.yht7.com/news/60783</a></p><p>Flutter 采坑之旅--webview_flutter<a href="https://www.jianshu.com/p/611840cc2797" target="_blank" rel="external">https://www.jianshu.com/p/611840cc2797</a></p><p>pubspec.yaml</p><pre><code class="lang-yaml">dependencies:  webview_flutter: ^1.0.7</code></pre><pre><code class="lang-java">@overrideWidget build(BuildContext context) {    return Scaffold(      appBar: _buildAppBar(),      floatingActionButtonLocation: FloatingActionButtonLocation.miniEndFloat,      body: SafeArea(        child: _buildWebview(),      ),    );}_buildWebview(){    return Container(      height: _webViewHeight,      child: WebView(        initialUrl: widget.initialUrl,        javascriptMode: JavascriptMode.unrestricted,        onWebViewCreated: (WebViewController webViewController) {          _controller.complete(webViewController);        },        onPageStarted: (String url) {          debugPrint(&#39;Page started loading: $url&#39;);        },        onPageFinished: (String url) {          debugPrint(&#39;Page finished loading: $url&#39;);          _getWebViewHeight();          // setState(() {          //   // _isPageFinished = true;          // });        },        gestureNavigationEnabled: true,        javascriptChannels: &lt;JavascriptChannel&gt;[          _invokeJavascriptChannel(context),        ].toSet(),        //拦截页面url        navigationDelegate: (NavigationRequest request) {          if (request.url.startsWith(&#39;alipays:&#39;) ||              request.url.startsWith(&#39;weixin:&#39;)) {            // _openPay(context, request.url);            return NavigationDecision.prevent;          }          return NavigationDecision.navigate;        },      ),    );}// 注册js回调JavascriptChannel _invokeJavascriptChannel(BuildContext context) {    return JavascriptChannel(      name: &#39;Invoke&#39;,      onMessageReceived: (JavascriptMessage message) {        debugPrint(&quot;${message.message}&quot;);        var webHeight = double.parse(message.message);        if (webHeight != null) {          setState(() {            _webViewHeight = webHeight;          });        }      }    );}// 获取页面高度_getWebViewHeight() async {    WebViewController webviewController = await _controller.future;    final String temp = await webviewController.getTitle();    debugPrint(&#39;title:&#39; + temp);    await webviewController.evaluateJavascript(&#39;Invoke.postMessage(document.documentElement.scrollHeight)&#39;);}</code></pre><p>调用 （channel_media_index.dart)</p><pre><code class="lang-java">WebviewWidget(initialUrl: &quot;https://juejin.cn/post/6844903908087693319&quot;,)</code></pre><h3 id="header-93">Html</h3><p>html内容加载</p><p><a href="https://pub.flutter-io.cn/packages/flutter_html" target="_blank" rel="external">https://pub.flutter-io.cn/packages/flutter_html</a><a href="https://cloud.tencent.com/developer/article/1502142" target="_blank" rel="external">https://cloud.tencent.com/developer/article/1502142</a><a href="https://www.jianshu.com/p/8ea17b06e541" target="_blank" rel="external">https://www.jianshu.com/p/8ea17b06e541</a></p><p>pubspec.yaml</p><pre><code class="lang-yaml">dependencies:  # html  flutter_html: ^1.0.0</code></pre><pre><code class="lang-js">_buildRecommendContent(String targetPath){    return Container(      child: Html(        data: &#39;&#39;&#39;        &lt;ul&gt;          &lt;li&gt;            &lt;div&gt;              &lt;img src=&quot;https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=30699094,3647522649&amp;fm=26&amp;gp=0.jpg&quot;/&gt;            &lt;/div&gt;            &lt;div style=&quot;color:green;border:5px solid red;&quot;&gt;              Content            &lt;/div&gt;          &lt;/li&gt;        &lt;/ul&gt;        &#39;&#39;&#39;,        style: {          &quot;img&quot;:Style(            width: 100          ),          &quot;div&quot;:Style(            display: Display.INLINE          )        },      ),    );  }</code></pre><h2 id="header-94">More Reference</h2><ul><li><a href="https://flutterchina.club/widgets/" target="_blank" rel="external">Fluter中文网</a></li><li><a href="https://ducafecat.tech/categories/Flutter-%E5%AE%9E%E6%88%98%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/" target="_blank" rel="external">Flutter 实战从零开始</a></li><li><a href="http://laomengit.com/flutter/widgets/TextField.html#editabletext" target="_blank" rel="external">老孟</a></li><li><a href="http://www.ptbird.cn/category/flutter/" target="_blank" rel="external">Postbird</a></li><li><a href="https://yococoxc.github.io/flutter.html" target="_blank" rel="external">木子才的博客</a></li><li><a href="https://segmentfault.com/a/1190000024454441" target="_blank" rel="external">Flutter仿京东客户端</a></li><li><a href="https://juejin.cn/post/6874082988381241357" target="_blank" rel="external">Flutter第三方插件汇总</a></li><li><a href="https://github.com/826327700/flutter_plugins_demo" target="_blank" rel="external">flutter_plugins_demo flutter好用的轮子推荐</a></li><li><a href="https://cloud.tencent.com/developer/article/1622941" target="_blank" rel="external">【Flutter高级玩法-shape】Path在手，天下我有</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Install&lt;/li&gt;
&lt;li&gt;Scaffold&lt;/li&gt;
&lt;li&gt;Route&lt;/li&gt;
&lt;li&gt;Navigator&lt;/li&gt;
&lt;li&gt;Refresh&lt;/li&gt;
&lt;li&gt;Scroll&lt;/li&gt;
&lt;li&gt;Exception&lt;/li&gt;
&lt;li&gt;Provider&lt;/li&gt;
&lt;li&gt;Demo&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="app" scheme="http://sixdegree.github.io/tags/app/"/>
    
  </entry>
  
  <entry>
    <title>Swagger</title>
    <link href="http://sixdegree.github.io/2019/11/25/Swagger.html"/>
    <id>http://sixdegree.github.io/2019/11/25/Swagger.html</id>
    <published>2019-11-24T16:00:00.000Z</published>
    <updated>2020-04-01T08:17:45.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>annotation: <ul><li>@Api</li><li>@ApiOperation</li><li>@ApiImplicitParams</li><li>@ApiResponses</li><li>@ApiModel</li><li>@ApiModelProperty</li></ul></li><li>sample</li></ol><a id="more"></a><h2 id="header-1">Annotation</h2><p>Refer to <a href="https://blog.csdn.net/jiangyu1013/article/details/83107255" target="_blank" rel="external">swagger2 注解说明</a></p><ul><li><p>请求类上:</p><ul><li><code>@Api(tags=&quot;说明该类的作用&quot;)</code></li></ul></li><li><p>请求方法上 </p><ul><li><code>@ApiOperation(value=&quot;&quot;,notes=&quot;&quot;)</code> 说明方法的用途、作用</li><li><code>@ApiImplicitParams({@ApiImplicitParam(xxxx),...})</code>，<code>@ApiImplicitParam</code> 参数说明<ul><li><code>name</code>：参数名</li><li><code>value</code>：参数的汉字说明、解释</li><li><code>required</code>：参数是否必须传</li><li><code>paramType</code>：参数放在哪个地方<ul><li>header : 请求参数 <code>@RequestHeader</code>获取</li><li>query : 请求参数 <code>@RequestParam</code> 获取</li><li>path: 请求参数<code>@PathVariable</code>获取</li><li>body（不常用）</li><li>form（不常用）    </li></ul></li><li><code>dataType</code>：参数类型，默认String       </li><li><code>defaultValue</code>：参数的默认值</li></ul></li><li><code>@ApiResponses({@ApiResponse(xxx),...})</code> 表示一组响应(一般用于表达错误的响应信息)<ul><li><code>code</code>：数字，例如400</li><li><code>message</code>：信息，例如&quot;请求参数没填好&quot;</li><li><code>response</code>：抛出异常的类</li></ul></li></ul></li><li><p>请求响应entity上(若无特殊说明，不加注解也可，会使用默认的，即直接使用类名&amp;字段名&amp;类型): </p><ul><li><code>@ApiModel</code>（一般用在post/put创建或修改时，使用@RequestBody的场景，请求参数无法使用<code>@ApiImplicitParam</code>注解进行描述）<pre><code>  的时候）</code></pre></li><li><code>@ApiModelProperty</code>：用在entity的属性上</li></ul></li></ul><p><strong>Sample:</strong></p><pre><code class="lang-java">@ApiOperation(&quot;删除某评论&quot;)@ApiImplicitParams({        @ApiImplicitParam(name = &quot;id&quot;, value = &quot;id&quot;, dataType = &quot;Integer&quot;, paramType = &quot;path&quot;),        @ApiImplicitParam(name = &quot;type&quot;, value = &quot;type&quot;, dataType = &quot;String&quot;, paramType = &quot;path&quot;,                allowableValues=&quot;home,school&quot;)})@ApiResponses({    @ApiResponse(code=400,message=&quot;请求参数没填好&quot;),    @ApiResponse(code=404,message=&quot;请求路径没有或页面跳转路径不对&quot;)})@PutMapping(&quot;/comments/{id}/{type}&quot;)public Object updateComment(@PathVariable(&quot;id&quot;) Integer id,        @PathVariable(&quot;type&quot;)String type,        @RequestBody Comment comment){   // ...}</code></pre><h2 id="header-2">Sample</h2><ol><li><p>dependencies</p><pre><code class="lang-xml"> &lt;dependency&gt;     &lt;groupId&gt;io.springfox&lt;/groupId&gt;     &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;     &lt;version&gt;2.9.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;io.springfox&lt;/groupId&gt;     &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;     &lt;version&gt;2.9.2&lt;/version&gt; &lt;/dependency&gt;</code></pre></li><li><p>configuration</p><pre><code class="lang-java"> @Configuration @EnableSwagger2 public class SwaggerConfig {     // @Value(&quot;${swagger.enable:false}&quot;)     // private boolean enable=false;     @Bean     public Docket docket(Environment env) {         Profiles profiles = Profiles.of(&quot;dev&quot;);         boolean flag = env.acceptsProfiles(profiles);         return new Docket(DocumentationType.SWAGGER_2)                 .apiInfo(apiInfo())                 .enable(flag) // .enable(enable)                 .select()                 .apis(RequestHandlerSelectors.basePackage(&quot;com.cj.mybatis.controller&quot;))                 //.apis(RequestHandlerSelectors.withClassAnnotation(RestController.class))                 //.paths(PathSelectors.any())                 .build();     }     private ApiInfo apiInfo() {         return new ApiInfoBuilder()                 .title(&quot;Swagger Demo&quot;)                 .description(&quot;This for swagger demo&quot;)                 //.termsOfServiceUrl(&quot;http://blog.csdn.net/saytime&quot;)                 .version(&quot;1.0&quot;)                 .build();     } }</code></pre></li><li><p>Controller</p><pre><code class="lang-java"> @Api(tags=&quot;Employee Part&quot;) @RestController public class EmployeeController {     @Autowired     private EmployeeService employeeService;     // ============================ CRUD ===========================     @ApiOperation(value=&quot;List Emlpoyees&quot;)     @ApiImplicitParams({             @ApiImplicitParam(name=&quot;page&quot;,value=&quot;页码&quot;,dataType=&quot;Integer&quot;,paramType=&quot;query&quot;,required=false),             @ApiImplicitParam(name=&quot;size&quot;,value=&quot;每页数量&quot;,dataType=&quot;Integer&quot;,paramType=&quot;query&quot;,required=false)     })     @GetMapping(&quot;/employees&quot;)     public Object listEmployees(@RequestParam(name=&quot;page&quot;,required=false) Integer page             ,@RequestParam(name=&quot;size&quot;,required=false) Integer size) {         if(page!=null &amp;&amp; size!=null) {             return ResponseUtil.ok(employeeService.listByPage(page, size));         }else {             // return new ResponseEntity&lt;&gt;(employeeService.listAll(),HttpStatus.OK);             return ResponseUtil.ok(employeeService.listAll());         }     }     @ApiOperation(&quot;Get Employee By Id&quot;)     @ApiImplicitParam(name=&quot;id&quot;,value=&quot;Employee唯一标识&quot;,dataType=&quot;Integer&quot;,paramType=&quot;path&quot;,required=true)     @GetMapping(&quot;/employees/{id}&quot;)     public Object getEmployee(@PathVariable Integer id) {         return ResponseUtil.ok(employeeService.getEmployee(id));     }     @ApiOperation(&quot;Update Employee By Id&quot;)     @ApiImplicitParam(name=&quot;id&quot;,value=&quot;Employee唯一标识&quot;,dataType=&quot;Integer&quot;,paramType=&quot;path&quot;,required=true)     @PutMapping(&quot;/employees/{id}&quot;)     public Object updateEmployee(@PathVariable(&quot;id&quot;) Integer id,@RequestBody Employee emp) {         emp.setId(id);         Integer result=this.employeeService.updateEmployee(emp);         return ResponseUtil.result(result==1, result);     }     @ApiOperation(&quot;Add Employee&quot;)     @PostMapping(&quot;/employees&quot;)     public Object insertEmployee(@RequestBody Employee emp) {         emp.setId(null);         Integer result = this.employeeService.insertEmployee(emp);         return ResponseUtil.result(result!=null, result);     }     @ApiOperation(&quot;Delete Employee By Id&quot;)     @ApiImplicitParam(name=&quot;id&quot;,value=&quot;Employee唯一标识&quot;,dataType=&quot;Integer&quot;,paramType=&quot;path&quot;,required=true)     @DeleteMapping(&quot;/employees/{id}&quot;)     public Object deleteEmployee(@PathVariable Integer id) {         Integer result = this.employeeService.deleteEmployee(id);         return ResponseUtil.result(result==1, result);     } }</code></pre></li><li><p>entity</p><pre><code class="lang-java"> @ApiModel(&quot;Employee Model&quot;) @Data public class Employee {     @ApiModelProperty(&quot;唯一标识&quot;)     private Integer id;     @ApiModelProperty(&quot;名称&quot;)     private String name;     @ApiModelProperty(&quot;备注&quot;)     private String remark;     @ApiModelProperty(name=&quot;部门Id&quot;,notes=&quot;Department table primary key&quot;)     private Integer departmentId; }</code></pre></li><li><p>run then visit: <a href="http://localhost:8080/demo/swagger-ui.html" target="_blank" rel="external">http://localhost:8080/demo/swagger-ui.html</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;annotation: &lt;ul&gt;
&lt;li&gt;@Api&lt;/li&gt;
&lt;li&gt;@ApiOperation&lt;/li&gt;
&lt;li&gt;@ApiImplicitParams&lt;/li&gt;
&lt;li&gt;@ApiResponses&lt;/li&gt;
&lt;li&gt;@ApiModel&lt;/li&gt;
&lt;li&gt;@ApiModelProperty&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sample&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://sixdegree.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
